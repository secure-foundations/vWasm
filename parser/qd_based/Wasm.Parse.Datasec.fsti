module Wasm.Parse.Datasec

(* This file has been automatically generated by EverParse. *)
open FStar.Bytes
module U8 = FStar.UInt8
module U16 = FStar.UInt16
module U32 = FStar.UInt32
module U64 = FStar.UInt64
module LP = LowParse.Spec.Base
module LS = LowParse.SLow.Base
module LPI = LowParse.Spec.AllIntegers
module L = FStar.List.Tot
module BY = FStar.Bytes

open Wasm.Parse.Aux_section_const11
open Wasm.Parse.Aux_constbyte0
open Wasm.Parse.Aux_vecdata

(* Type of field cont*)
include Wasm.Parse.Datasec_cont

type datasec = {
  n : aux_section_const11;
  aux_ignore_byte : aux_constbyte0;
  cont : datasec_cont;
}

inline_for_extraction noextract let datasec_parser_kind = LP.strong_parser_kind 9 16777220 None

noextract val datasec_parser: LP.parser datasec_parser_kind datasec

noextract val datasec_serializer: LP.serializer datasec_parser

noextract val datasec_bytesize (x:datasec) : GTot nat

noextract val datasec_bytesize_eq (x:datasec) : Lemma (datasec_bytesize x == Seq.length (LP.serialize datasec_serializer x))

val datasec_parser32: LS.parser32 datasec_parser

val datasec_serializer32: LS.serializer32 datasec_serializer

val datasec_size32: LS.size32 datasec_serializer

val datasec_bytesize_eqn (x: datasec) : Lemma (datasec_bytesize x == (aux_section_const11_bytesize (x.n)) + (aux_constbyte0_bytesize (x.aux_ignore_byte)) + (datasec_cont_bytesize (x.cont))) [SMTPat (datasec_bytesize x)]

