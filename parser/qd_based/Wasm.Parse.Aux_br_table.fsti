module Wasm.Parse.Aux_br_table

(* This file has been automatically generated by EverParse. *)
open FStar.Bytes
module U8 = FStar.UInt8
module U16 = FStar.UInt16
module U32 = FStar.UInt32
module U64 = FStar.UInt64
module LP = LowParse.Spec.Base
module LS = LowParse.SLow.Base
module LPI = LowParse.Spec.AllIntegers
module L = FStar.List.Tot
module BY = FStar.Bytes

open Wasm.Parse.Aux_veclabelidx
open Wasm.Parse.Labelidx

type aux_br_table = {
  ls : aux_veclabelidx;
  ln : labelidx;
}

inline_for_extraction noextract let aux_br_table_parser_kind = LP.strong_parser_kind 8 1028 None

noextract val aux_br_table_parser: LP.parser aux_br_table_parser_kind aux_br_table

noextract val aux_br_table_serializer: LP.serializer aux_br_table_parser

noextract val aux_br_table_bytesize (x:aux_br_table) : GTot nat

noextract val aux_br_table_bytesize_eq (x:aux_br_table) : Lemma (aux_br_table_bytesize x == Seq.length (LP.serialize aux_br_table_serializer x))

val aux_br_table_parser32: LS.parser32 aux_br_table_parser

val aux_br_table_serializer32: LS.serializer32 aux_br_table_serializer

val aux_br_table_size32: LS.size32 aux_br_table_serializer

val aux_br_table_bytesize_eqn (x: aux_br_table) : Lemma (aux_br_table_bytesize x == (aux_veclabelidx_bytesize (x.ls)) + (labelidx_bytesize (x.ln))) [SMTPat (aux_br_table_bytesize x)]

