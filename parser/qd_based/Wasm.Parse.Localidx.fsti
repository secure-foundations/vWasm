module Wasm.Parse.Localidx

(* This file has been automatically generated by EverParse. *)
open FStar.Bytes
module U8 = FStar.UInt8
module U16 = FStar.UInt16
module U32 = FStar.UInt32
module U64 = FStar.UInt64
module LP = LowParse.Spec.Base
module LS = LowParse.SLow.Base
module LPI = LowParse.Spec.AllIntegers
module L = FStar.List.Tot
module BY = FStar.Bytes


type localidx = U32.t

inline_for_extraction noextract let localidx_parser_kind = LP.strong_parser_kind 4 4 (Some LP.ParserKindMetadataTotal)

noextract val localidx_parser: LP.parser localidx_parser_kind localidx

noextract val localidx_serializer: LP.serializer localidx_parser

noextract val localidx_bytesize (x:localidx) : GTot nat

noextract val localidx_bytesize_eq (x:localidx) : Lemma (localidx_bytesize x == Seq.length (LP.serialize localidx_serializer x))

val localidx_parser32: LS.parser32 localidx_parser

val localidx_serializer32: LS.serializer32 localidx_serializer

val localidx_size32: LS.size32 localidx_serializer

val localidx_bytesize_eqn (x: localidx) : Lemma (localidx_bytesize x == 4) [SMTPat (localidx_bytesize x)]

val localidx_parser_serializer_eq (_: unit) : Lemma (localidx_parser == LPI.parse_u32 /\ localidx_serializer == LPI.serialize_u32)

