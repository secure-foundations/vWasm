module Wasm.Parse.Typesec

(* This file has been automatically generated by EverParse. *)
open FStar.Bytes
module U8 = FStar.UInt8
module U16 = FStar.UInt16
module U32 = FStar.UInt32
module U64 = FStar.UInt64
module LP = LowParse.Spec.Base
module LS = LowParse.SLow.Base
module LPI = LowParse.Spec.AllIntegers
module L = FStar.List.Tot
module BY = FStar.Bytes

open Wasm.Parse.Aux_section_const1
open Wasm.Parse.Aux_constbyte0
open Wasm.Parse.Aux_vecfunctype

(* Type of field cont*)
include Wasm.Parse.Typesec_cont

type typesec = {
  n : aux_section_const1;
  aux_ignore_byte : aux_constbyte0;
  cont : typesec_cont;
}

inline_for_extraction noextract let typesec_parser_kind = LP.strong_parser_kind 9 16777220 None

noextract val typesec_parser: LP.parser typesec_parser_kind typesec

noextract val typesec_serializer: LP.serializer typesec_parser

noextract val typesec_bytesize (x:typesec) : GTot nat

noextract val typesec_bytesize_eq (x:typesec) : Lemma (typesec_bytesize x == Seq.length (LP.serialize typesec_serializer x))

val typesec_parser32: LS.parser32 typesec_parser

val typesec_serializer32: LS.serializer32 typesec_serializer

val typesec_size32: LS.size32 typesec_serializer

val typesec_bytesize_eqn (x: typesec) : Lemma (typesec_bytesize x == (aux_section_const1_bytesize (x.n)) + (aux_constbyte0_bytesize (x.aux_ignore_byte)) + (typesec_cont_bytesize (x.cont))) [SMTPat (typesec_bytesize x)]

