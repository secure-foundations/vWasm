module Wasm.Parse.Export

(* This file has been automatically generated by EverParse. *)
open FStar.Bytes
module U8 = FStar.UInt8
module U16 = FStar.UInt16
module U32 = FStar.UInt32
module U64 = FStar.UInt64
module LP = LowParse.Spec.Base
module LS = LowParse.SLow.Base
module LPI = LowParse.Spec.AllIntegers
module L = FStar.List.Tot
module BY = FStar.Bytes

open Wasm.Parse.Name
open Wasm.Parse.Exportdesc

type export = {
  nm : name;
  d : exportdesc;
}

inline_for_extraction noextract let export_parser_kind = LP.strong_parser_kind 9 264 None

noextract val export_parser: LP.parser export_parser_kind export

noextract val export_serializer: LP.serializer export_parser

noextract val export_bytesize (x:export) : GTot nat

noextract val export_bytesize_eq (x:export) : Lemma (export_bytesize x == Seq.length (LP.serialize export_serializer x))

val export_parser32: LS.parser32 export_parser

val export_serializer32: LS.serializer32 export_serializer

val export_size32: LS.size32 export_serializer

val export_bytesize_eqn (x: export) : Lemma (export_bytesize x == (name_bytesize (x.nm)) + (exportdesc_bytesize (x.d))) [SMTPat (export_bytesize x)]

