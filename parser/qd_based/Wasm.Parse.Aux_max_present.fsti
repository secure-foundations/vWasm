module Wasm.Parse.Aux_max_present

(* This file has been automatically generated by EverParse. *)
open FStar.Bytes
module U8 = FStar.UInt8
module U16 = FStar.UInt16
module U32 = FStar.UInt32
module U64 = FStar.UInt64
module LP = LowParse.Spec.Base
module LS = LowParse.SLow.Base
module LPI = LowParse.Spec.AllIntegers
module L = FStar.List.Tot
module BY = FStar.Bytes


type aux_max_present =
  | Absent
  | Present

let string_of_aux_max_present = function
  | Absent -> "absent"
  | Present -> "present"

inline_for_extraction noextract let aux_max_present_parser_kind = LP.strong_parser_kind 1 1 None

noextract val aux_max_present_parser: LP.parser aux_max_present_parser_kind aux_max_present

noextract val aux_max_present_serializer: LP.serializer aux_max_present_parser

noextract val aux_max_present_bytesize (x:aux_max_present) : GTot nat

noextract val aux_max_present_bytesize_eq (x:aux_max_present) : Lemma (aux_max_present_bytesize x == Seq.length (LP.serialize aux_max_present_serializer x))

val aux_max_present_parser32: LS.parser32 aux_max_present_parser

val aux_max_present_serializer32: LS.serializer32 aux_max_present_serializer

val aux_max_present_size32: LS.size32 aux_max_present_serializer

