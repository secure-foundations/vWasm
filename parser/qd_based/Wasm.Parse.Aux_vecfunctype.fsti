module Wasm.Parse.Aux_vecfunctype

(* This file has been automatically generated by EverParse. *)
open FStar.Bytes
module U8 = FStar.UInt8
module U16 = FStar.UInt16
module U32 = FStar.UInt32
module U64 = FStar.UInt64
module LP = LowParse.Spec.Base
module LS = LowParse.SLow.Base
module LPI = LowParse.Spec.AllIntegers
module L = FStar.List.Tot
module BY = FStar.Bytes

open Wasm.Parse.Functype

inline_for_extraction noextract let min_count = 0
inline_for_extraction noextract let max_count = 8191
type aux_vecfunctype = l:list functype{0 <= L.length l /\ L.length l <= 8191}

inline_for_extraction noextract let aux_vecfunctype_parser_kind = LP.strong_parser_kind 4 67158013 None

noextract val aux_vecfunctype_parser: LP.parser aux_vecfunctype_parser_kind aux_vecfunctype

noextract val aux_vecfunctype_serializer: LP.serializer aux_vecfunctype_parser

noextract val aux_vecfunctype_bytesize (x:aux_vecfunctype) : GTot nat

noextract val aux_vecfunctype_bytesize_eq (x:aux_vecfunctype) : Lemma (aux_vecfunctype_bytesize x == Seq.length (LP.serialize aux_vecfunctype_serializer x))

val aux_vecfunctype_parser32: LS.parser32 aux_vecfunctype_parser

val aux_vecfunctype_serializer32: LS.serializer32 aux_vecfunctype_serializer

val aux_vecfunctype_size32: LS.size32 aux_vecfunctype_serializer

