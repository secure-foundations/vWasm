module Wasm.Parse.Data

(* This file has been automatically generated by EverParse. *)
open FStar.Bytes
module U8 = FStar.UInt8
module U16 = FStar.UInt16
module U32 = FStar.UInt32
module U64 = FStar.UInt64
module LP = LowParse.Spec.Base
module LS = LowParse.SLow.Base
module LPI = LowParse.Spec.AllIntegers
module L = FStar.List.Tot
module BY = FStar.Bytes

open Wasm.Parse.Memidx
open Wasm.Parse.Constexpr
open Wasm.Parse.Aux_vecbyte

type data = {
  x : memidx;
  e : constexpr;
  b : aux_vecbyte;
}

inline_for_extraction noextract let data_parser_kind = LP.strong_parser_kind 10 263176 None

noextract val data_parser: LP.parser data_parser_kind data

noextract val data_serializer: LP.serializer data_parser

noextract val data_bytesize (x:data) : GTot nat

noextract val data_bytesize_eq (x:data) : Lemma (data_bytesize x == Seq.length (LP.serialize data_serializer x))

val data_parser32: LS.parser32 data_parser

val data_serializer32: LS.serializer32 data_serializer

val data_size32: LS.size32 data_serializer

val data_bytesize_eqn (x: data) : Lemma (data_bytesize x == (memidx_bytesize (x.x)) + (constexpr_bytesize (x.e)) + (aux_vecbyte_bytesize (x.b))) [SMTPat (data_bytesize x)]

