module Wasm.Parse.Aux_min_max

(* This file has been automatically generated by EverParse. *)
open FStar.Bytes
module U8 = FStar.UInt8
module U16 = FStar.UInt16
module U32 = FStar.UInt32
module U64 = FStar.UInt64
module LP = LowParse.Spec.Base
module LS = LowParse.SLow.Base
module LPI = LowParse.Spec.AllIntegers
module L = FStar.List.Tot
module BY = FStar.Bytes


type aux_min_max = {
  min : U32.t;
  max : U32.t;
}

inline_for_extraction noextract let aux_min_max_parser_kind = LP.strong_parser_kind 8 8 (Some LP.ParserKindMetadataTotal)

noextract val aux_min_max_parser: LP.parser aux_min_max_parser_kind aux_min_max

noextract val aux_min_max_serializer: LP.serializer aux_min_max_parser

noextract val aux_min_max_bytesize (x:aux_min_max) : GTot nat

noextract val aux_min_max_bytesize_eq (x:aux_min_max) : Lemma (aux_min_max_bytesize x == Seq.length (LP.serialize aux_min_max_serializer x))

val aux_min_max_parser32: LS.parser32 aux_min_max_parser

val aux_min_max_serializer32: LS.serializer32 aux_min_max_serializer

val aux_min_max_size32: LS.size32 aux_min_max_serializer

val aux_min_max_bytesize_eqn (x: aux_min_max) : Lemma (aux_min_max_bytesize x == 4 + 4) [SMTPat (aux_min_max_bytesize x)]

