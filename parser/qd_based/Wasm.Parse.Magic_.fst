module Wasm.Parse.Magic_

(* This file has been automatically generated by EverParse. *)
open FStar.Bytes
module U8 = FStar.UInt8
module U16 = FStar.UInt16
module U32 = FStar.UInt32
module U64 = FStar.UInt64
module LP = LowParse.Spec
module LS = LowParse.SLow
module LPI = LowParse.Spec.AllIntegers
module L = FStar.List.Tot
module BY = FStar.Bytes

#reset-options "--using_facts_from '* -FStar.Tactics -FStar.Reflection' --z3rlimit 16 --z3cliopt smt.arith.nl=false --max_fuel 2 --max_ifuel 2"

type magic_' = ((aux_magic_0 & aux_magic_1) & (aux_magic_2 & aux_magic_3))

inline_for_extraction let synth_magic_ (x: magic_') : magic_ =
  match x with ((m0,m1),(m2,m3)) -> {
    m0 = m0;
    m1 = m1;
    m2 = m2;
    m3 = m3;
  }

inline_for_extraction let synth_magic__recip (x: magic_) : magic_' = ((x.m0,x.m1),(x.m2,x.m3))

let synth_magic__recip_inverse () : Lemma (LP.synth_inverse synth_magic__recip synth_magic_) = ()

let synth_magic__injective () : Lemma (LP.synth_injective synth_magic_) =
  LP.synth_inverse_synth_injective synth_magic__recip synth_magic_;
  synth_magic__recip_inverse ()

let synth_magic__inverse () : Lemma (LP.synth_inverse synth_magic_ synth_magic__recip) =
  assert_norm (LP.synth_inverse synth_magic_ synth_magic__recip)

let synth_magic__recip_injective () : Lemma (LP.synth_injective synth_magic__recip) =
  synth_magic__recip_inverse ();
  LP.synth_inverse_synth_injective synth_magic_ synth_magic__recip

noextract let magic_'_parser : LP.parser _ magic_' = ((aux_magic_0_parser `LP.nondep_then` aux_magic_1_parser) `LP.nondep_then` (aux_magic_2_parser `LP.nondep_then` aux_magic_3_parser))

noextract let magic_'_parser_kind = LP.get_parser_kind magic_'_parser

let magic__parser =
  synth_magic__injective ();
  assert_norm (magic__parser_kind == magic_'_parser_kind);
  magic_'_parser `LP.parse_synth` synth_magic_

noextract let magic_'_serializer : LP.serializer magic_'_parser = ((aux_magic_0_serializer `LP.serialize_nondep_then` aux_magic_1_serializer) `LP.serialize_nondep_then` (aux_magic_2_serializer `LP.serialize_nondep_then` aux_magic_3_serializer))

let magic__serializer =
  [@inline_let] let _ = synth_magic__injective () in
  [@inline_let] let _ = synth_magic__inverse () in
  [@inline_let] let _ = assert_norm (magic__parser_kind == magic_'_parser_kind) in
  LP.serialize_synth _ synth_magic_ magic_'_serializer synth_magic__recip ()

let magic__bytesize (x:magic_) : GTot nat = Seq.length (magic__serializer x)

let magic__bytesize_eq x = ()

inline_for_extraction let magic_'_parser32 : LS.parser32 magic_'_parser = ((aux_magic_0_parser32 `LS.parse32_nondep_then` aux_magic_1_parser32) `LS.parse32_nondep_then` (aux_magic_2_parser32 `LS.parse32_nondep_then` aux_magic_3_parser32))

let magic__parser32 =
  [@inline_let] let _ = synth_magic__injective () in
  [@inline_let] let _ = assert_norm (magic__parser_kind == magic_'_parser_kind) in
  LS.parse32_synth _ synth_magic_ (fun x -> synth_magic_ x) magic_'_parser32 ()

inline_for_extraction let magic_'_serializer32 : LS.serializer32 magic_'_serializer = ((aux_magic_0_serializer32 `LS.serialize32_nondep_then` aux_magic_1_serializer32) `LS.serialize32_nondep_then` (aux_magic_2_serializer32 `LS.serialize32_nondep_then` aux_magic_3_serializer32))

let magic__serializer32 =
  [@inline_let] let _ = synth_magic__injective () in
  [@inline_let] let _ = synth_magic__inverse () in
  [@inline_let] let _ = assert_norm (magic__parser_kind == magic_'_parser_kind) in
  LS.serialize32_synth _ synth_magic_ _ magic_'_serializer32 synth_magic__recip (fun x -> synth_magic__recip x) ()

inline_for_extraction let magic_'_size32 : LS.size32 magic_'_serializer = ((aux_magic_0_size32 `LS.size32_nondep_then` aux_magic_1_size32) `LS.size32_nondep_then` (aux_magic_2_size32 `LS.size32_nondep_then` aux_magic_3_size32))

let magic__size32 =
  [@inline_let] let _ = synth_magic__injective () in
  [@inline_let] let _ = synth_magic__inverse () in
  [@inline_let] let _ = assert_norm (magic__parser_kind == magic_'_parser_kind) in
  LS.size32_synth _ synth_magic_ _ magic_'_size32 synth_magic__recip (fun x -> synth_magic__recip x) ()

let magic__bytesize_eqn x =
  [@inline_let] let _ = synth_magic__injective () in
  [@inline_let] let _ = synth_magic__inverse () in
  [@inline_let] let _ = assert_norm (magic__parser_kind == magic_'_parser_kind) in
  LP.serialize_synth_eq _ synth_magic_ magic_'_serializer synth_magic__recip () x;
LP.length_serialize_nondep_then aux_magic_0_serializer aux_magic_1_serializer x.m0 x.m1;
LP.length_serialize_nondep_then aux_magic_2_serializer aux_magic_3_serializer x.m2 x.m3;
LP.length_serialize_nondep_then (aux_magic_0_serializer `LP.serialize_nondep_then` aux_magic_1_serializer) (aux_magic_2_serializer `LP.serialize_nondep_then` aux_magic_3_serializer) (x.m0, x.m1) (x.m2, x.m3);
  (aux_magic_0_bytesize_eq (x.m0));
  (aux_magic_1_bytesize_eq (x.m1));
  (aux_magic_2_bytesize_eq (x.m2));
  (aux_magic_3_bytesize_eq (x.m3));
  assert(magic__bytesize x == Seq.length (LP.serialize aux_magic_0_serializer x.m0) + Seq.length (LP.serialize aux_magic_1_serializer x.m1) + Seq.length (LP.serialize aux_magic_2_serializer x.m2) + Seq.length (LP.serialize aux_magic_3_serializer x.m3))

