module Wasm.Parse.Elemtype

(* This file has been automatically generated by EverParse. *)
open FStar.Bytes
module U8 = FStar.UInt8
module U16 = FStar.UInt16
module U32 = FStar.UInt32
module U64 = FStar.UInt64
module LP = LowParse.Spec
module LS = LowParse.SLow
module LPI = LowParse.Spec.AllIntegers
module L = FStar.List.Tot
module BY = FStar.Bytes

#reset-options "--using_facts_from '* -FStar.Tactics -FStar.Reflection' --z3rlimit 16 --z3cliopt smt.arith.nl=false --max_fuel 2 --max_ifuel 2"

[@LP.Norm] inline_for_extraction let elemtype_enum : LP.enum elemtype U8.t =
  [@inline_let] let e = [
    Funcref, 112z;
  ] in
  [@inline_let] let _ =
    assert_norm (L.noRepeats (LP.list_map fst e))
  in
  [@inline_let] let _ = 
    assert_norm (L.noRepeats (LP.list_map snd e))
  in e

noextract let elemtype_repr_parser = LPI.parse_u8

noextract let elemtype_repr_serializer = LPI.serialize_u8

inline_for_extraction noextract let elemtype_repr_parser32 = LS.parse32_u8

inline_for_extraction noextract let elemtype_repr_serializer32 = LS.serialize32_u8

inline_for_extraction noextract let elemtype_repr_size32 = LS.size32_u8

inline_for_extraction let synth_elemtype (x: LP.enum_key elemtype_enum) : Tot elemtype = x

inline_for_extraction let synth_elemtype_inv (x: elemtype) : Tot (LP.enum_key elemtype_enum) =
  [@inline_let] let _ : squash (LP.list_mem x (LP.list_map fst elemtype_enum)) =
    _ by (LP.synth_maybe_enum_key_inv_unknown_tac x)
  in
  x

let lemma_synth_elemtype_inj () : Lemma
  (LP.synth_injective synth_elemtype) = ()

let lemma_synth_elemtype_inv () : Lemma
  (LP.synth_inverse synth_elemtype synth_elemtype_inv) = ()

noextract let parse_elemtype_key : LP.parser _ (LP.enum_key elemtype_enum) =
  LP.parse_enum_key elemtype_repr_parser elemtype_enum

noextract let serialize_elemtype_key : LP.serializer parse_elemtype_key =
  LP.serialize_enum_key elemtype_repr_parser elemtype_repr_serializer elemtype_enum

noextract let elemtype_parser : LP.parser _ elemtype =
  lemma_synth_elemtype_inj ();
  parse_elemtype_key `LP.parse_synth` synth_elemtype

noextract let elemtype_serializer : LP.serializer elemtype_parser =
  lemma_synth_elemtype_inj ();
  lemma_synth_elemtype_inv ();
  LP.serialize_synth _ synth_elemtype serialize_elemtype_key synth_elemtype_inv ()

let elemtype_bytesize (x:elemtype) : GTot nat = Seq.length (elemtype_serializer x)

let elemtype_bytesize_eq x = ()

let parse32_elemtype_key : LS.parser32 parse_elemtype_key =
  FStar.Tactics.synth_by_tactic (LS.parse32_enum_key_tac elemtype_repr_parser32 elemtype_enum)

let elemtype_parser32 : LS.parser32 elemtype_parser =
  lemma_synth_elemtype_inj ();
  LS.parse32_synth _ synth_elemtype (fun x->synth_elemtype x) parse32_elemtype_key ()

let serialize32_elemtype_key : LS.serializer32 serialize_elemtype_key =
  FStar.Tactics.synth_by_tactic (LS.serialize32_enum_key_gen_tac
    elemtype_repr_serializer32 elemtype_enum)

let elemtype_serializer32 : LS.serializer32 elemtype_serializer =
  lemma_synth_elemtype_inj ();
  lemma_synth_elemtype_inv ();
  LS.serialize32_synth _ synth_elemtype _ serialize32_elemtype_key synth_elemtype_inv (fun x->synth_elemtype_inv x) ()

let elemtype_size32 =
  [@inline_let] let _ = assert_norm (LS.size32_constant_precond elemtype_serializer 1ul) in
  LS.size32_constant elemtype_serializer 1ul ()

