module Wasm.Parse.Codesec

(* This file has been automatically generated by EverParse. *)
open FStar.Bytes
module U8 = FStar.UInt8
module U16 = FStar.UInt16
module U32 = FStar.UInt32
module U64 = FStar.UInt64
module LP = LowParse.Spec
module LS = LowParse.SLow
module LPI = LowParse.Spec.AllIntegers
module L = FStar.List.Tot
module BY = FStar.Bytes

#reset-options "--using_facts_from '* -FStar.Tactics -FStar.Reflection' --z3rlimit 16 --z3cliopt smt.arith.nl=false --max_fuel 2 --max_ifuel 2"

(* Type of field cont*)
open Wasm.Parse.Codesec_cont

type codesec' = ((aux_section_const10 & aux_constbyte0) & codesec_cont)

inline_for_extraction let synth_codesec (x: codesec') : codesec =
  match x with ((n,aux_ignore_byte),cont) -> {
    n = n;
    aux_ignore_byte = aux_ignore_byte;
    cont = cont;
  }

inline_for_extraction let synth_codesec_recip (x: codesec) : codesec' = ((x.n,x.aux_ignore_byte),x.cont)

let synth_codesec_recip_inverse () : Lemma (LP.synth_inverse synth_codesec_recip synth_codesec) = ()

let synth_codesec_injective () : Lemma (LP.synth_injective synth_codesec) =
  LP.synth_inverse_synth_injective synth_codesec_recip synth_codesec;
  synth_codesec_recip_inverse ()

let synth_codesec_inverse () : Lemma (LP.synth_inverse synth_codesec synth_codesec_recip) =
  assert_norm (LP.synth_inverse synth_codesec synth_codesec_recip)

let synth_codesec_recip_injective () : Lemma (LP.synth_injective synth_codesec_recip) =
  synth_codesec_recip_inverse ();
  LP.synth_inverse_synth_injective synth_codesec synth_codesec_recip

noextract let codesec'_parser : LP.parser _ codesec' = ((aux_section_const10_parser `LP.nondep_then` aux_constbyte0_parser) `LP.nondep_then` codesec_cont_parser)

noextract let codesec'_parser_kind = LP.get_parser_kind codesec'_parser

let codesec_parser =
  synth_codesec_injective ();
  assert_norm (codesec_parser_kind == codesec'_parser_kind);
  codesec'_parser `LP.parse_synth` synth_codesec

noextract let codesec'_serializer : LP.serializer codesec'_parser = ((aux_section_const10_serializer `LP.serialize_nondep_then` aux_constbyte0_serializer) `LP.serialize_nondep_then` codesec_cont_serializer)

let codesec_serializer =
  [@inline_let] let _ = synth_codesec_injective () in
  [@inline_let] let _ = synth_codesec_inverse () in
  [@inline_let] let _ = assert_norm (codesec_parser_kind == codesec'_parser_kind) in
  LP.serialize_synth _ synth_codesec codesec'_serializer synth_codesec_recip ()

let codesec_bytesize (x:codesec) : GTot nat = Seq.length (codesec_serializer x)

let codesec_bytesize_eq x = ()

inline_for_extraction let codesec'_parser32 : LS.parser32 codesec'_parser = ((aux_section_const10_parser32 `LS.parse32_nondep_then` aux_constbyte0_parser32) `LS.parse32_nondep_then` codesec_cont_parser32)

let codesec_parser32 =
  [@inline_let] let _ = synth_codesec_injective () in
  [@inline_let] let _ = assert_norm (codesec_parser_kind == codesec'_parser_kind) in
  LS.parse32_synth _ synth_codesec (fun x -> synth_codesec x) codesec'_parser32 ()

inline_for_extraction let codesec'_serializer32 : LS.serializer32 codesec'_serializer = ((aux_section_const10_serializer32 `LS.serialize32_nondep_then` aux_constbyte0_serializer32) `LS.serialize32_nondep_then` codesec_cont_serializer32)

let codesec_serializer32 =
  [@inline_let] let _ = synth_codesec_injective () in
  [@inline_let] let _ = synth_codesec_inverse () in
  [@inline_let] let _ = assert_norm (codesec_parser_kind == codesec'_parser_kind) in
  LS.serialize32_synth _ synth_codesec _ codesec'_serializer32 synth_codesec_recip (fun x -> synth_codesec_recip x) ()

inline_for_extraction let codesec'_size32 : LS.size32 codesec'_serializer = ((aux_section_const10_size32 `LS.size32_nondep_then` aux_constbyte0_size32) `LS.size32_nondep_then` codesec_cont_size32)

let codesec_size32 =
  [@inline_let] let _ = synth_codesec_injective () in
  [@inline_let] let _ = synth_codesec_inverse () in
  [@inline_let] let _ = assert_norm (codesec_parser_kind == codesec'_parser_kind) in
  LS.size32_synth _ synth_codesec _ codesec'_size32 synth_codesec_recip (fun x -> synth_codesec_recip x) ()

let codesec_bytesize_eqn x =
  [@inline_let] let _ = synth_codesec_injective () in
  [@inline_let] let _ = synth_codesec_inverse () in
  [@inline_let] let _ = assert_norm (codesec_parser_kind == codesec'_parser_kind) in
  LP.serialize_synth_eq _ synth_codesec codesec'_serializer synth_codesec_recip () x;
LP.length_serialize_nondep_then aux_section_const10_serializer aux_constbyte0_serializer x.n x.aux_ignore_byte;
LP.length_serialize_nondep_then (aux_section_const10_serializer `LP.serialize_nondep_then` aux_constbyte0_serializer) codesec_cont_serializer (x.n, x.aux_ignore_byte) x.cont;
  (aux_section_const10_bytesize_eq (x.n));
  (aux_constbyte0_bytesize_eq (x.aux_ignore_byte));
  (codesec_cont_bytesize_eq (x.cont));
  assert(codesec_bytesize x == Seq.length (LP.serialize aux_section_const10_serializer x.n) + Seq.length (LP.serialize aux_constbyte0_serializer x.aux_ignore_byte) + Seq.length (LP.serialize codesec_cont_serializer x.cont))

