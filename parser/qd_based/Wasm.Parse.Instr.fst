module Wasm.Parse.Instr

(* This file has been automatically generated by EverParse. *)
open FStar.Bytes
module U8 = FStar.UInt8
module U16 = FStar.UInt16
module U32 = FStar.UInt32
module U64 = FStar.UInt64
module LP = LowParse.Spec
module LS = LowParse.SLow
module LPI = LowParse.Spec.AllIntegers
module L = FStar.List.Tot
module BY = FStar.Bytes

#reset-options "--using_facts_from '* -FStar.Tactics -FStar.Reflection' --z3rlimit 16 --z3cliopt smt.arith.nl=false --max_fuel 2 --max_ifuel 2"

friend Wasm.Parse.Aux_insn_label

// Need high Z3 limits for large sum types
#set-options "--z3rlimit 10260"

inline_for_extraction unfold let aux_insn_label_as_enum_key (x:aux_insn_label) : Pure (LP.enum_key aux_insn_label_enum)
  (requires norm [delta; zeta; iota; primops] (LP.list_mem x (LP.list_map fst aux_insn_label_enum)) == true) (ensures fun _ -> True) =
  [@inline_let] let _ = norm_spec [delta; zeta; iota; primops] (LP.list_mem x (LP.list_map fst aux_insn_label_enum)) in x

inline_for_extraction let key_of_instr (x:instr) : LP.enum_key aux_insn_label_enum =
  match x with
  | Rest_block _ -> aux_insn_label_as_enum_key Block
  | Rest_loop _ -> aux_insn_label_as_enum_key Loop
  | Rest_if_ _ -> aux_insn_label_as_enum_key If_
  | Rest_br _ -> aux_insn_label_as_enum_key Br
  | Rest_br_if _ -> aux_insn_label_as_enum_key Br_if
  | Rest_br_table _ -> aux_insn_label_as_enum_key Br_table
  | Rest_call _ -> aux_insn_label_as_enum_key Call
  | Rest_call_indirect _ -> aux_insn_label_as_enum_key Call_indirect
  | Rest_local_get _ -> aux_insn_label_as_enum_key Local_get
  | Rest_local_set _ -> aux_insn_label_as_enum_key Local_set
  | Rest_local_tee _ -> aux_insn_label_as_enum_key Local_tee
  | Rest_global_get _ -> aux_insn_label_as_enum_key Global_get
  | Rest_global_set _ -> aux_insn_label_as_enum_key Global_set
  | Rest_i32_load _ -> aux_insn_label_as_enum_key I32_load
  | Rest_i64_load _ -> aux_insn_label_as_enum_key I64_load
  | Rest_f32_load _ -> aux_insn_label_as_enum_key F32_load
  | Rest_f64_load _ -> aux_insn_label_as_enum_key F64_load
  | Rest_i32_load8_s _ -> aux_insn_label_as_enum_key I32_load8_s
  | Rest_i32_load8_u _ -> aux_insn_label_as_enum_key I32_load8_u
  | Rest_i32_load16_s _ -> aux_insn_label_as_enum_key I32_load16_s
  | Rest_i32_load16_u _ -> aux_insn_label_as_enum_key I32_load16_u
  | Rest_i64_load8_s _ -> aux_insn_label_as_enum_key I64_load8_s
  | Rest_i64_load8_u _ -> aux_insn_label_as_enum_key I64_load8_u
  | Rest_i64_load16_s _ -> aux_insn_label_as_enum_key I64_load16_s
  | Rest_i64_load16_u _ -> aux_insn_label_as_enum_key I64_load16_u
  | Rest_i64_load32_s _ -> aux_insn_label_as_enum_key I64_load32_s
  | Rest_i64_load32_u _ -> aux_insn_label_as_enum_key I64_load32_u
  | Rest_i32_store _ -> aux_insn_label_as_enum_key I32_store
  | Rest_i64_store _ -> aux_insn_label_as_enum_key I64_store
  | Rest_f32_store _ -> aux_insn_label_as_enum_key F32_store
  | Rest_f64_store _ -> aux_insn_label_as_enum_key F64_store
  | Rest_i32_store8 _ -> aux_insn_label_as_enum_key I32_store8
  | Rest_i32_store16 _ -> aux_insn_label_as_enum_key I32_store16
  | Rest_i64_store8 _ -> aux_insn_label_as_enum_key I64_store8
  | Rest_i64_store16 _ -> aux_insn_label_as_enum_key I64_store16
  | Rest_i64_store32 _ -> aux_insn_label_as_enum_key I64_store32
  | Rest_memory_size _ -> aux_insn_label_as_enum_key Memory_size
  | Rest_memory_grow _ -> aux_insn_label_as_enum_key Memory_grow
  | Rest_i32_const _ -> aux_insn_label_as_enum_key I32_const
  | Rest_i64_const _ -> aux_insn_label_as_enum_key I64_const
  | Rest_f32_const _ -> aux_insn_label_as_enum_key F32_const
  | Rest_f64_const _ -> aux_insn_label_as_enum_key F64_const
  | Rest_end_of_contiguous_instructions _ -> aux_insn_label_as_enum_key End_of_contiguous_instructions
  | Rest_f64_reinterpret_i64 _ -> aux_insn_label_as_enum_key F64_reinterpret_i64
  | Rest_f32_reinterpret_i32 _ -> aux_insn_label_as_enum_key F32_reinterpret_i32
  | Rest_i64_reinterpret_f64 _ -> aux_insn_label_as_enum_key I64_reinterpret_f64
  | Rest_i32_reinterpret_f32 _ -> aux_insn_label_as_enum_key I32_reinterpret_f32
  | Rest_f64_promote_f32 _ -> aux_insn_label_as_enum_key F64_promote_f32
  | Rest_f64_convert_i64_u _ -> aux_insn_label_as_enum_key F64_convert_i64_u
  | Rest_f64_convert_i64_s _ -> aux_insn_label_as_enum_key F64_convert_i64_s
  | Rest_f64_convert_i32_u _ -> aux_insn_label_as_enum_key F64_convert_i32_u
  | Rest_f64_convert_i32_s _ -> aux_insn_label_as_enum_key F64_convert_i32_s
  | Rest_f32_demote_f64 _ -> aux_insn_label_as_enum_key F32_demote_f64
  | Rest_f32_convert_i64_u _ -> aux_insn_label_as_enum_key F32_convert_i64_u
  | Rest_f32_convert_i64_s _ -> aux_insn_label_as_enum_key F32_convert_i64_s
  | Rest_f32_convert_i32_u _ -> aux_insn_label_as_enum_key F32_convert_i32_u
  | Rest_f32_convert_i32_s _ -> aux_insn_label_as_enum_key F32_convert_i32_s
  | Rest_i64_trunc_f64_u _ -> aux_insn_label_as_enum_key I64_trunc_f64_u
  | Rest_i64_trunc_f64_s _ -> aux_insn_label_as_enum_key I64_trunc_f64_s
  | Rest_i64_trunc_f32_u _ -> aux_insn_label_as_enum_key I64_trunc_f32_u
  | Rest_i64_trunc_f32_s _ -> aux_insn_label_as_enum_key I64_trunc_f32_s
  | Rest_i64_extend_i32_u _ -> aux_insn_label_as_enum_key I64_extend_i32_u
  | Rest_i64_extend_i32_s _ -> aux_insn_label_as_enum_key I64_extend_i32_s
  | Rest_i32_trunc_f64_u _ -> aux_insn_label_as_enum_key I32_trunc_f64_u
  | Rest_i32_trunc_f64_s _ -> aux_insn_label_as_enum_key I32_trunc_f64_s
  | Rest_i32_trunc_f32_u _ -> aux_insn_label_as_enum_key I32_trunc_f32_u
  | Rest_i32_trunc_f32_s _ -> aux_insn_label_as_enum_key I32_trunc_f32_s
  | Rest_i32_wrap_i64 _ -> aux_insn_label_as_enum_key I32_wrap_i64
  | Rest_f64_copysign _ -> aux_insn_label_as_enum_key F64_copysign
  | Rest_f64_max _ -> aux_insn_label_as_enum_key F64_max
  | Rest_f64_min _ -> aux_insn_label_as_enum_key F64_min
  | Rest_f64_div _ -> aux_insn_label_as_enum_key F64_div
  | Rest_f64_mul _ -> aux_insn_label_as_enum_key F64_mul
  | Rest_f64_sub _ -> aux_insn_label_as_enum_key F64_sub
  | Rest_f64_add _ -> aux_insn_label_as_enum_key F64_add
  | Rest_f64_sqrt _ -> aux_insn_label_as_enum_key F64_sqrt
  | Rest_f64_nearest _ -> aux_insn_label_as_enum_key F64_nearest
  | Rest_f64_trunc _ -> aux_insn_label_as_enum_key F64_trunc
  | Rest_f64_floor _ -> aux_insn_label_as_enum_key F64_floor
  | Rest_f64_ceil _ -> aux_insn_label_as_enum_key F64_ceil
  | Rest_f64_neg _ -> aux_insn_label_as_enum_key F64_neg
  | Rest_f64_abs _ -> aux_insn_label_as_enum_key F64_abs
  | Rest_f32_copysign _ -> aux_insn_label_as_enum_key F32_copysign
  | Rest_f32_max _ -> aux_insn_label_as_enum_key F32_max
  | Rest_f32_min _ -> aux_insn_label_as_enum_key F32_min
  | Rest_f32_div _ -> aux_insn_label_as_enum_key F32_div
  | Rest_f32_mul _ -> aux_insn_label_as_enum_key F32_mul
  | Rest_f32_sub _ -> aux_insn_label_as_enum_key F32_sub
  | Rest_f32_add _ -> aux_insn_label_as_enum_key F32_add
  | Rest_f32_sqrt _ -> aux_insn_label_as_enum_key F32_sqrt
  | Rest_f32_nearest _ -> aux_insn_label_as_enum_key F32_nearest
  | Rest_f32_trunc _ -> aux_insn_label_as_enum_key F32_trunc
  | Rest_f32_floor _ -> aux_insn_label_as_enum_key F32_floor
  | Rest_f32_ceil _ -> aux_insn_label_as_enum_key F32_ceil
  | Rest_f32_neg _ -> aux_insn_label_as_enum_key F32_neg
  | Rest_f32_abs _ -> aux_insn_label_as_enum_key F32_abs
  | Rest_i64_rotr _ -> aux_insn_label_as_enum_key I64_rotr
  | Rest_i64_rotl _ -> aux_insn_label_as_enum_key I64_rotl
  | Rest_i64_shr_u _ -> aux_insn_label_as_enum_key I64_shr_u
  | Rest_i64_shr_s _ -> aux_insn_label_as_enum_key I64_shr_s
  | Rest_i64_shl _ -> aux_insn_label_as_enum_key I64_shl
  | Rest_i64_xor _ -> aux_insn_label_as_enum_key I64_xor
  | Rest_i64_or _ -> aux_insn_label_as_enum_key I64_or
  | Rest_i64_and _ -> aux_insn_label_as_enum_key I64_and
  | Rest_i64_rem_u _ -> aux_insn_label_as_enum_key I64_rem_u
  | Rest_i64_rem_s _ -> aux_insn_label_as_enum_key I64_rem_s
  | Rest_i64_div_u _ -> aux_insn_label_as_enum_key I64_div_u
  | Rest_i64_div_s _ -> aux_insn_label_as_enum_key I64_div_s
  | Rest_i64_mul _ -> aux_insn_label_as_enum_key I64_mul
  | Rest_i64_sub _ -> aux_insn_label_as_enum_key I64_sub
  | Rest_i64_add _ -> aux_insn_label_as_enum_key I64_add
  | Rest_i64_popcnt _ -> aux_insn_label_as_enum_key I64_popcnt
  | Rest_i64_ctz _ -> aux_insn_label_as_enum_key I64_ctz
  | Rest_i64_clz _ -> aux_insn_label_as_enum_key I64_clz
  | Rest_i32_rotr _ -> aux_insn_label_as_enum_key I32_rotr
  | Rest_i32_rotl _ -> aux_insn_label_as_enum_key I32_rotl
  | Rest_i32_shr_u _ -> aux_insn_label_as_enum_key I32_shr_u
  | Rest_i32_shr_s _ -> aux_insn_label_as_enum_key I32_shr_s
  | Rest_i32_shl _ -> aux_insn_label_as_enum_key I32_shl
  | Rest_i32_xor _ -> aux_insn_label_as_enum_key I32_xor
  | Rest_i32_or _ -> aux_insn_label_as_enum_key I32_or
  | Rest_i32_and _ -> aux_insn_label_as_enum_key I32_and
  | Rest_i32_rem_u _ -> aux_insn_label_as_enum_key I32_rem_u
  | Rest_i32_rem_s _ -> aux_insn_label_as_enum_key I32_rem_s
  | Rest_i32_div_u _ -> aux_insn_label_as_enum_key I32_div_u
  | Rest_i32_div_s _ -> aux_insn_label_as_enum_key I32_div_s
  | Rest_i32_mul _ -> aux_insn_label_as_enum_key I32_mul
  | Rest_i32_sub _ -> aux_insn_label_as_enum_key I32_sub
  | Rest_i32_add _ -> aux_insn_label_as_enum_key I32_add
  | Rest_i32_popcnt _ -> aux_insn_label_as_enum_key I32_popcnt
  | Rest_i32_ctz _ -> aux_insn_label_as_enum_key I32_ctz
  | Rest_i32_clz _ -> aux_insn_label_as_enum_key I32_clz
  | Rest_f64_ge _ -> aux_insn_label_as_enum_key F64_ge
  | Rest_f64_le _ -> aux_insn_label_as_enum_key F64_le
  | Rest_f64_gt _ -> aux_insn_label_as_enum_key F64_gt
  | Rest_f64_lt _ -> aux_insn_label_as_enum_key F64_lt
  | Rest_f64_ne _ -> aux_insn_label_as_enum_key F64_ne
  | Rest_f64_eq _ -> aux_insn_label_as_enum_key F64_eq
  | Rest_f32_ge _ -> aux_insn_label_as_enum_key F32_ge
  | Rest_f32_le _ -> aux_insn_label_as_enum_key F32_le
  | Rest_f32_gt _ -> aux_insn_label_as_enum_key F32_gt
  | Rest_f32_lt _ -> aux_insn_label_as_enum_key F32_lt
  | Rest_f32_ne _ -> aux_insn_label_as_enum_key F32_ne
  | Rest_f32_eq _ -> aux_insn_label_as_enum_key F32_eq
  | Rest_i64_ge_u _ -> aux_insn_label_as_enum_key I64_ge_u
  | Rest_i64_ge_s _ -> aux_insn_label_as_enum_key I64_ge_s
  | Rest_i64_le_u _ -> aux_insn_label_as_enum_key I64_le_u
  | Rest_i64_le_s _ -> aux_insn_label_as_enum_key I64_le_s
  | Rest_i64_gt_u _ -> aux_insn_label_as_enum_key I64_gt_u
  | Rest_i64_gt_s _ -> aux_insn_label_as_enum_key I64_gt_s
  | Rest_i64_lt_u _ -> aux_insn_label_as_enum_key I64_lt_u
  | Rest_i64_lt_s _ -> aux_insn_label_as_enum_key I64_lt_s
  | Rest_i64_ne _ -> aux_insn_label_as_enum_key I64_ne
  | Rest_i64_eq _ -> aux_insn_label_as_enum_key I64_eq
  | Rest_i64_eqz _ -> aux_insn_label_as_enum_key I64_eqz
  | Rest_i32_ge_u _ -> aux_insn_label_as_enum_key I32_ge_u
  | Rest_i32_ge_s _ -> aux_insn_label_as_enum_key I32_ge_s
  | Rest_i32_le_u _ -> aux_insn_label_as_enum_key I32_le_u
  | Rest_i32_le_s _ -> aux_insn_label_as_enum_key I32_le_s
  | Rest_i32_gt_u _ -> aux_insn_label_as_enum_key I32_gt_u
  | Rest_i32_gt_s _ -> aux_insn_label_as_enum_key I32_gt_s
  | Rest_i32_lt_u _ -> aux_insn_label_as_enum_key I32_lt_u
  | Rest_i32_lt_s _ -> aux_insn_label_as_enum_key I32_lt_s
  | Rest_i32_ne _ -> aux_insn_label_as_enum_key I32_ne
  | Rest_i32_eq _ -> aux_insn_label_as_enum_key I32_eq
  | Rest_i32_eqz _ -> aux_insn_label_as_enum_key I32_eqz
  | Rest_select_ _ -> aux_insn_label_as_enum_key Select_
  | Rest_drop _ -> aux_insn_label_as_enum_key Drop
  | Rest_ret _ -> aux_insn_label_as_enum_key Ret
  | Rest_nop _ -> aux_insn_label_as_enum_key Nop
  | Rest_unreachable _ -> aux_insn_label_as_enum_key Unreachable

inline_for_extraction let instr_case_of_aux_insn_label (x:aux_insn_label) : Type0 =
  match x with
  | Block -> aux_block
  | Loop -> aux_loop
  | If_ -> aux_if
  | Br -> labelidx
  | Br_if -> labelidx
  | Br_table -> aux_br_table
  | Call -> funcidx
  | Call_indirect -> aux_call_indirect
  | Local_get -> localidx
  | Local_set -> localidx
  | Local_tee -> localidx
  | Global_get -> globalidx
  | Global_set -> globalidx
  | I32_load -> memarg
  | I64_load -> memarg
  | F32_load -> memarg
  | F64_load -> memarg
  | I32_load8_s -> memarg
  | I32_load8_u -> memarg
  | I32_load16_s -> memarg
  | I32_load16_u -> memarg
  | I64_load8_s -> memarg
  | I64_load8_u -> memarg
  | I64_load16_s -> memarg
  | I64_load16_u -> memarg
  | I64_load32_s -> memarg
  | I64_load32_u -> memarg
  | I32_store -> memarg
  | I64_store -> memarg
  | F32_store -> memarg
  | F64_store -> memarg
  | I32_store8 -> memarg
  | I32_store16 -> memarg
  | I64_store8 -> memarg
  | I64_store16 -> memarg
  | I64_store32 -> memarg
  | Memory_size -> aux_constbyte0
  | Memory_grow -> aux_constbyte0
  | I32_const -> U32.t
  | I64_const -> U64.t
  | F32_const -> f32
  | F64_const -> f64
  | End_of_contiguous_instructions -> unit
  | F64_reinterpret_i64 -> unit
  | F32_reinterpret_i32 -> unit
  | I64_reinterpret_f64 -> unit
  | I32_reinterpret_f32 -> unit
  | F64_promote_f32 -> unit
  | F64_convert_i64_u -> unit
  | F64_convert_i64_s -> unit
  | F64_convert_i32_u -> unit
  | F64_convert_i32_s -> unit
  | F32_demote_f64 -> unit
  | F32_convert_i64_u -> unit
  | F32_convert_i64_s -> unit
  | F32_convert_i32_u -> unit
  | F32_convert_i32_s -> unit
  | I64_trunc_f64_u -> unit
  | I64_trunc_f64_s -> unit
  | I64_trunc_f32_u -> unit
  | I64_trunc_f32_s -> unit
  | I64_extend_i32_u -> unit
  | I64_extend_i32_s -> unit
  | I32_trunc_f64_u -> unit
  | I32_trunc_f64_s -> unit
  | I32_trunc_f32_u -> unit
  | I32_trunc_f32_s -> unit
  | I32_wrap_i64 -> unit
  | F64_copysign -> unit
  | F64_max -> unit
  | F64_min -> unit
  | F64_div -> unit
  | F64_mul -> unit
  | F64_sub -> unit
  | F64_add -> unit
  | F64_sqrt -> unit
  | F64_nearest -> unit
  | F64_trunc -> unit
  | F64_floor -> unit
  | F64_ceil -> unit
  | F64_neg -> unit
  | F64_abs -> unit
  | F32_copysign -> unit
  | F32_max -> unit
  | F32_min -> unit
  | F32_div -> unit
  | F32_mul -> unit
  | F32_sub -> unit
  | F32_add -> unit
  | F32_sqrt -> unit
  | F32_nearest -> unit
  | F32_trunc -> unit
  | F32_floor -> unit
  | F32_ceil -> unit
  | F32_neg -> unit
  | F32_abs -> unit
  | I64_rotr -> unit
  | I64_rotl -> unit
  | I64_shr_u -> unit
  | I64_shr_s -> unit
  | I64_shl -> unit
  | I64_xor -> unit
  | I64_or -> unit
  | I64_and -> unit
  | I64_rem_u -> unit
  | I64_rem_s -> unit
  | I64_div_u -> unit
  | I64_div_s -> unit
  | I64_mul -> unit
  | I64_sub -> unit
  | I64_add -> unit
  | I64_popcnt -> unit
  | I64_ctz -> unit
  | I64_clz -> unit
  | I32_rotr -> unit
  | I32_rotl -> unit
  | I32_shr_u -> unit
  | I32_shr_s -> unit
  | I32_shl -> unit
  | I32_xor -> unit
  | I32_or -> unit
  | I32_and -> unit
  | I32_rem_u -> unit
  | I32_rem_s -> unit
  | I32_div_u -> unit
  | I32_div_s -> unit
  | I32_mul -> unit
  | I32_sub -> unit
  | I32_add -> unit
  | I32_popcnt -> unit
  | I32_ctz -> unit
  | I32_clz -> unit
  | F64_ge -> unit
  | F64_le -> unit
  | F64_gt -> unit
  | F64_lt -> unit
  | F64_ne -> unit
  | F64_eq -> unit
  | F32_ge -> unit
  | F32_le -> unit
  | F32_gt -> unit
  | F32_lt -> unit
  | F32_ne -> unit
  | F32_eq -> unit
  | I64_ge_u -> unit
  | I64_ge_s -> unit
  | I64_le_u -> unit
  | I64_le_s -> unit
  | I64_gt_u -> unit
  | I64_gt_s -> unit
  | I64_lt_u -> unit
  | I64_lt_s -> unit
  | I64_ne -> unit
  | I64_eq -> unit
  | I64_eqz -> unit
  | I32_ge_u -> unit
  | I32_ge_s -> unit
  | I32_le_u -> unit
  | I32_le_s -> unit
  | I32_gt_u -> unit
  | I32_gt_s -> unit
  | I32_lt_u -> unit
  | I32_lt_s -> unit
  | I32_ne -> unit
  | I32_eq -> unit
  | I32_eqz -> unit
  | Select_ -> unit
  | Drop -> unit
  | Ret -> unit
  | Nop -> unit
  | Unreachable -> unit

unfold inline_for_extraction let to_instr_case_of_aux_insn_label (x:aux_insn_label) (#x':aux_insn_label) (y:instr_case_of_aux_insn_label x')  : Pure (norm [delta_only [(`%instr_case_of_aux_insn_label)]; iota] (instr_case_of_aux_insn_label x))
  (requires (x == x')) (ensures (fun y' -> y' == y)) =
  [@inline_let] let _ = norm_spec [delta_only [(`%instr_case_of_aux_insn_label)] ; iota] (instr_case_of_aux_insn_label x) in y

unfold inline_for_extraction let instr_refine (k:LP.enum_key aux_insn_label_enum) (x:instr)
  : Pure (LP.refine_with_tag key_of_instr k)  (requires norm [delta; iota; zeta] (key_of_instr x) == k) (ensures (fun y -> y == x)) =
  [@inline_let] let _ = norm_spec [delta; iota; zeta] (key_of_instr x) in x

inline_for_extraction let synth_instr_cases (x:LP.enum_key aux_insn_label_enum) (y:instr_case_of_aux_insn_label x)
  : LP.refine_with_tag key_of_instr x =
  match x with
  | Block -> instr_refine x (Rest_block (to_instr_case_of_aux_insn_label Block y))
  | Loop -> instr_refine x (Rest_loop (to_instr_case_of_aux_insn_label Loop y))
  | If_ -> instr_refine x (Rest_if_ (to_instr_case_of_aux_insn_label If_ y))
  | Br -> instr_refine x (Rest_br (to_instr_case_of_aux_insn_label Br y))
  | Br_if -> instr_refine x (Rest_br_if (to_instr_case_of_aux_insn_label Br_if y))
  | Br_table -> instr_refine x (Rest_br_table (to_instr_case_of_aux_insn_label Br_table y))
  | Call -> instr_refine x (Rest_call (to_instr_case_of_aux_insn_label Call y))
  | Call_indirect -> instr_refine x (Rest_call_indirect (to_instr_case_of_aux_insn_label Call_indirect y))
  | Local_get -> instr_refine x (Rest_local_get (to_instr_case_of_aux_insn_label Local_get y))
  | Local_set -> instr_refine x (Rest_local_set (to_instr_case_of_aux_insn_label Local_set y))
  | Local_tee -> instr_refine x (Rest_local_tee (to_instr_case_of_aux_insn_label Local_tee y))
  | Global_get -> instr_refine x (Rest_global_get (to_instr_case_of_aux_insn_label Global_get y))
  | Global_set -> instr_refine x (Rest_global_set (to_instr_case_of_aux_insn_label Global_set y))
  | I32_load -> instr_refine x (Rest_i32_load (to_instr_case_of_aux_insn_label I32_load y))
  | I64_load -> instr_refine x (Rest_i64_load (to_instr_case_of_aux_insn_label I64_load y))
  | F32_load -> instr_refine x (Rest_f32_load (to_instr_case_of_aux_insn_label F32_load y))
  | F64_load -> instr_refine x (Rest_f64_load (to_instr_case_of_aux_insn_label F64_load y))
  | I32_load8_s -> instr_refine x (Rest_i32_load8_s (to_instr_case_of_aux_insn_label I32_load8_s y))
  | I32_load8_u -> instr_refine x (Rest_i32_load8_u (to_instr_case_of_aux_insn_label I32_load8_u y))
  | I32_load16_s -> instr_refine x (Rest_i32_load16_s (to_instr_case_of_aux_insn_label I32_load16_s y))
  | I32_load16_u -> instr_refine x (Rest_i32_load16_u (to_instr_case_of_aux_insn_label I32_load16_u y))
  | I64_load8_s -> instr_refine x (Rest_i64_load8_s (to_instr_case_of_aux_insn_label I64_load8_s y))
  | I64_load8_u -> instr_refine x (Rest_i64_load8_u (to_instr_case_of_aux_insn_label I64_load8_u y))
  | I64_load16_s -> instr_refine x (Rest_i64_load16_s (to_instr_case_of_aux_insn_label I64_load16_s y))
  | I64_load16_u -> instr_refine x (Rest_i64_load16_u (to_instr_case_of_aux_insn_label I64_load16_u y))
  | I64_load32_s -> instr_refine x (Rest_i64_load32_s (to_instr_case_of_aux_insn_label I64_load32_s y))
  | I64_load32_u -> instr_refine x (Rest_i64_load32_u (to_instr_case_of_aux_insn_label I64_load32_u y))
  | I32_store -> instr_refine x (Rest_i32_store (to_instr_case_of_aux_insn_label I32_store y))
  | I64_store -> instr_refine x (Rest_i64_store (to_instr_case_of_aux_insn_label I64_store y))
  | F32_store -> instr_refine x (Rest_f32_store (to_instr_case_of_aux_insn_label F32_store y))
  | F64_store -> instr_refine x (Rest_f64_store (to_instr_case_of_aux_insn_label F64_store y))
  | I32_store8 -> instr_refine x (Rest_i32_store8 (to_instr_case_of_aux_insn_label I32_store8 y))
  | I32_store16 -> instr_refine x (Rest_i32_store16 (to_instr_case_of_aux_insn_label I32_store16 y))
  | I64_store8 -> instr_refine x (Rest_i64_store8 (to_instr_case_of_aux_insn_label I64_store8 y))
  | I64_store16 -> instr_refine x (Rest_i64_store16 (to_instr_case_of_aux_insn_label I64_store16 y))
  | I64_store32 -> instr_refine x (Rest_i64_store32 (to_instr_case_of_aux_insn_label I64_store32 y))
  | Memory_size -> instr_refine x (Rest_memory_size (to_instr_case_of_aux_insn_label Memory_size y))
  | Memory_grow -> instr_refine x (Rest_memory_grow (to_instr_case_of_aux_insn_label Memory_grow y))
  | I32_const -> instr_refine x (Rest_i32_const (to_instr_case_of_aux_insn_label I32_const y))
  | I64_const -> instr_refine x (Rest_i64_const (to_instr_case_of_aux_insn_label I64_const y))
  | F32_const -> instr_refine x (Rest_f32_const (to_instr_case_of_aux_insn_label F32_const y))
  | F64_const -> instr_refine x (Rest_f64_const (to_instr_case_of_aux_insn_label F64_const y))
  | End_of_contiguous_instructions -> instr_refine x (Rest_end_of_contiguous_instructions (to_instr_case_of_aux_insn_label End_of_contiguous_instructions y))
  | F64_reinterpret_i64 -> instr_refine x (Rest_f64_reinterpret_i64 (to_instr_case_of_aux_insn_label F64_reinterpret_i64 y))
  | F32_reinterpret_i32 -> instr_refine x (Rest_f32_reinterpret_i32 (to_instr_case_of_aux_insn_label F32_reinterpret_i32 y))
  | I64_reinterpret_f64 -> instr_refine x (Rest_i64_reinterpret_f64 (to_instr_case_of_aux_insn_label I64_reinterpret_f64 y))
  | I32_reinterpret_f32 -> instr_refine x (Rest_i32_reinterpret_f32 (to_instr_case_of_aux_insn_label I32_reinterpret_f32 y))
  | F64_promote_f32 -> instr_refine x (Rest_f64_promote_f32 (to_instr_case_of_aux_insn_label F64_promote_f32 y))
  | F64_convert_i64_u -> instr_refine x (Rest_f64_convert_i64_u (to_instr_case_of_aux_insn_label F64_convert_i64_u y))
  | F64_convert_i64_s -> instr_refine x (Rest_f64_convert_i64_s (to_instr_case_of_aux_insn_label F64_convert_i64_s y))
  | F64_convert_i32_u -> instr_refine x (Rest_f64_convert_i32_u (to_instr_case_of_aux_insn_label F64_convert_i32_u y))
  | F64_convert_i32_s -> instr_refine x (Rest_f64_convert_i32_s (to_instr_case_of_aux_insn_label F64_convert_i32_s y))
  | F32_demote_f64 -> instr_refine x (Rest_f32_demote_f64 (to_instr_case_of_aux_insn_label F32_demote_f64 y))
  | F32_convert_i64_u -> instr_refine x (Rest_f32_convert_i64_u (to_instr_case_of_aux_insn_label F32_convert_i64_u y))
  | F32_convert_i64_s -> instr_refine x (Rest_f32_convert_i64_s (to_instr_case_of_aux_insn_label F32_convert_i64_s y))
  | F32_convert_i32_u -> instr_refine x (Rest_f32_convert_i32_u (to_instr_case_of_aux_insn_label F32_convert_i32_u y))
  | F32_convert_i32_s -> instr_refine x (Rest_f32_convert_i32_s (to_instr_case_of_aux_insn_label F32_convert_i32_s y))
  | I64_trunc_f64_u -> instr_refine x (Rest_i64_trunc_f64_u (to_instr_case_of_aux_insn_label I64_trunc_f64_u y))
  | I64_trunc_f64_s -> instr_refine x (Rest_i64_trunc_f64_s (to_instr_case_of_aux_insn_label I64_trunc_f64_s y))
  | I64_trunc_f32_u -> instr_refine x (Rest_i64_trunc_f32_u (to_instr_case_of_aux_insn_label I64_trunc_f32_u y))
  | I64_trunc_f32_s -> instr_refine x (Rest_i64_trunc_f32_s (to_instr_case_of_aux_insn_label I64_trunc_f32_s y))
  | I64_extend_i32_u -> instr_refine x (Rest_i64_extend_i32_u (to_instr_case_of_aux_insn_label I64_extend_i32_u y))
  | I64_extend_i32_s -> instr_refine x (Rest_i64_extend_i32_s (to_instr_case_of_aux_insn_label I64_extend_i32_s y))
  | I32_trunc_f64_u -> instr_refine x (Rest_i32_trunc_f64_u (to_instr_case_of_aux_insn_label I32_trunc_f64_u y))
  | I32_trunc_f64_s -> instr_refine x (Rest_i32_trunc_f64_s (to_instr_case_of_aux_insn_label I32_trunc_f64_s y))
  | I32_trunc_f32_u -> instr_refine x (Rest_i32_trunc_f32_u (to_instr_case_of_aux_insn_label I32_trunc_f32_u y))
  | I32_trunc_f32_s -> instr_refine x (Rest_i32_trunc_f32_s (to_instr_case_of_aux_insn_label I32_trunc_f32_s y))
  | I32_wrap_i64 -> instr_refine x (Rest_i32_wrap_i64 (to_instr_case_of_aux_insn_label I32_wrap_i64 y))
  | F64_copysign -> instr_refine x (Rest_f64_copysign (to_instr_case_of_aux_insn_label F64_copysign y))
  | F64_max -> instr_refine x (Rest_f64_max (to_instr_case_of_aux_insn_label F64_max y))
  | F64_min -> instr_refine x (Rest_f64_min (to_instr_case_of_aux_insn_label F64_min y))
  | F64_div -> instr_refine x (Rest_f64_div (to_instr_case_of_aux_insn_label F64_div y))
  | F64_mul -> instr_refine x (Rest_f64_mul (to_instr_case_of_aux_insn_label F64_mul y))
  | F64_sub -> instr_refine x (Rest_f64_sub (to_instr_case_of_aux_insn_label F64_sub y))
  | F64_add -> instr_refine x (Rest_f64_add (to_instr_case_of_aux_insn_label F64_add y))
  | F64_sqrt -> instr_refine x (Rest_f64_sqrt (to_instr_case_of_aux_insn_label F64_sqrt y))
  | F64_nearest -> instr_refine x (Rest_f64_nearest (to_instr_case_of_aux_insn_label F64_nearest y))
  | F64_trunc -> instr_refine x (Rest_f64_trunc (to_instr_case_of_aux_insn_label F64_trunc y))
  | F64_floor -> instr_refine x (Rest_f64_floor (to_instr_case_of_aux_insn_label F64_floor y))
  | F64_ceil -> instr_refine x (Rest_f64_ceil (to_instr_case_of_aux_insn_label F64_ceil y))
  | F64_neg -> instr_refine x (Rest_f64_neg (to_instr_case_of_aux_insn_label F64_neg y))
  | F64_abs -> instr_refine x (Rest_f64_abs (to_instr_case_of_aux_insn_label F64_abs y))
  | F32_copysign -> instr_refine x (Rest_f32_copysign (to_instr_case_of_aux_insn_label F32_copysign y))
  | F32_max -> instr_refine x (Rest_f32_max (to_instr_case_of_aux_insn_label F32_max y))
  | F32_min -> instr_refine x (Rest_f32_min (to_instr_case_of_aux_insn_label F32_min y))
  | F32_div -> instr_refine x (Rest_f32_div (to_instr_case_of_aux_insn_label F32_div y))
  | F32_mul -> instr_refine x (Rest_f32_mul (to_instr_case_of_aux_insn_label F32_mul y))
  | F32_sub -> instr_refine x (Rest_f32_sub (to_instr_case_of_aux_insn_label F32_sub y))
  | F32_add -> instr_refine x (Rest_f32_add (to_instr_case_of_aux_insn_label F32_add y))
  | F32_sqrt -> instr_refine x (Rest_f32_sqrt (to_instr_case_of_aux_insn_label F32_sqrt y))
  | F32_nearest -> instr_refine x (Rest_f32_nearest (to_instr_case_of_aux_insn_label F32_nearest y))
  | F32_trunc -> instr_refine x (Rest_f32_trunc (to_instr_case_of_aux_insn_label F32_trunc y))
  | F32_floor -> instr_refine x (Rest_f32_floor (to_instr_case_of_aux_insn_label F32_floor y))
  | F32_ceil -> instr_refine x (Rest_f32_ceil (to_instr_case_of_aux_insn_label F32_ceil y))
  | F32_neg -> instr_refine x (Rest_f32_neg (to_instr_case_of_aux_insn_label F32_neg y))
  | F32_abs -> instr_refine x (Rest_f32_abs (to_instr_case_of_aux_insn_label F32_abs y))
  | I64_rotr -> instr_refine x (Rest_i64_rotr (to_instr_case_of_aux_insn_label I64_rotr y))
  | I64_rotl -> instr_refine x (Rest_i64_rotl (to_instr_case_of_aux_insn_label I64_rotl y))
  | I64_shr_u -> instr_refine x (Rest_i64_shr_u (to_instr_case_of_aux_insn_label I64_shr_u y))
  | I64_shr_s -> instr_refine x (Rest_i64_shr_s (to_instr_case_of_aux_insn_label I64_shr_s y))
  | I64_shl -> instr_refine x (Rest_i64_shl (to_instr_case_of_aux_insn_label I64_shl y))
  | I64_xor -> instr_refine x (Rest_i64_xor (to_instr_case_of_aux_insn_label I64_xor y))
  | I64_or -> instr_refine x (Rest_i64_or (to_instr_case_of_aux_insn_label I64_or y))
  | I64_and -> instr_refine x (Rest_i64_and (to_instr_case_of_aux_insn_label I64_and y))
  | I64_rem_u -> instr_refine x (Rest_i64_rem_u (to_instr_case_of_aux_insn_label I64_rem_u y))
  | I64_rem_s -> instr_refine x (Rest_i64_rem_s (to_instr_case_of_aux_insn_label I64_rem_s y))
  | I64_div_u -> instr_refine x (Rest_i64_div_u (to_instr_case_of_aux_insn_label I64_div_u y))
  | I64_div_s -> instr_refine x (Rest_i64_div_s (to_instr_case_of_aux_insn_label I64_div_s y))
  | I64_mul -> instr_refine x (Rest_i64_mul (to_instr_case_of_aux_insn_label I64_mul y))
  | I64_sub -> instr_refine x (Rest_i64_sub (to_instr_case_of_aux_insn_label I64_sub y))
  | I64_add -> instr_refine x (Rest_i64_add (to_instr_case_of_aux_insn_label I64_add y))
  | I64_popcnt -> instr_refine x (Rest_i64_popcnt (to_instr_case_of_aux_insn_label I64_popcnt y))
  | I64_ctz -> instr_refine x (Rest_i64_ctz (to_instr_case_of_aux_insn_label I64_ctz y))
  | I64_clz -> instr_refine x (Rest_i64_clz (to_instr_case_of_aux_insn_label I64_clz y))
  | I32_rotr -> instr_refine x (Rest_i32_rotr (to_instr_case_of_aux_insn_label I32_rotr y))
  | I32_rotl -> instr_refine x (Rest_i32_rotl (to_instr_case_of_aux_insn_label I32_rotl y))
  | I32_shr_u -> instr_refine x (Rest_i32_shr_u (to_instr_case_of_aux_insn_label I32_shr_u y))
  | I32_shr_s -> instr_refine x (Rest_i32_shr_s (to_instr_case_of_aux_insn_label I32_shr_s y))
  | I32_shl -> instr_refine x (Rest_i32_shl (to_instr_case_of_aux_insn_label I32_shl y))
  | I32_xor -> instr_refine x (Rest_i32_xor (to_instr_case_of_aux_insn_label I32_xor y))
  | I32_or -> instr_refine x (Rest_i32_or (to_instr_case_of_aux_insn_label I32_or y))
  | I32_and -> instr_refine x (Rest_i32_and (to_instr_case_of_aux_insn_label I32_and y))
  | I32_rem_u -> instr_refine x (Rest_i32_rem_u (to_instr_case_of_aux_insn_label I32_rem_u y))
  | I32_rem_s -> instr_refine x (Rest_i32_rem_s (to_instr_case_of_aux_insn_label I32_rem_s y))
  | I32_div_u -> instr_refine x (Rest_i32_div_u (to_instr_case_of_aux_insn_label I32_div_u y))
  | I32_div_s -> instr_refine x (Rest_i32_div_s (to_instr_case_of_aux_insn_label I32_div_s y))
  | I32_mul -> instr_refine x (Rest_i32_mul (to_instr_case_of_aux_insn_label I32_mul y))
  | I32_sub -> instr_refine x (Rest_i32_sub (to_instr_case_of_aux_insn_label I32_sub y))
  | I32_add -> instr_refine x (Rest_i32_add (to_instr_case_of_aux_insn_label I32_add y))
  | I32_popcnt -> instr_refine x (Rest_i32_popcnt (to_instr_case_of_aux_insn_label I32_popcnt y))
  | I32_ctz -> instr_refine x (Rest_i32_ctz (to_instr_case_of_aux_insn_label I32_ctz y))
  | I32_clz -> instr_refine x (Rest_i32_clz (to_instr_case_of_aux_insn_label I32_clz y))
  | F64_ge -> instr_refine x (Rest_f64_ge (to_instr_case_of_aux_insn_label F64_ge y))
  | F64_le -> instr_refine x (Rest_f64_le (to_instr_case_of_aux_insn_label F64_le y))
  | F64_gt -> instr_refine x (Rest_f64_gt (to_instr_case_of_aux_insn_label F64_gt y))
  | F64_lt -> instr_refine x (Rest_f64_lt (to_instr_case_of_aux_insn_label F64_lt y))
  | F64_ne -> instr_refine x (Rest_f64_ne (to_instr_case_of_aux_insn_label F64_ne y))
  | F64_eq -> instr_refine x (Rest_f64_eq (to_instr_case_of_aux_insn_label F64_eq y))
  | F32_ge -> instr_refine x (Rest_f32_ge (to_instr_case_of_aux_insn_label F32_ge y))
  | F32_le -> instr_refine x (Rest_f32_le (to_instr_case_of_aux_insn_label F32_le y))
  | F32_gt -> instr_refine x (Rest_f32_gt (to_instr_case_of_aux_insn_label F32_gt y))
  | F32_lt -> instr_refine x (Rest_f32_lt (to_instr_case_of_aux_insn_label F32_lt y))
  | F32_ne -> instr_refine x (Rest_f32_ne (to_instr_case_of_aux_insn_label F32_ne y))
  | F32_eq -> instr_refine x (Rest_f32_eq (to_instr_case_of_aux_insn_label F32_eq y))
  | I64_ge_u -> instr_refine x (Rest_i64_ge_u (to_instr_case_of_aux_insn_label I64_ge_u y))
  | I64_ge_s -> instr_refine x (Rest_i64_ge_s (to_instr_case_of_aux_insn_label I64_ge_s y))
  | I64_le_u -> instr_refine x (Rest_i64_le_u (to_instr_case_of_aux_insn_label I64_le_u y))
  | I64_le_s -> instr_refine x (Rest_i64_le_s (to_instr_case_of_aux_insn_label I64_le_s y))
  | I64_gt_u -> instr_refine x (Rest_i64_gt_u (to_instr_case_of_aux_insn_label I64_gt_u y))
  | I64_gt_s -> instr_refine x (Rest_i64_gt_s (to_instr_case_of_aux_insn_label I64_gt_s y))
  | I64_lt_u -> instr_refine x (Rest_i64_lt_u (to_instr_case_of_aux_insn_label I64_lt_u y))
  | I64_lt_s -> instr_refine x (Rest_i64_lt_s (to_instr_case_of_aux_insn_label I64_lt_s y))
  | I64_ne -> instr_refine x (Rest_i64_ne (to_instr_case_of_aux_insn_label I64_ne y))
  | I64_eq -> instr_refine x (Rest_i64_eq (to_instr_case_of_aux_insn_label I64_eq y))
  | I64_eqz -> instr_refine x (Rest_i64_eqz (to_instr_case_of_aux_insn_label I64_eqz y))
  | I32_ge_u -> instr_refine x (Rest_i32_ge_u (to_instr_case_of_aux_insn_label I32_ge_u y))
  | I32_ge_s -> instr_refine x (Rest_i32_ge_s (to_instr_case_of_aux_insn_label I32_ge_s y))
  | I32_le_u -> instr_refine x (Rest_i32_le_u (to_instr_case_of_aux_insn_label I32_le_u y))
  | I32_le_s -> instr_refine x (Rest_i32_le_s (to_instr_case_of_aux_insn_label I32_le_s y))
  | I32_gt_u -> instr_refine x (Rest_i32_gt_u (to_instr_case_of_aux_insn_label I32_gt_u y))
  | I32_gt_s -> instr_refine x (Rest_i32_gt_s (to_instr_case_of_aux_insn_label I32_gt_s y))
  | I32_lt_u -> instr_refine x (Rest_i32_lt_u (to_instr_case_of_aux_insn_label I32_lt_u y))
  | I32_lt_s -> instr_refine x (Rest_i32_lt_s (to_instr_case_of_aux_insn_label I32_lt_s y))
  | I32_ne -> instr_refine x (Rest_i32_ne (to_instr_case_of_aux_insn_label I32_ne y))
  | I32_eq -> instr_refine x (Rest_i32_eq (to_instr_case_of_aux_insn_label I32_eq y))
  | I32_eqz -> instr_refine x (Rest_i32_eqz (to_instr_case_of_aux_insn_label I32_eqz y))
  | Select_ -> instr_refine x (Rest_select_ (to_instr_case_of_aux_insn_label Select_ y))
  | Drop -> instr_refine x (Rest_drop (to_instr_case_of_aux_insn_label Drop y))
  | Ret -> instr_refine x (Rest_ret (to_instr_case_of_aux_insn_label Ret y))
  | Nop -> instr_refine x (Rest_nop (to_instr_case_of_aux_insn_label Nop y))
  | Unreachable -> instr_refine x (Rest_unreachable (to_instr_case_of_aux_insn_label Unreachable y))

unfold inline_for_extraction let from_instr_case_of_aux_insn_label (#x':aux_insn_label) (x:aux_insn_label)
  (y: norm [delta_only [(`%instr_case_of_aux_insn_label)]; iota] (instr_case_of_aux_insn_label x))
  : Pure (instr_case_of_aux_insn_label x') (requires (x == x')) (ensures (fun y' -> y' == y)) =
  [@inline_let] let _ = norm_spec [delta_only [(`%instr_case_of_aux_insn_label)] ; iota] (instr_case_of_aux_insn_label x) in y

let synth_instr_cases_recip_pre (k:LP.enum_key aux_insn_label_enum)
  (x:LP.refine_with_tag key_of_instr k) : GTot bool =
  match k with
  | Block -> Rest_block? x
  | Loop -> Rest_loop? x
  | If_ -> Rest_if_? x
  | Br -> Rest_br? x
  | Br_if -> Rest_br_if? x
  | Br_table -> Rest_br_table? x
  | Call -> Rest_call? x
  | Call_indirect -> Rest_call_indirect? x
  | Local_get -> Rest_local_get? x
  | Local_set -> Rest_local_set? x
  | Local_tee -> Rest_local_tee? x
  | Global_get -> Rest_global_get? x
  | Global_set -> Rest_global_set? x
  | I32_load -> Rest_i32_load? x
  | I64_load -> Rest_i64_load? x
  | F32_load -> Rest_f32_load? x
  | F64_load -> Rest_f64_load? x
  | I32_load8_s -> Rest_i32_load8_s? x
  | I32_load8_u -> Rest_i32_load8_u? x
  | I32_load16_s -> Rest_i32_load16_s? x
  | I32_load16_u -> Rest_i32_load16_u? x
  | I64_load8_s -> Rest_i64_load8_s? x
  | I64_load8_u -> Rest_i64_load8_u? x
  | I64_load16_s -> Rest_i64_load16_s? x
  | I64_load16_u -> Rest_i64_load16_u? x
  | I64_load32_s -> Rest_i64_load32_s? x
  | I64_load32_u -> Rest_i64_load32_u? x
  | I32_store -> Rest_i32_store? x
  | I64_store -> Rest_i64_store? x
  | F32_store -> Rest_f32_store? x
  | F64_store -> Rest_f64_store? x
  | I32_store8 -> Rest_i32_store8? x
  | I32_store16 -> Rest_i32_store16? x
  | I64_store8 -> Rest_i64_store8? x
  | I64_store16 -> Rest_i64_store16? x
  | I64_store32 -> Rest_i64_store32? x
  | Memory_size -> Rest_memory_size? x
  | Memory_grow -> Rest_memory_grow? x
  | I32_const -> Rest_i32_const? x
  | I64_const -> Rest_i64_const? x
  | F32_const -> Rest_f32_const? x
  | F64_const -> Rest_f64_const? x
  | End_of_contiguous_instructions -> Rest_end_of_contiguous_instructions? x
  | F64_reinterpret_i64 -> Rest_f64_reinterpret_i64? x
  | F32_reinterpret_i32 -> Rest_f32_reinterpret_i32? x
  | I64_reinterpret_f64 -> Rest_i64_reinterpret_f64? x
  | I32_reinterpret_f32 -> Rest_i32_reinterpret_f32? x
  | F64_promote_f32 -> Rest_f64_promote_f32? x
  | F64_convert_i64_u -> Rest_f64_convert_i64_u? x
  | F64_convert_i64_s -> Rest_f64_convert_i64_s? x
  | F64_convert_i32_u -> Rest_f64_convert_i32_u? x
  | F64_convert_i32_s -> Rest_f64_convert_i32_s? x
  | F32_demote_f64 -> Rest_f32_demote_f64? x
  | F32_convert_i64_u -> Rest_f32_convert_i64_u? x
  | F32_convert_i64_s -> Rest_f32_convert_i64_s? x
  | F32_convert_i32_u -> Rest_f32_convert_i32_u? x
  | F32_convert_i32_s -> Rest_f32_convert_i32_s? x
  | I64_trunc_f64_u -> Rest_i64_trunc_f64_u? x
  | I64_trunc_f64_s -> Rest_i64_trunc_f64_s? x
  | I64_trunc_f32_u -> Rest_i64_trunc_f32_u? x
  | I64_trunc_f32_s -> Rest_i64_trunc_f32_s? x
  | I64_extend_i32_u -> Rest_i64_extend_i32_u? x
  | I64_extend_i32_s -> Rest_i64_extend_i32_s? x
  | I32_trunc_f64_u -> Rest_i32_trunc_f64_u? x
  | I32_trunc_f64_s -> Rest_i32_trunc_f64_s? x
  | I32_trunc_f32_u -> Rest_i32_trunc_f32_u? x
  | I32_trunc_f32_s -> Rest_i32_trunc_f32_s? x
  | I32_wrap_i64 -> Rest_i32_wrap_i64? x
  | F64_copysign -> Rest_f64_copysign? x
  | F64_max -> Rest_f64_max? x
  | F64_min -> Rest_f64_min? x
  | F64_div -> Rest_f64_div? x
  | F64_mul -> Rest_f64_mul? x
  | F64_sub -> Rest_f64_sub? x
  | F64_add -> Rest_f64_add? x
  | F64_sqrt -> Rest_f64_sqrt? x
  | F64_nearest -> Rest_f64_nearest? x
  | F64_trunc -> Rest_f64_trunc? x
  | F64_floor -> Rest_f64_floor? x
  | F64_ceil -> Rest_f64_ceil? x
  | F64_neg -> Rest_f64_neg? x
  | F64_abs -> Rest_f64_abs? x
  | F32_copysign -> Rest_f32_copysign? x
  | F32_max -> Rest_f32_max? x
  | F32_min -> Rest_f32_min? x
  | F32_div -> Rest_f32_div? x
  | F32_mul -> Rest_f32_mul? x
  | F32_sub -> Rest_f32_sub? x
  | F32_add -> Rest_f32_add? x
  | F32_sqrt -> Rest_f32_sqrt? x
  | F32_nearest -> Rest_f32_nearest? x
  | F32_trunc -> Rest_f32_trunc? x
  | F32_floor -> Rest_f32_floor? x
  | F32_ceil -> Rest_f32_ceil? x
  | F32_neg -> Rest_f32_neg? x
  | F32_abs -> Rest_f32_abs? x
  | I64_rotr -> Rest_i64_rotr? x
  | I64_rotl -> Rest_i64_rotl? x
  | I64_shr_u -> Rest_i64_shr_u? x
  | I64_shr_s -> Rest_i64_shr_s? x
  | I64_shl -> Rest_i64_shl? x
  | I64_xor -> Rest_i64_xor? x
  | I64_or -> Rest_i64_or? x
  | I64_and -> Rest_i64_and? x
  | I64_rem_u -> Rest_i64_rem_u? x
  | I64_rem_s -> Rest_i64_rem_s? x
  | I64_div_u -> Rest_i64_div_u? x
  | I64_div_s -> Rest_i64_div_s? x
  | I64_mul -> Rest_i64_mul? x
  | I64_sub -> Rest_i64_sub? x
  | I64_add -> Rest_i64_add? x
  | I64_popcnt -> Rest_i64_popcnt? x
  | I64_ctz -> Rest_i64_ctz? x
  | I64_clz -> Rest_i64_clz? x
  | I32_rotr -> Rest_i32_rotr? x
  | I32_rotl -> Rest_i32_rotl? x
  | I32_shr_u -> Rest_i32_shr_u? x
  | I32_shr_s -> Rest_i32_shr_s? x
  | I32_shl -> Rest_i32_shl? x
  | I32_xor -> Rest_i32_xor? x
  | I32_or -> Rest_i32_or? x
  | I32_and -> Rest_i32_and? x
  | I32_rem_u -> Rest_i32_rem_u? x
  | I32_rem_s -> Rest_i32_rem_s? x
  | I32_div_u -> Rest_i32_div_u? x
  | I32_div_s -> Rest_i32_div_s? x
  | I32_mul -> Rest_i32_mul? x
  | I32_sub -> Rest_i32_sub? x
  | I32_add -> Rest_i32_add? x
  | I32_popcnt -> Rest_i32_popcnt? x
  | I32_ctz -> Rest_i32_ctz? x
  | I32_clz -> Rest_i32_clz? x
  | F64_ge -> Rest_f64_ge? x
  | F64_le -> Rest_f64_le? x
  | F64_gt -> Rest_f64_gt? x
  | F64_lt -> Rest_f64_lt? x
  | F64_ne -> Rest_f64_ne? x
  | F64_eq -> Rest_f64_eq? x
  | F32_ge -> Rest_f32_ge? x
  | F32_le -> Rest_f32_le? x
  | F32_gt -> Rest_f32_gt? x
  | F32_lt -> Rest_f32_lt? x
  | F32_ne -> Rest_f32_ne? x
  | F32_eq -> Rest_f32_eq? x
  | I64_ge_u -> Rest_i64_ge_u? x
  | I64_ge_s -> Rest_i64_ge_s? x
  | I64_le_u -> Rest_i64_le_u? x
  | I64_le_s -> Rest_i64_le_s? x
  | I64_gt_u -> Rest_i64_gt_u? x
  | I64_gt_s -> Rest_i64_gt_s? x
  | I64_lt_u -> Rest_i64_lt_u? x
  | I64_lt_s -> Rest_i64_lt_s? x
  | I64_ne -> Rest_i64_ne? x
  | I64_eq -> Rest_i64_eq? x
  | I64_eqz -> Rest_i64_eqz? x
  | I32_ge_u -> Rest_i32_ge_u? x
  | I32_ge_s -> Rest_i32_ge_s? x
  | I32_le_u -> Rest_i32_le_u? x
  | I32_le_s -> Rest_i32_le_s? x
  | I32_gt_u -> Rest_i32_gt_u? x
  | I32_gt_s -> Rest_i32_gt_s? x
  | I32_lt_u -> Rest_i32_lt_u? x
  | I32_lt_s -> Rest_i32_lt_s? x
  | I32_ne -> Rest_i32_ne? x
  | I32_eq -> Rest_i32_eq? x
  | I32_eqz -> Rest_i32_eqz? x
  | Select_ -> Rest_select_? x
  | Drop -> Rest_drop? x
  | Ret -> Rest_ret? x
  | Nop -> Rest_nop? x
  | Unreachable -> Rest_unreachable? x

let synth_instr_cases_recip_pre_intro (k:LP.enum_key aux_insn_label_enum) (x:LP.refine_with_tag key_of_instr k)
  : Lemma (synth_instr_cases_recip_pre k x == true) =
  norm_spec [delta; iota] (synth_instr_cases_recip_pre k x)

inline_for_extraction let synth_instr_cases_recip (k:LP.enum_key aux_insn_label_enum)
  (x:LP.refine_with_tag key_of_instr k) : (instr_case_of_aux_insn_label k) =
  match k with
  | Block -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro Block x in
    (match x with Rest_block y -> (from_instr_case_of_aux_insn_label Block y))
  | Loop -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro Loop x in
    (match x with Rest_loop y -> (from_instr_case_of_aux_insn_label Loop y))
  | If_ -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro If_ x in
    (match x with Rest_if_ y -> (from_instr_case_of_aux_insn_label If_ y))
  | Br -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro Br x in
    (match x with Rest_br y -> (from_instr_case_of_aux_insn_label Br y))
  | Br_if -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro Br_if x in
    (match x with Rest_br_if y -> (from_instr_case_of_aux_insn_label Br_if y))
  | Br_table -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro Br_table x in
    (match x with Rest_br_table y -> (from_instr_case_of_aux_insn_label Br_table y))
  | Call -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro Call x in
    (match x with Rest_call y -> (from_instr_case_of_aux_insn_label Call y))
  | Call_indirect -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro Call_indirect x in
    (match x with Rest_call_indirect y -> (from_instr_case_of_aux_insn_label Call_indirect y))
  | Local_get -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro Local_get x in
    (match x with Rest_local_get y -> (from_instr_case_of_aux_insn_label Local_get y))
  | Local_set -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro Local_set x in
    (match x with Rest_local_set y -> (from_instr_case_of_aux_insn_label Local_set y))
  | Local_tee -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro Local_tee x in
    (match x with Rest_local_tee y -> (from_instr_case_of_aux_insn_label Local_tee y))
  | Global_get -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro Global_get x in
    (match x with Rest_global_get y -> (from_instr_case_of_aux_insn_label Global_get y))
  | Global_set -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro Global_set x in
    (match x with Rest_global_set y -> (from_instr_case_of_aux_insn_label Global_set y))
  | I32_load -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I32_load x in
    (match x with Rest_i32_load y -> (from_instr_case_of_aux_insn_label I32_load y))
  | I64_load -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I64_load x in
    (match x with Rest_i64_load y -> (from_instr_case_of_aux_insn_label I64_load y))
  | F32_load -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro F32_load x in
    (match x with Rest_f32_load y -> (from_instr_case_of_aux_insn_label F32_load y))
  | F64_load -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro F64_load x in
    (match x with Rest_f64_load y -> (from_instr_case_of_aux_insn_label F64_load y))
  | I32_load8_s -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I32_load8_s x in
    (match x with Rest_i32_load8_s y -> (from_instr_case_of_aux_insn_label I32_load8_s y))
  | I32_load8_u -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I32_load8_u x in
    (match x with Rest_i32_load8_u y -> (from_instr_case_of_aux_insn_label I32_load8_u y))
  | I32_load16_s -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I32_load16_s x in
    (match x with Rest_i32_load16_s y -> (from_instr_case_of_aux_insn_label I32_load16_s y))
  | I32_load16_u -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I32_load16_u x in
    (match x with Rest_i32_load16_u y -> (from_instr_case_of_aux_insn_label I32_load16_u y))
  | I64_load8_s -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I64_load8_s x in
    (match x with Rest_i64_load8_s y -> (from_instr_case_of_aux_insn_label I64_load8_s y))
  | I64_load8_u -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I64_load8_u x in
    (match x with Rest_i64_load8_u y -> (from_instr_case_of_aux_insn_label I64_load8_u y))
  | I64_load16_s -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I64_load16_s x in
    (match x with Rest_i64_load16_s y -> (from_instr_case_of_aux_insn_label I64_load16_s y))
  | I64_load16_u -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I64_load16_u x in
    (match x with Rest_i64_load16_u y -> (from_instr_case_of_aux_insn_label I64_load16_u y))
  | I64_load32_s -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I64_load32_s x in
    (match x with Rest_i64_load32_s y -> (from_instr_case_of_aux_insn_label I64_load32_s y))
  | I64_load32_u -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I64_load32_u x in
    (match x with Rest_i64_load32_u y -> (from_instr_case_of_aux_insn_label I64_load32_u y))
  | I32_store -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I32_store x in
    (match x with Rest_i32_store y -> (from_instr_case_of_aux_insn_label I32_store y))
  | I64_store -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I64_store x in
    (match x with Rest_i64_store y -> (from_instr_case_of_aux_insn_label I64_store y))
  | F32_store -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro F32_store x in
    (match x with Rest_f32_store y -> (from_instr_case_of_aux_insn_label F32_store y))
  | F64_store -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro F64_store x in
    (match x with Rest_f64_store y -> (from_instr_case_of_aux_insn_label F64_store y))
  | I32_store8 -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I32_store8 x in
    (match x with Rest_i32_store8 y -> (from_instr_case_of_aux_insn_label I32_store8 y))
  | I32_store16 -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I32_store16 x in
    (match x with Rest_i32_store16 y -> (from_instr_case_of_aux_insn_label I32_store16 y))
  | I64_store8 -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I64_store8 x in
    (match x with Rest_i64_store8 y -> (from_instr_case_of_aux_insn_label I64_store8 y))
  | I64_store16 -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I64_store16 x in
    (match x with Rest_i64_store16 y -> (from_instr_case_of_aux_insn_label I64_store16 y))
  | I64_store32 -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I64_store32 x in
    (match x with Rest_i64_store32 y -> (from_instr_case_of_aux_insn_label I64_store32 y))
  | Memory_size -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro Memory_size x in
    (match x with Rest_memory_size y -> (from_instr_case_of_aux_insn_label Memory_size y))
  | Memory_grow -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro Memory_grow x in
    (match x with Rest_memory_grow y -> (from_instr_case_of_aux_insn_label Memory_grow y))
  | I32_const -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I32_const x in
    (match x with Rest_i32_const y -> (from_instr_case_of_aux_insn_label I32_const y))
  | I64_const -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I64_const x in
    (match x with Rest_i64_const y -> (from_instr_case_of_aux_insn_label I64_const y))
  | F32_const -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro F32_const x in
    (match x with Rest_f32_const y -> (from_instr_case_of_aux_insn_label F32_const y))
  | F64_const -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro F64_const x in
    (match x with Rest_f64_const y -> (from_instr_case_of_aux_insn_label F64_const y))
  | End_of_contiguous_instructions -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro End_of_contiguous_instructions x in
    (match x with Rest_end_of_contiguous_instructions y -> (from_instr_case_of_aux_insn_label End_of_contiguous_instructions y))
  | F64_reinterpret_i64 -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro F64_reinterpret_i64 x in
    (match x with Rest_f64_reinterpret_i64 y -> (from_instr_case_of_aux_insn_label F64_reinterpret_i64 y))
  | F32_reinterpret_i32 -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro F32_reinterpret_i32 x in
    (match x with Rest_f32_reinterpret_i32 y -> (from_instr_case_of_aux_insn_label F32_reinterpret_i32 y))
  | I64_reinterpret_f64 -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I64_reinterpret_f64 x in
    (match x with Rest_i64_reinterpret_f64 y -> (from_instr_case_of_aux_insn_label I64_reinterpret_f64 y))
  | I32_reinterpret_f32 -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I32_reinterpret_f32 x in
    (match x with Rest_i32_reinterpret_f32 y -> (from_instr_case_of_aux_insn_label I32_reinterpret_f32 y))
  | F64_promote_f32 -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro F64_promote_f32 x in
    (match x with Rest_f64_promote_f32 y -> (from_instr_case_of_aux_insn_label F64_promote_f32 y))
  | F64_convert_i64_u -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro F64_convert_i64_u x in
    (match x with Rest_f64_convert_i64_u y -> (from_instr_case_of_aux_insn_label F64_convert_i64_u y))
  | F64_convert_i64_s -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro F64_convert_i64_s x in
    (match x with Rest_f64_convert_i64_s y -> (from_instr_case_of_aux_insn_label F64_convert_i64_s y))
  | F64_convert_i32_u -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro F64_convert_i32_u x in
    (match x with Rest_f64_convert_i32_u y -> (from_instr_case_of_aux_insn_label F64_convert_i32_u y))
  | F64_convert_i32_s -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro F64_convert_i32_s x in
    (match x with Rest_f64_convert_i32_s y -> (from_instr_case_of_aux_insn_label F64_convert_i32_s y))
  | F32_demote_f64 -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro F32_demote_f64 x in
    (match x with Rest_f32_demote_f64 y -> (from_instr_case_of_aux_insn_label F32_demote_f64 y))
  | F32_convert_i64_u -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro F32_convert_i64_u x in
    (match x with Rest_f32_convert_i64_u y -> (from_instr_case_of_aux_insn_label F32_convert_i64_u y))
  | F32_convert_i64_s -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro F32_convert_i64_s x in
    (match x with Rest_f32_convert_i64_s y -> (from_instr_case_of_aux_insn_label F32_convert_i64_s y))
  | F32_convert_i32_u -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro F32_convert_i32_u x in
    (match x with Rest_f32_convert_i32_u y -> (from_instr_case_of_aux_insn_label F32_convert_i32_u y))
  | F32_convert_i32_s -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro F32_convert_i32_s x in
    (match x with Rest_f32_convert_i32_s y -> (from_instr_case_of_aux_insn_label F32_convert_i32_s y))
  | I64_trunc_f64_u -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I64_trunc_f64_u x in
    (match x with Rest_i64_trunc_f64_u y -> (from_instr_case_of_aux_insn_label I64_trunc_f64_u y))
  | I64_trunc_f64_s -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I64_trunc_f64_s x in
    (match x with Rest_i64_trunc_f64_s y -> (from_instr_case_of_aux_insn_label I64_trunc_f64_s y))
  | I64_trunc_f32_u -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I64_trunc_f32_u x in
    (match x with Rest_i64_trunc_f32_u y -> (from_instr_case_of_aux_insn_label I64_trunc_f32_u y))
  | I64_trunc_f32_s -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I64_trunc_f32_s x in
    (match x with Rest_i64_trunc_f32_s y -> (from_instr_case_of_aux_insn_label I64_trunc_f32_s y))
  | I64_extend_i32_u -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I64_extend_i32_u x in
    (match x with Rest_i64_extend_i32_u y -> (from_instr_case_of_aux_insn_label I64_extend_i32_u y))
  | I64_extend_i32_s -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I64_extend_i32_s x in
    (match x with Rest_i64_extend_i32_s y -> (from_instr_case_of_aux_insn_label I64_extend_i32_s y))
  | I32_trunc_f64_u -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I32_trunc_f64_u x in
    (match x with Rest_i32_trunc_f64_u y -> (from_instr_case_of_aux_insn_label I32_trunc_f64_u y))
  | I32_trunc_f64_s -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I32_trunc_f64_s x in
    (match x with Rest_i32_trunc_f64_s y -> (from_instr_case_of_aux_insn_label I32_trunc_f64_s y))
  | I32_trunc_f32_u -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I32_trunc_f32_u x in
    (match x with Rest_i32_trunc_f32_u y -> (from_instr_case_of_aux_insn_label I32_trunc_f32_u y))
  | I32_trunc_f32_s -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I32_trunc_f32_s x in
    (match x with Rest_i32_trunc_f32_s y -> (from_instr_case_of_aux_insn_label I32_trunc_f32_s y))
  | I32_wrap_i64 -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I32_wrap_i64 x in
    (match x with Rest_i32_wrap_i64 y -> (from_instr_case_of_aux_insn_label I32_wrap_i64 y))
  | F64_copysign -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro F64_copysign x in
    (match x with Rest_f64_copysign y -> (from_instr_case_of_aux_insn_label F64_copysign y))
  | F64_max -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro F64_max x in
    (match x with Rest_f64_max y -> (from_instr_case_of_aux_insn_label F64_max y))
  | F64_min -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro F64_min x in
    (match x with Rest_f64_min y -> (from_instr_case_of_aux_insn_label F64_min y))
  | F64_div -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro F64_div x in
    (match x with Rest_f64_div y -> (from_instr_case_of_aux_insn_label F64_div y))
  | F64_mul -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro F64_mul x in
    (match x with Rest_f64_mul y -> (from_instr_case_of_aux_insn_label F64_mul y))
  | F64_sub -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro F64_sub x in
    (match x with Rest_f64_sub y -> (from_instr_case_of_aux_insn_label F64_sub y))
  | F64_add -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro F64_add x in
    (match x with Rest_f64_add y -> (from_instr_case_of_aux_insn_label F64_add y))
  | F64_sqrt -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro F64_sqrt x in
    (match x with Rest_f64_sqrt y -> (from_instr_case_of_aux_insn_label F64_sqrt y))
  | F64_nearest -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro F64_nearest x in
    (match x with Rest_f64_nearest y -> (from_instr_case_of_aux_insn_label F64_nearest y))
  | F64_trunc -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro F64_trunc x in
    (match x with Rest_f64_trunc y -> (from_instr_case_of_aux_insn_label F64_trunc y))
  | F64_floor -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro F64_floor x in
    (match x with Rest_f64_floor y -> (from_instr_case_of_aux_insn_label F64_floor y))
  | F64_ceil -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro F64_ceil x in
    (match x with Rest_f64_ceil y -> (from_instr_case_of_aux_insn_label F64_ceil y))
  | F64_neg -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro F64_neg x in
    (match x with Rest_f64_neg y -> (from_instr_case_of_aux_insn_label F64_neg y))
  | F64_abs -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro F64_abs x in
    (match x with Rest_f64_abs y -> (from_instr_case_of_aux_insn_label F64_abs y))
  | F32_copysign -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro F32_copysign x in
    (match x with Rest_f32_copysign y -> (from_instr_case_of_aux_insn_label F32_copysign y))
  | F32_max -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro F32_max x in
    (match x with Rest_f32_max y -> (from_instr_case_of_aux_insn_label F32_max y))
  | F32_min -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro F32_min x in
    (match x with Rest_f32_min y -> (from_instr_case_of_aux_insn_label F32_min y))
  | F32_div -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro F32_div x in
    (match x with Rest_f32_div y -> (from_instr_case_of_aux_insn_label F32_div y))
  | F32_mul -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro F32_mul x in
    (match x with Rest_f32_mul y -> (from_instr_case_of_aux_insn_label F32_mul y))
  | F32_sub -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro F32_sub x in
    (match x with Rest_f32_sub y -> (from_instr_case_of_aux_insn_label F32_sub y))
  | F32_add -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro F32_add x in
    (match x with Rest_f32_add y -> (from_instr_case_of_aux_insn_label F32_add y))
  | F32_sqrt -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro F32_sqrt x in
    (match x with Rest_f32_sqrt y -> (from_instr_case_of_aux_insn_label F32_sqrt y))
  | F32_nearest -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro F32_nearest x in
    (match x with Rest_f32_nearest y -> (from_instr_case_of_aux_insn_label F32_nearest y))
  | F32_trunc -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro F32_trunc x in
    (match x with Rest_f32_trunc y -> (from_instr_case_of_aux_insn_label F32_trunc y))
  | F32_floor -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro F32_floor x in
    (match x with Rest_f32_floor y -> (from_instr_case_of_aux_insn_label F32_floor y))
  | F32_ceil -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro F32_ceil x in
    (match x with Rest_f32_ceil y -> (from_instr_case_of_aux_insn_label F32_ceil y))
  | F32_neg -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro F32_neg x in
    (match x with Rest_f32_neg y -> (from_instr_case_of_aux_insn_label F32_neg y))
  | F32_abs -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro F32_abs x in
    (match x with Rest_f32_abs y -> (from_instr_case_of_aux_insn_label F32_abs y))
  | I64_rotr -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I64_rotr x in
    (match x with Rest_i64_rotr y -> (from_instr_case_of_aux_insn_label I64_rotr y))
  | I64_rotl -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I64_rotl x in
    (match x with Rest_i64_rotl y -> (from_instr_case_of_aux_insn_label I64_rotl y))
  | I64_shr_u -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I64_shr_u x in
    (match x with Rest_i64_shr_u y -> (from_instr_case_of_aux_insn_label I64_shr_u y))
  | I64_shr_s -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I64_shr_s x in
    (match x with Rest_i64_shr_s y -> (from_instr_case_of_aux_insn_label I64_shr_s y))
  | I64_shl -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I64_shl x in
    (match x with Rest_i64_shl y -> (from_instr_case_of_aux_insn_label I64_shl y))
  | I64_xor -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I64_xor x in
    (match x with Rest_i64_xor y -> (from_instr_case_of_aux_insn_label I64_xor y))
  | I64_or -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I64_or x in
    (match x with Rest_i64_or y -> (from_instr_case_of_aux_insn_label I64_or y))
  | I64_and -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I64_and x in
    (match x with Rest_i64_and y -> (from_instr_case_of_aux_insn_label I64_and y))
  | I64_rem_u -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I64_rem_u x in
    (match x with Rest_i64_rem_u y -> (from_instr_case_of_aux_insn_label I64_rem_u y))
  | I64_rem_s -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I64_rem_s x in
    (match x with Rest_i64_rem_s y -> (from_instr_case_of_aux_insn_label I64_rem_s y))
  | I64_div_u -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I64_div_u x in
    (match x with Rest_i64_div_u y -> (from_instr_case_of_aux_insn_label I64_div_u y))
  | I64_div_s -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I64_div_s x in
    (match x with Rest_i64_div_s y -> (from_instr_case_of_aux_insn_label I64_div_s y))
  | I64_mul -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I64_mul x in
    (match x with Rest_i64_mul y -> (from_instr_case_of_aux_insn_label I64_mul y))
  | I64_sub -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I64_sub x in
    (match x with Rest_i64_sub y -> (from_instr_case_of_aux_insn_label I64_sub y))
  | I64_add -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I64_add x in
    (match x with Rest_i64_add y -> (from_instr_case_of_aux_insn_label I64_add y))
  | I64_popcnt -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I64_popcnt x in
    (match x with Rest_i64_popcnt y -> (from_instr_case_of_aux_insn_label I64_popcnt y))
  | I64_ctz -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I64_ctz x in
    (match x with Rest_i64_ctz y -> (from_instr_case_of_aux_insn_label I64_ctz y))
  | I64_clz -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I64_clz x in
    (match x with Rest_i64_clz y -> (from_instr_case_of_aux_insn_label I64_clz y))
  | I32_rotr -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I32_rotr x in
    (match x with Rest_i32_rotr y -> (from_instr_case_of_aux_insn_label I32_rotr y))
  | I32_rotl -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I32_rotl x in
    (match x with Rest_i32_rotl y -> (from_instr_case_of_aux_insn_label I32_rotl y))
  | I32_shr_u -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I32_shr_u x in
    (match x with Rest_i32_shr_u y -> (from_instr_case_of_aux_insn_label I32_shr_u y))
  | I32_shr_s -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I32_shr_s x in
    (match x with Rest_i32_shr_s y -> (from_instr_case_of_aux_insn_label I32_shr_s y))
  | I32_shl -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I32_shl x in
    (match x with Rest_i32_shl y -> (from_instr_case_of_aux_insn_label I32_shl y))
  | I32_xor -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I32_xor x in
    (match x with Rest_i32_xor y -> (from_instr_case_of_aux_insn_label I32_xor y))
  | I32_or -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I32_or x in
    (match x with Rest_i32_or y -> (from_instr_case_of_aux_insn_label I32_or y))
  | I32_and -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I32_and x in
    (match x with Rest_i32_and y -> (from_instr_case_of_aux_insn_label I32_and y))
  | I32_rem_u -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I32_rem_u x in
    (match x with Rest_i32_rem_u y -> (from_instr_case_of_aux_insn_label I32_rem_u y))
  | I32_rem_s -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I32_rem_s x in
    (match x with Rest_i32_rem_s y -> (from_instr_case_of_aux_insn_label I32_rem_s y))
  | I32_div_u -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I32_div_u x in
    (match x with Rest_i32_div_u y -> (from_instr_case_of_aux_insn_label I32_div_u y))
  | I32_div_s -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I32_div_s x in
    (match x with Rest_i32_div_s y -> (from_instr_case_of_aux_insn_label I32_div_s y))
  | I32_mul -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I32_mul x in
    (match x with Rest_i32_mul y -> (from_instr_case_of_aux_insn_label I32_mul y))
  | I32_sub -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I32_sub x in
    (match x with Rest_i32_sub y -> (from_instr_case_of_aux_insn_label I32_sub y))
  | I32_add -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I32_add x in
    (match x with Rest_i32_add y -> (from_instr_case_of_aux_insn_label I32_add y))
  | I32_popcnt -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I32_popcnt x in
    (match x with Rest_i32_popcnt y -> (from_instr_case_of_aux_insn_label I32_popcnt y))
  | I32_ctz -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I32_ctz x in
    (match x with Rest_i32_ctz y -> (from_instr_case_of_aux_insn_label I32_ctz y))
  | I32_clz -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I32_clz x in
    (match x with Rest_i32_clz y -> (from_instr_case_of_aux_insn_label I32_clz y))
  | F64_ge -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro F64_ge x in
    (match x with Rest_f64_ge y -> (from_instr_case_of_aux_insn_label F64_ge y))
  | F64_le -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro F64_le x in
    (match x with Rest_f64_le y -> (from_instr_case_of_aux_insn_label F64_le y))
  | F64_gt -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro F64_gt x in
    (match x with Rest_f64_gt y -> (from_instr_case_of_aux_insn_label F64_gt y))
  | F64_lt -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro F64_lt x in
    (match x with Rest_f64_lt y -> (from_instr_case_of_aux_insn_label F64_lt y))
  | F64_ne -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro F64_ne x in
    (match x with Rest_f64_ne y -> (from_instr_case_of_aux_insn_label F64_ne y))
  | F64_eq -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro F64_eq x in
    (match x with Rest_f64_eq y -> (from_instr_case_of_aux_insn_label F64_eq y))
  | F32_ge -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro F32_ge x in
    (match x with Rest_f32_ge y -> (from_instr_case_of_aux_insn_label F32_ge y))
  | F32_le -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro F32_le x in
    (match x with Rest_f32_le y -> (from_instr_case_of_aux_insn_label F32_le y))
  | F32_gt -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro F32_gt x in
    (match x with Rest_f32_gt y -> (from_instr_case_of_aux_insn_label F32_gt y))
  | F32_lt -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro F32_lt x in
    (match x with Rest_f32_lt y -> (from_instr_case_of_aux_insn_label F32_lt y))
  | F32_ne -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro F32_ne x in
    (match x with Rest_f32_ne y -> (from_instr_case_of_aux_insn_label F32_ne y))
  | F32_eq -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro F32_eq x in
    (match x with Rest_f32_eq y -> (from_instr_case_of_aux_insn_label F32_eq y))
  | I64_ge_u -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I64_ge_u x in
    (match x with Rest_i64_ge_u y -> (from_instr_case_of_aux_insn_label I64_ge_u y))
  | I64_ge_s -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I64_ge_s x in
    (match x with Rest_i64_ge_s y -> (from_instr_case_of_aux_insn_label I64_ge_s y))
  | I64_le_u -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I64_le_u x in
    (match x with Rest_i64_le_u y -> (from_instr_case_of_aux_insn_label I64_le_u y))
  | I64_le_s -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I64_le_s x in
    (match x with Rest_i64_le_s y -> (from_instr_case_of_aux_insn_label I64_le_s y))
  | I64_gt_u -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I64_gt_u x in
    (match x with Rest_i64_gt_u y -> (from_instr_case_of_aux_insn_label I64_gt_u y))
  | I64_gt_s -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I64_gt_s x in
    (match x with Rest_i64_gt_s y -> (from_instr_case_of_aux_insn_label I64_gt_s y))
  | I64_lt_u -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I64_lt_u x in
    (match x with Rest_i64_lt_u y -> (from_instr_case_of_aux_insn_label I64_lt_u y))
  | I64_lt_s -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I64_lt_s x in
    (match x with Rest_i64_lt_s y -> (from_instr_case_of_aux_insn_label I64_lt_s y))
  | I64_ne -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I64_ne x in
    (match x with Rest_i64_ne y -> (from_instr_case_of_aux_insn_label I64_ne y))
  | I64_eq -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I64_eq x in
    (match x with Rest_i64_eq y -> (from_instr_case_of_aux_insn_label I64_eq y))
  | I64_eqz -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I64_eqz x in
    (match x with Rest_i64_eqz y -> (from_instr_case_of_aux_insn_label I64_eqz y))
  | I32_ge_u -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I32_ge_u x in
    (match x with Rest_i32_ge_u y -> (from_instr_case_of_aux_insn_label I32_ge_u y))
  | I32_ge_s -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I32_ge_s x in
    (match x with Rest_i32_ge_s y -> (from_instr_case_of_aux_insn_label I32_ge_s y))
  | I32_le_u -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I32_le_u x in
    (match x with Rest_i32_le_u y -> (from_instr_case_of_aux_insn_label I32_le_u y))
  | I32_le_s -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I32_le_s x in
    (match x with Rest_i32_le_s y -> (from_instr_case_of_aux_insn_label I32_le_s y))
  | I32_gt_u -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I32_gt_u x in
    (match x with Rest_i32_gt_u y -> (from_instr_case_of_aux_insn_label I32_gt_u y))
  | I32_gt_s -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I32_gt_s x in
    (match x with Rest_i32_gt_s y -> (from_instr_case_of_aux_insn_label I32_gt_s y))
  | I32_lt_u -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I32_lt_u x in
    (match x with Rest_i32_lt_u y -> (from_instr_case_of_aux_insn_label I32_lt_u y))
  | I32_lt_s -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I32_lt_s x in
    (match x with Rest_i32_lt_s y -> (from_instr_case_of_aux_insn_label I32_lt_s y))
  | I32_ne -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I32_ne x in
    (match x with Rest_i32_ne y -> (from_instr_case_of_aux_insn_label I32_ne y))
  | I32_eq -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I32_eq x in
    (match x with Rest_i32_eq y -> (from_instr_case_of_aux_insn_label I32_eq y))
  | I32_eqz -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro I32_eqz x in
    (match x with Rest_i32_eqz y -> (from_instr_case_of_aux_insn_label I32_eqz y))
  | Select_ -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro Select_ x in
    (match x with Rest_select_ y -> (from_instr_case_of_aux_insn_label Select_ y))
  | Drop -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro Drop x in
    (match x with Rest_drop y -> (from_instr_case_of_aux_insn_label Drop y))
  | Ret -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro Ret x in
    (match x with Rest_ret y -> (from_instr_case_of_aux_insn_label Ret y))
  | Nop -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro Nop x in
    (match x with Rest_nop y -> (from_instr_case_of_aux_insn_label Nop y))
  | Unreachable -> [@inline_let] let _ = synth_instr_cases_recip_pre_intro Unreachable x in
    (match x with Rest_unreachable y -> (from_instr_case_of_aux_insn_label Unreachable y))

inline_for_extraction let instr_sum = LP.make_sum' aux_insn_label_enum key_of_instr
  instr_case_of_aux_insn_label synth_instr_cases synth_instr_cases_recip
  (_ by (LP.make_sum_synth_case_recip_synth_case_tac ()))
  (_ by (LP.synth_case_synth_case_recip_tac ()))

noextract let parse_instr_cases (x:LP.sum_key instr_sum)
  : k:LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label x) =
  match x with
  | Block -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label Block)) = (| _, aux_block_parser |) in u
  | Loop -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label Loop)) = (| _, aux_loop_parser |) in u
  | If_ -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label If_)) = (| _, aux_if_parser |) in u
  | Br -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label Br)) = (| _, labelidx_parser |) in u
  | Br_if -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label Br_if)) = (| _, labelidx_parser |) in u
  | Br_table -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label Br_table)) = (| _, aux_br_table_parser |) in u
  | Call -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label Call)) = (| _, funcidx_parser |) in u
  | Call_indirect -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label Call_indirect)) = (| _, aux_call_indirect_parser |) in u
  | Local_get -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label Local_get)) = (| _, localidx_parser |) in u
  | Local_set -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label Local_set)) = (| _, localidx_parser |) in u
  | Local_tee -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label Local_tee)) = (| _, localidx_parser |) in u
  | Global_get -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label Global_get)) = (| _, globalidx_parser |) in u
  | Global_set -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label Global_set)) = (| _, globalidx_parser |) in u
  | I32_load -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I32_load)) = (| _, memarg_parser |) in u
  | I64_load -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I64_load)) = (| _, memarg_parser |) in u
  | F32_load -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label F32_load)) = (| _, memarg_parser |) in u
  | F64_load -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label F64_load)) = (| _, memarg_parser |) in u
  | I32_load8_s -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I32_load8_s)) = (| _, memarg_parser |) in u
  | I32_load8_u -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I32_load8_u)) = (| _, memarg_parser |) in u
  | I32_load16_s -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I32_load16_s)) = (| _, memarg_parser |) in u
  | I32_load16_u -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I32_load16_u)) = (| _, memarg_parser |) in u
  | I64_load8_s -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I64_load8_s)) = (| _, memarg_parser |) in u
  | I64_load8_u -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I64_load8_u)) = (| _, memarg_parser |) in u
  | I64_load16_s -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I64_load16_s)) = (| _, memarg_parser |) in u
  | I64_load16_u -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I64_load16_u)) = (| _, memarg_parser |) in u
  | I64_load32_s -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I64_load32_s)) = (| _, memarg_parser |) in u
  | I64_load32_u -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I64_load32_u)) = (| _, memarg_parser |) in u
  | I32_store -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I32_store)) = (| _, memarg_parser |) in u
  | I64_store -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I64_store)) = (| _, memarg_parser |) in u
  | F32_store -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label F32_store)) = (| _, memarg_parser |) in u
  | F64_store -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label F64_store)) = (| _, memarg_parser |) in u
  | I32_store8 -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I32_store8)) = (| _, memarg_parser |) in u
  | I32_store16 -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I32_store16)) = (| _, memarg_parser |) in u
  | I64_store8 -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I64_store8)) = (| _, memarg_parser |) in u
  | I64_store16 -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I64_store16)) = (| _, memarg_parser |) in u
  | I64_store32 -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I64_store32)) = (| _, memarg_parser |) in u
  | Memory_size -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label Memory_size)) = (| _, aux_constbyte0_parser |) in u
  | Memory_grow -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label Memory_grow)) = (| _, aux_constbyte0_parser |) in u
  | I32_const -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I32_const)) = (| _, LPI.parse_u32 |) in u
  | I64_const -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I64_const)) = (| _, LPI.parse_u64 |) in u
  | F32_const -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label F32_const)) = (| _, f32_parser |) in u
  | F64_const -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label F64_const)) = (| _, f64_parser |) in u
  | End_of_contiguous_instructions -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label End_of_contiguous_instructions)) = (| _, LP.parse_empty |) in u
  | F64_reinterpret_i64 -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label F64_reinterpret_i64)) = (| _, LP.parse_empty |) in u
  | F32_reinterpret_i32 -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label F32_reinterpret_i32)) = (| _, LP.parse_empty |) in u
  | I64_reinterpret_f64 -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I64_reinterpret_f64)) = (| _, LP.parse_empty |) in u
  | I32_reinterpret_f32 -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I32_reinterpret_f32)) = (| _, LP.parse_empty |) in u
  | F64_promote_f32 -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label F64_promote_f32)) = (| _, LP.parse_empty |) in u
  | F64_convert_i64_u -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label F64_convert_i64_u)) = (| _, LP.parse_empty |) in u
  | F64_convert_i64_s -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label F64_convert_i64_s)) = (| _, LP.parse_empty |) in u
  | F64_convert_i32_u -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label F64_convert_i32_u)) = (| _, LP.parse_empty |) in u
  | F64_convert_i32_s -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label F64_convert_i32_s)) = (| _, LP.parse_empty |) in u
  | F32_demote_f64 -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label F32_demote_f64)) = (| _, LP.parse_empty |) in u
  | F32_convert_i64_u -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label F32_convert_i64_u)) = (| _, LP.parse_empty |) in u
  | F32_convert_i64_s -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label F32_convert_i64_s)) = (| _, LP.parse_empty |) in u
  | F32_convert_i32_u -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label F32_convert_i32_u)) = (| _, LP.parse_empty |) in u
  | F32_convert_i32_s -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label F32_convert_i32_s)) = (| _, LP.parse_empty |) in u
  | I64_trunc_f64_u -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I64_trunc_f64_u)) = (| _, LP.parse_empty |) in u
  | I64_trunc_f64_s -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I64_trunc_f64_s)) = (| _, LP.parse_empty |) in u
  | I64_trunc_f32_u -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I64_trunc_f32_u)) = (| _, LP.parse_empty |) in u
  | I64_trunc_f32_s -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I64_trunc_f32_s)) = (| _, LP.parse_empty |) in u
  | I64_extend_i32_u -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I64_extend_i32_u)) = (| _, LP.parse_empty |) in u
  | I64_extend_i32_s -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I64_extend_i32_s)) = (| _, LP.parse_empty |) in u
  | I32_trunc_f64_u -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I32_trunc_f64_u)) = (| _, LP.parse_empty |) in u
  | I32_trunc_f64_s -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I32_trunc_f64_s)) = (| _, LP.parse_empty |) in u
  | I32_trunc_f32_u -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I32_trunc_f32_u)) = (| _, LP.parse_empty |) in u
  | I32_trunc_f32_s -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I32_trunc_f32_s)) = (| _, LP.parse_empty |) in u
  | I32_wrap_i64 -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I32_wrap_i64)) = (| _, LP.parse_empty |) in u
  | F64_copysign -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label F64_copysign)) = (| _, LP.parse_empty |) in u
  | F64_max -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label F64_max)) = (| _, LP.parse_empty |) in u
  | F64_min -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label F64_min)) = (| _, LP.parse_empty |) in u
  | F64_div -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label F64_div)) = (| _, LP.parse_empty |) in u
  | F64_mul -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label F64_mul)) = (| _, LP.parse_empty |) in u
  | F64_sub -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label F64_sub)) = (| _, LP.parse_empty |) in u
  | F64_add -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label F64_add)) = (| _, LP.parse_empty |) in u
  | F64_sqrt -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label F64_sqrt)) = (| _, LP.parse_empty |) in u
  | F64_nearest -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label F64_nearest)) = (| _, LP.parse_empty |) in u
  | F64_trunc -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label F64_trunc)) = (| _, LP.parse_empty |) in u
  | F64_floor -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label F64_floor)) = (| _, LP.parse_empty |) in u
  | F64_ceil -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label F64_ceil)) = (| _, LP.parse_empty |) in u
  | F64_neg -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label F64_neg)) = (| _, LP.parse_empty |) in u
  | F64_abs -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label F64_abs)) = (| _, LP.parse_empty |) in u
  | F32_copysign -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label F32_copysign)) = (| _, LP.parse_empty |) in u
  | F32_max -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label F32_max)) = (| _, LP.parse_empty |) in u
  | F32_min -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label F32_min)) = (| _, LP.parse_empty |) in u
  | F32_div -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label F32_div)) = (| _, LP.parse_empty |) in u
  | F32_mul -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label F32_mul)) = (| _, LP.parse_empty |) in u
  | F32_sub -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label F32_sub)) = (| _, LP.parse_empty |) in u
  | F32_add -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label F32_add)) = (| _, LP.parse_empty |) in u
  | F32_sqrt -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label F32_sqrt)) = (| _, LP.parse_empty |) in u
  | F32_nearest -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label F32_nearest)) = (| _, LP.parse_empty |) in u
  | F32_trunc -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label F32_trunc)) = (| _, LP.parse_empty |) in u
  | F32_floor -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label F32_floor)) = (| _, LP.parse_empty |) in u
  | F32_ceil -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label F32_ceil)) = (| _, LP.parse_empty |) in u
  | F32_neg -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label F32_neg)) = (| _, LP.parse_empty |) in u
  | F32_abs -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label F32_abs)) = (| _, LP.parse_empty |) in u
  | I64_rotr -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I64_rotr)) = (| _, LP.parse_empty |) in u
  | I64_rotl -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I64_rotl)) = (| _, LP.parse_empty |) in u
  | I64_shr_u -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I64_shr_u)) = (| _, LP.parse_empty |) in u
  | I64_shr_s -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I64_shr_s)) = (| _, LP.parse_empty |) in u
  | I64_shl -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I64_shl)) = (| _, LP.parse_empty |) in u
  | I64_xor -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I64_xor)) = (| _, LP.parse_empty |) in u
  | I64_or -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I64_or)) = (| _, LP.parse_empty |) in u
  | I64_and -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I64_and)) = (| _, LP.parse_empty |) in u
  | I64_rem_u -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I64_rem_u)) = (| _, LP.parse_empty |) in u
  | I64_rem_s -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I64_rem_s)) = (| _, LP.parse_empty |) in u
  | I64_div_u -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I64_div_u)) = (| _, LP.parse_empty |) in u
  | I64_div_s -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I64_div_s)) = (| _, LP.parse_empty |) in u
  | I64_mul -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I64_mul)) = (| _, LP.parse_empty |) in u
  | I64_sub -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I64_sub)) = (| _, LP.parse_empty |) in u
  | I64_add -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I64_add)) = (| _, LP.parse_empty |) in u
  | I64_popcnt -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I64_popcnt)) = (| _, LP.parse_empty |) in u
  | I64_ctz -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I64_ctz)) = (| _, LP.parse_empty |) in u
  | I64_clz -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I64_clz)) = (| _, LP.parse_empty |) in u
  | I32_rotr -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I32_rotr)) = (| _, LP.parse_empty |) in u
  | I32_rotl -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I32_rotl)) = (| _, LP.parse_empty |) in u
  | I32_shr_u -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I32_shr_u)) = (| _, LP.parse_empty |) in u
  | I32_shr_s -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I32_shr_s)) = (| _, LP.parse_empty |) in u
  | I32_shl -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I32_shl)) = (| _, LP.parse_empty |) in u
  | I32_xor -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I32_xor)) = (| _, LP.parse_empty |) in u
  | I32_or -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I32_or)) = (| _, LP.parse_empty |) in u
  | I32_and -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I32_and)) = (| _, LP.parse_empty |) in u
  | I32_rem_u -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I32_rem_u)) = (| _, LP.parse_empty |) in u
  | I32_rem_s -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I32_rem_s)) = (| _, LP.parse_empty |) in u
  | I32_div_u -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I32_div_u)) = (| _, LP.parse_empty |) in u
  | I32_div_s -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I32_div_s)) = (| _, LP.parse_empty |) in u
  | I32_mul -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I32_mul)) = (| _, LP.parse_empty |) in u
  | I32_sub -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I32_sub)) = (| _, LP.parse_empty |) in u
  | I32_add -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I32_add)) = (| _, LP.parse_empty |) in u
  | I32_popcnt -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I32_popcnt)) = (| _, LP.parse_empty |) in u
  | I32_ctz -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I32_ctz)) = (| _, LP.parse_empty |) in u
  | I32_clz -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I32_clz)) = (| _, LP.parse_empty |) in u
  | F64_ge -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label F64_ge)) = (| _, LP.parse_empty |) in u
  | F64_le -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label F64_le)) = (| _, LP.parse_empty |) in u
  | F64_gt -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label F64_gt)) = (| _, LP.parse_empty |) in u
  | F64_lt -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label F64_lt)) = (| _, LP.parse_empty |) in u
  | F64_ne -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label F64_ne)) = (| _, LP.parse_empty |) in u
  | F64_eq -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label F64_eq)) = (| _, LP.parse_empty |) in u
  | F32_ge -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label F32_ge)) = (| _, LP.parse_empty |) in u
  | F32_le -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label F32_le)) = (| _, LP.parse_empty |) in u
  | F32_gt -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label F32_gt)) = (| _, LP.parse_empty |) in u
  | F32_lt -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label F32_lt)) = (| _, LP.parse_empty |) in u
  | F32_ne -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label F32_ne)) = (| _, LP.parse_empty |) in u
  | F32_eq -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label F32_eq)) = (| _, LP.parse_empty |) in u
  | I64_ge_u -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I64_ge_u)) = (| _, LP.parse_empty |) in u
  | I64_ge_s -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I64_ge_s)) = (| _, LP.parse_empty |) in u
  | I64_le_u -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I64_le_u)) = (| _, LP.parse_empty |) in u
  | I64_le_s -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I64_le_s)) = (| _, LP.parse_empty |) in u
  | I64_gt_u -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I64_gt_u)) = (| _, LP.parse_empty |) in u
  | I64_gt_s -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I64_gt_s)) = (| _, LP.parse_empty |) in u
  | I64_lt_u -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I64_lt_u)) = (| _, LP.parse_empty |) in u
  | I64_lt_s -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I64_lt_s)) = (| _, LP.parse_empty |) in u
  | I64_ne -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I64_ne)) = (| _, LP.parse_empty |) in u
  | I64_eq -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I64_eq)) = (| _, LP.parse_empty |) in u
  | I64_eqz -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I64_eqz)) = (| _, LP.parse_empty |) in u
  | I32_ge_u -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I32_ge_u)) = (| _, LP.parse_empty |) in u
  | I32_ge_s -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I32_ge_s)) = (| _, LP.parse_empty |) in u
  | I32_le_u -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I32_le_u)) = (| _, LP.parse_empty |) in u
  | I32_le_s -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I32_le_s)) = (| _, LP.parse_empty |) in u
  | I32_gt_u -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I32_gt_u)) = (| _, LP.parse_empty |) in u
  | I32_gt_s -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I32_gt_s)) = (| _, LP.parse_empty |) in u
  | I32_lt_u -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I32_lt_u)) = (| _, LP.parse_empty |) in u
  | I32_lt_s -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I32_lt_s)) = (| _, LP.parse_empty |) in u
  | I32_ne -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I32_ne)) = (| _, LP.parse_empty |) in u
  | I32_eq -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I32_eq)) = (| _, LP.parse_empty |) in u
  | I32_eqz -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label I32_eqz)) = (| _, LP.parse_empty |) in u
  | Select_ -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label Select_)) = (| _, LP.parse_empty |) in u
  | Drop -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label Drop)) = (| _, LP.parse_empty |) in u
  | Ret -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label Ret)) = (| _, LP.parse_empty |) in u
  | Nop -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label Nop)) = (| _, LP.parse_empty |) in u
  | Unreachable -> [@inline_let] let u : (k: LP.parser_kind & LP.parser k (instr_case_of_aux_insn_label Unreachable)) = (| _, LP.parse_empty |) in u
  | _ -> (| _, LP.parse_false |)

noextract let serialize_instr_cases (x:LP.sum_key instr_sum)
  : LP.serializer (dsnd (parse_instr_cases x)) =
  match x with
  | Block -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases Block)) = aux_block_serializer in u
  | Loop -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases Loop)) = aux_loop_serializer in u
  | If_ -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases If_)) = aux_if_serializer in u
  | Br -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases Br)) = labelidx_serializer in u
  | Br_if -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases Br_if)) = labelidx_serializer in u
  | Br_table -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases Br_table)) = aux_br_table_serializer in u
  | Call -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases Call)) = funcidx_serializer in u
  | Call_indirect -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases Call_indirect)) = aux_call_indirect_serializer in u
  | Local_get -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases Local_get)) = localidx_serializer in u
  | Local_set -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases Local_set)) = localidx_serializer in u
  | Local_tee -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases Local_tee)) = localidx_serializer in u
  | Global_get -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases Global_get)) = globalidx_serializer in u
  | Global_set -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases Global_set)) = globalidx_serializer in u
  | I32_load -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I32_load)) = memarg_serializer in u
  | I64_load -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I64_load)) = memarg_serializer in u
  | F32_load -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases F32_load)) = memarg_serializer in u
  | F64_load -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases F64_load)) = memarg_serializer in u
  | I32_load8_s -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I32_load8_s)) = memarg_serializer in u
  | I32_load8_u -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I32_load8_u)) = memarg_serializer in u
  | I32_load16_s -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I32_load16_s)) = memarg_serializer in u
  | I32_load16_u -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I32_load16_u)) = memarg_serializer in u
  | I64_load8_s -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I64_load8_s)) = memarg_serializer in u
  | I64_load8_u -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I64_load8_u)) = memarg_serializer in u
  | I64_load16_s -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I64_load16_s)) = memarg_serializer in u
  | I64_load16_u -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I64_load16_u)) = memarg_serializer in u
  | I64_load32_s -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I64_load32_s)) = memarg_serializer in u
  | I64_load32_u -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I64_load32_u)) = memarg_serializer in u
  | I32_store -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I32_store)) = memarg_serializer in u
  | I64_store -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I64_store)) = memarg_serializer in u
  | F32_store -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases F32_store)) = memarg_serializer in u
  | F64_store -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases F64_store)) = memarg_serializer in u
  | I32_store8 -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I32_store8)) = memarg_serializer in u
  | I32_store16 -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I32_store16)) = memarg_serializer in u
  | I64_store8 -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I64_store8)) = memarg_serializer in u
  | I64_store16 -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I64_store16)) = memarg_serializer in u
  | I64_store32 -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I64_store32)) = memarg_serializer in u
  | Memory_size -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases Memory_size)) = aux_constbyte0_serializer in u
  | Memory_grow -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases Memory_grow)) = aux_constbyte0_serializer in u
  | I32_const -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I32_const)) = LPI.serialize_u32 in u
  | I64_const -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I64_const)) = LPI.serialize_u64 in u
  | F32_const -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases F32_const)) = f32_serializer in u
  | F64_const -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases F64_const)) = f64_serializer in u
  | End_of_contiguous_instructions -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases End_of_contiguous_instructions)) = LP.serialize_empty in u
  | F64_reinterpret_i64 -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases F64_reinterpret_i64)) = LP.serialize_empty in u
  | F32_reinterpret_i32 -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases F32_reinterpret_i32)) = LP.serialize_empty in u
  | I64_reinterpret_f64 -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I64_reinterpret_f64)) = LP.serialize_empty in u
  | I32_reinterpret_f32 -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I32_reinterpret_f32)) = LP.serialize_empty in u
  | F64_promote_f32 -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases F64_promote_f32)) = LP.serialize_empty in u
  | F64_convert_i64_u -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases F64_convert_i64_u)) = LP.serialize_empty in u
  | F64_convert_i64_s -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases F64_convert_i64_s)) = LP.serialize_empty in u
  | F64_convert_i32_u -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases F64_convert_i32_u)) = LP.serialize_empty in u
  | F64_convert_i32_s -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases F64_convert_i32_s)) = LP.serialize_empty in u
  | F32_demote_f64 -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases F32_demote_f64)) = LP.serialize_empty in u
  | F32_convert_i64_u -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases F32_convert_i64_u)) = LP.serialize_empty in u
  | F32_convert_i64_s -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases F32_convert_i64_s)) = LP.serialize_empty in u
  | F32_convert_i32_u -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases F32_convert_i32_u)) = LP.serialize_empty in u
  | F32_convert_i32_s -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases F32_convert_i32_s)) = LP.serialize_empty in u
  | I64_trunc_f64_u -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I64_trunc_f64_u)) = LP.serialize_empty in u
  | I64_trunc_f64_s -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I64_trunc_f64_s)) = LP.serialize_empty in u
  | I64_trunc_f32_u -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I64_trunc_f32_u)) = LP.serialize_empty in u
  | I64_trunc_f32_s -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I64_trunc_f32_s)) = LP.serialize_empty in u
  | I64_extend_i32_u -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I64_extend_i32_u)) = LP.serialize_empty in u
  | I64_extend_i32_s -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I64_extend_i32_s)) = LP.serialize_empty in u
  | I32_trunc_f64_u -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I32_trunc_f64_u)) = LP.serialize_empty in u
  | I32_trunc_f64_s -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I32_trunc_f64_s)) = LP.serialize_empty in u
  | I32_trunc_f32_u -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I32_trunc_f32_u)) = LP.serialize_empty in u
  | I32_trunc_f32_s -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I32_trunc_f32_s)) = LP.serialize_empty in u
  | I32_wrap_i64 -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I32_wrap_i64)) = LP.serialize_empty in u
  | F64_copysign -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases F64_copysign)) = LP.serialize_empty in u
  | F64_max -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases F64_max)) = LP.serialize_empty in u
  | F64_min -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases F64_min)) = LP.serialize_empty in u
  | F64_div -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases F64_div)) = LP.serialize_empty in u
  | F64_mul -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases F64_mul)) = LP.serialize_empty in u
  | F64_sub -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases F64_sub)) = LP.serialize_empty in u
  | F64_add -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases F64_add)) = LP.serialize_empty in u
  | F64_sqrt -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases F64_sqrt)) = LP.serialize_empty in u
  | F64_nearest -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases F64_nearest)) = LP.serialize_empty in u
  | F64_trunc -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases F64_trunc)) = LP.serialize_empty in u
  | F64_floor -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases F64_floor)) = LP.serialize_empty in u
  | F64_ceil -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases F64_ceil)) = LP.serialize_empty in u
  | F64_neg -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases F64_neg)) = LP.serialize_empty in u
  | F64_abs -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases F64_abs)) = LP.serialize_empty in u
  | F32_copysign -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases F32_copysign)) = LP.serialize_empty in u
  | F32_max -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases F32_max)) = LP.serialize_empty in u
  | F32_min -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases F32_min)) = LP.serialize_empty in u
  | F32_div -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases F32_div)) = LP.serialize_empty in u
  | F32_mul -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases F32_mul)) = LP.serialize_empty in u
  | F32_sub -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases F32_sub)) = LP.serialize_empty in u
  | F32_add -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases F32_add)) = LP.serialize_empty in u
  | F32_sqrt -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases F32_sqrt)) = LP.serialize_empty in u
  | F32_nearest -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases F32_nearest)) = LP.serialize_empty in u
  | F32_trunc -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases F32_trunc)) = LP.serialize_empty in u
  | F32_floor -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases F32_floor)) = LP.serialize_empty in u
  | F32_ceil -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases F32_ceil)) = LP.serialize_empty in u
  | F32_neg -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases F32_neg)) = LP.serialize_empty in u
  | F32_abs -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases F32_abs)) = LP.serialize_empty in u
  | I64_rotr -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I64_rotr)) = LP.serialize_empty in u
  | I64_rotl -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I64_rotl)) = LP.serialize_empty in u
  | I64_shr_u -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I64_shr_u)) = LP.serialize_empty in u
  | I64_shr_s -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I64_shr_s)) = LP.serialize_empty in u
  | I64_shl -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I64_shl)) = LP.serialize_empty in u
  | I64_xor -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I64_xor)) = LP.serialize_empty in u
  | I64_or -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I64_or)) = LP.serialize_empty in u
  | I64_and -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I64_and)) = LP.serialize_empty in u
  | I64_rem_u -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I64_rem_u)) = LP.serialize_empty in u
  | I64_rem_s -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I64_rem_s)) = LP.serialize_empty in u
  | I64_div_u -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I64_div_u)) = LP.serialize_empty in u
  | I64_div_s -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I64_div_s)) = LP.serialize_empty in u
  | I64_mul -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I64_mul)) = LP.serialize_empty in u
  | I64_sub -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I64_sub)) = LP.serialize_empty in u
  | I64_add -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I64_add)) = LP.serialize_empty in u
  | I64_popcnt -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I64_popcnt)) = LP.serialize_empty in u
  | I64_ctz -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I64_ctz)) = LP.serialize_empty in u
  | I64_clz -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I64_clz)) = LP.serialize_empty in u
  | I32_rotr -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I32_rotr)) = LP.serialize_empty in u
  | I32_rotl -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I32_rotl)) = LP.serialize_empty in u
  | I32_shr_u -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I32_shr_u)) = LP.serialize_empty in u
  | I32_shr_s -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I32_shr_s)) = LP.serialize_empty in u
  | I32_shl -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I32_shl)) = LP.serialize_empty in u
  | I32_xor -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I32_xor)) = LP.serialize_empty in u
  | I32_or -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I32_or)) = LP.serialize_empty in u
  | I32_and -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I32_and)) = LP.serialize_empty in u
  | I32_rem_u -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I32_rem_u)) = LP.serialize_empty in u
  | I32_rem_s -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I32_rem_s)) = LP.serialize_empty in u
  | I32_div_u -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I32_div_u)) = LP.serialize_empty in u
  | I32_div_s -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I32_div_s)) = LP.serialize_empty in u
  | I32_mul -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I32_mul)) = LP.serialize_empty in u
  | I32_sub -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I32_sub)) = LP.serialize_empty in u
  | I32_add -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I32_add)) = LP.serialize_empty in u
  | I32_popcnt -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I32_popcnt)) = LP.serialize_empty in u
  | I32_ctz -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I32_ctz)) = LP.serialize_empty in u
  | I32_clz -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I32_clz)) = LP.serialize_empty in u
  | F64_ge -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases F64_ge)) = LP.serialize_empty in u
  | F64_le -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases F64_le)) = LP.serialize_empty in u
  | F64_gt -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases F64_gt)) = LP.serialize_empty in u
  | F64_lt -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases F64_lt)) = LP.serialize_empty in u
  | F64_ne -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases F64_ne)) = LP.serialize_empty in u
  | F64_eq -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases F64_eq)) = LP.serialize_empty in u
  | F32_ge -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases F32_ge)) = LP.serialize_empty in u
  | F32_le -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases F32_le)) = LP.serialize_empty in u
  | F32_gt -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases F32_gt)) = LP.serialize_empty in u
  | F32_lt -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases F32_lt)) = LP.serialize_empty in u
  | F32_ne -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases F32_ne)) = LP.serialize_empty in u
  | F32_eq -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases F32_eq)) = LP.serialize_empty in u
  | I64_ge_u -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I64_ge_u)) = LP.serialize_empty in u
  | I64_ge_s -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I64_ge_s)) = LP.serialize_empty in u
  | I64_le_u -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I64_le_u)) = LP.serialize_empty in u
  | I64_le_s -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I64_le_s)) = LP.serialize_empty in u
  | I64_gt_u -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I64_gt_u)) = LP.serialize_empty in u
  | I64_gt_s -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I64_gt_s)) = LP.serialize_empty in u
  | I64_lt_u -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I64_lt_u)) = LP.serialize_empty in u
  | I64_lt_s -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I64_lt_s)) = LP.serialize_empty in u
  | I64_ne -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I64_ne)) = LP.serialize_empty in u
  | I64_eq -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I64_eq)) = LP.serialize_empty in u
  | I64_eqz -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I64_eqz)) = LP.serialize_empty in u
  | I32_ge_u -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I32_ge_u)) = LP.serialize_empty in u
  | I32_ge_s -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I32_ge_s)) = LP.serialize_empty in u
  | I32_le_u -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I32_le_u)) = LP.serialize_empty in u
  | I32_le_s -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I32_le_s)) = LP.serialize_empty in u
  | I32_gt_u -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I32_gt_u)) = LP.serialize_empty in u
  | I32_gt_s -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I32_gt_s)) = LP.serialize_empty in u
  | I32_lt_u -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I32_lt_u)) = LP.serialize_empty in u
  | I32_lt_s -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I32_lt_s)) = LP.serialize_empty in u
  | I32_ne -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I32_ne)) = LP.serialize_empty in u
  | I32_eq -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I32_eq)) = LP.serialize_empty in u
  | I32_eqz -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases I32_eqz)) = LP.serialize_empty in u
  | Select_ -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases Select_)) = LP.serialize_empty in u
  | Drop -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases Drop)) = LP.serialize_empty in u
  | Ret -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases Ret)) = LP.serialize_empty in u
  | Nop -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases Nop)) = LP.serialize_empty in u
  | Unreachable -> [@inline_let] let u : LP.serializer (dsnd (parse_instr_cases Unreachable)) = LP.serialize_empty in u
  | _ -> LP.serialize_false

inline_for_extraction noextract let parse32_instr_cases (x:LP.sum_key instr_sum)
  : LS.parser32 (dsnd (parse_instr_cases x)) =
  match x with
  | Block -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases Block)) = aux_block_parser32 in u
  | Loop -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases Loop)) = aux_loop_parser32 in u
  | If_ -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases If_)) = aux_if_parser32 in u
  | Br -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases Br)) = labelidx_parser32 in u
  | Br_if -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases Br_if)) = labelidx_parser32 in u
  | Br_table -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases Br_table)) = aux_br_table_parser32 in u
  | Call -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases Call)) = funcidx_parser32 in u
  | Call_indirect -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases Call_indirect)) = aux_call_indirect_parser32 in u
  | Local_get -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases Local_get)) = localidx_parser32 in u
  | Local_set -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases Local_set)) = localidx_parser32 in u
  | Local_tee -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases Local_tee)) = localidx_parser32 in u
  | Global_get -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases Global_get)) = globalidx_parser32 in u
  | Global_set -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases Global_set)) = globalidx_parser32 in u
  | I32_load -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I32_load)) = memarg_parser32 in u
  | I64_load -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I64_load)) = memarg_parser32 in u
  | F32_load -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases F32_load)) = memarg_parser32 in u
  | F64_load -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases F64_load)) = memarg_parser32 in u
  | I32_load8_s -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I32_load8_s)) = memarg_parser32 in u
  | I32_load8_u -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I32_load8_u)) = memarg_parser32 in u
  | I32_load16_s -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I32_load16_s)) = memarg_parser32 in u
  | I32_load16_u -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I32_load16_u)) = memarg_parser32 in u
  | I64_load8_s -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I64_load8_s)) = memarg_parser32 in u
  | I64_load8_u -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I64_load8_u)) = memarg_parser32 in u
  | I64_load16_s -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I64_load16_s)) = memarg_parser32 in u
  | I64_load16_u -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I64_load16_u)) = memarg_parser32 in u
  | I64_load32_s -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I64_load32_s)) = memarg_parser32 in u
  | I64_load32_u -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I64_load32_u)) = memarg_parser32 in u
  | I32_store -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I32_store)) = memarg_parser32 in u
  | I64_store -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I64_store)) = memarg_parser32 in u
  | F32_store -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases F32_store)) = memarg_parser32 in u
  | F64_store -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases F64_store)) = memarg_parser32 in u
  | I32_store8 -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I32_store8)) = memarg_parser32 in u
  | I32_store16 -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I32_store16)) = memarg_parser32 in u
  | I64_store8 -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I64_store8)) = memarg_parser32 in u
  | I64_store16 -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I64_store16)) = memarg_parser32 in u
  | I64_store32 -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I64_store32)) = memarg_parser32 in u
  | Memory_size -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases Memory_size)) = aux_constbyte0_parser32 in u
  | Memory_grow -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases Memory_grow)) = aux_constbyte0_parser32 in u
  | I32_const -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I32_const)) = LS.parse32_u32 in u
  | I64_const -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I64_const)) = LS.parse32_u64 in u
  | F32_const -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases F32_const)) = f32_parser32 in u
  | F64_const -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases F64_const)) = f64_parser32 in u
  | End_of_contiguous_instructions -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases End_of_contiguous_instructions)) = LS.parse32_empty in u
  | F64_reinterpret_i64 -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases F64_reinterpret_i64)) = LS.parse32_empty in u
  | F32_reinterpret_i32 -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases F32_reinterpret_i32)) = LS.parse32_empty in u
  | I64_reinterpret_f64 -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I64_reinterpret_f64)) = LS.parse32_empty in u
  | I32_reinterpret_f32 -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I32_reinterpret_f32)) = LS.parse32_empty in u
  | F64_promote_f32 -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases F64_promote_f32)) = LS.parse32_empty in u
  | F64_convert_i64_u -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases F64_convert_i64_u)) = LS.parse32_empty in u
  | F64_convert_i64_s -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases F64_convert_i64_s)) = LS.parse32_empty in u
  | F64_convert_i32_u -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases F64_convert_i32_u)) = LS.parse32_empty in u
  | F64_convert_i32_s -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases F64_convert_i32_s)) = LS.parse32_empty in u
  | F32_demote_f64 -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases F32_demote_f64)) = LS.parse32_empty in u
  | F32_convert_i64_u -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases F32_convert_i64_u)) = LS.parse32_empty in u
  | F32_convert_i64_s -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases F32_convert_i64_s)) = LS.parse32_empty in u
  | F32_convert_i32_u -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases F32_convert_i32_u)) = LS.parse32_empty in u
  | F32_convert_i32_s -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases F32_convert_i32_s)) = LS.parse32_empty in u
  | I64_trunc_f64_u -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I64_trunc_f64_u)) = LS.parse32_empty in u
  | I64_trunc_f64_s -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I64_trunc_f64_s)) = LS.parse32_empty in u
  | I64_trunc_f32_u -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I64_trunc_f32_u)) = LS.parse32_empty in u
  | I64_trunc_f32_s -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I64_trunc_f32_s)) = LS.parse32_empty in u
  | I64_extend_i32_u -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I64_extend_i32_u)) = LS.parse32_empty in u
  | I64_extend_i32_s -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I64_extend_i32_s)) = LS.parse32_empty in u
  | I32_trunc_f64_u -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I32_trunc_f64_u)) = LS.parse32_empty in u
  | I32_trunc_f64_s -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I32_trunc_f64_s)) = LS.parse32_empty in u
  | I32_trunc_f32_u -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I32_trunc_f32_u)) = LS.parse32_empty in u
  | I32_trunc_f32_s -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I32_trunc_f32_s)) = LS.parse32_empty in u
  | I32_wrap_i64 -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I32_wrap_i64)) = LS.parse32_empty in u
  | F64_copysign -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases F64_copysign)) = LS.parse32_empty in u
  | F64_max -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases F64_max)) = LS.parse32_empty in u
  | F64_min -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases F64_min)) = LS.parse32_empty in u
  | F64_div -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases F64_div)) = LS.parse32_empty in u
  | F64_mul -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases F64_mul)) = LS.parse32_empty in u
  | F64_sub -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases F64_sub)) = LS.parse32_empty in u
  | F64_add -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases F64_add)) = LS.parse32_empty in u
  | F64_sqrt -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases F64_sqrt)) = LS.parse32_empty in u
  | F64_nearest -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases F64_nearest)) = LS.parse32_empty in u
  | F64_trunc -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases F64_trunc)) = LS.parse32_empty in u
  | F64_floor -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases F64_floor)) = LS.parse32_empty in u
  | F64_ceil -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases F64_ceil)) = LS.parse32_empty in u
  | F64_neg -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases F64_neg)) = LS.parse32_empty in u
  | F64_abs -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases F64_abs)) = LS.parse32_empty in u
  | F32_copysign -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases F32_copysign)) = LS.parse32_empty in u
  | F32_max -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases F32_max)) = LS.parse32_empty in u
  | F32_min -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases F32_min)) = LS.parse32_empty in u
  | F32_div -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases F32_div)) = LS.parse32_empty in u
  | F32_mul -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases F32_mul)) = LS.parse32_empty in u
  | F32_sub -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases F32_sub)) = LS.parse32_empty in u
  | F32_add -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases F32_add)) = LS.parse32_empty in u
  | F32_sqrt -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases F32_sqrt)) = LS.parse32_empty in u
  | F32_nearest -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases F32_nearest)) = LS.parse32_empty in u
  | F32_trunc -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases F32_trunc)) = LS.parse32_empty in u
  | F32_floor -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases F32_floor)) = LS.parse32_empty in u
  | F32_ceil -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases F32_ceil)) = LS.parse32_empty in u
  | F32_neg -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases F32_neg)) = LS.parse32_empty in u
  | F32_abs -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases F32_abs)) = LS.parse32_empty in u
  | I64_rotr -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I64_rotr)) = LS.parse32_empty in u
  | I64_rotl -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I64_rotl)) = LS.parse32_empty in u
  | I64_shr_u -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I64_shr_u)) = LS.parse32_empty in u
  | I64_shr_s -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I64_shr_s)) = LS.parse32_empty in u
  | I64_shl -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I64_shl)) = LS.parse32_empty in u
  | I64_xor -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I64_xor)) = LS.parse32_empty in u
  | I64_or -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I64_or)) = LS.parse32_empty in u
  | I64_and -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I64_and)) = LS.parse32_empty in u
  | I64_rem_u -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I64_rem_u)) = LS.parse32_empty in u
  | I64_rem_s -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I64_rem_s)) = LS.parse32_empty in u
  | I64_div_u -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I64_div_u)) = LS.parse32_empty in u
  | I64_div_s -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I64_div_s)) = LS.parse32_empty in u
  | I64_mul -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I64_mul)) = LS.parse32_empty in u
  | I64_sub -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I64_sub)) = LS.parse32_empty in u
  | I64_add -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I64_add)) = LS.parse32_empty in u
  | I64_popcnt -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I64_popcnt)) = LS.parse32_empty in u
  | I64_ctz -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I64_ctz)) = LS.parse32_empty in u
  | I64_clz -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I64_clz)) = LS.parse32_empty in u
  | I32_rotr -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I32_rotr)) = LS.parse32_empty in u
  | I32_rotl -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I32_rotl)) = LS.parse32_empty in u
  | I32_shr_u -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I32_shr_u)) = LS.parse32_empty in u
  | I32_shr_s -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I32_shr_s)) = LS.parse32_empty in u
  | I32_shl -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I32_shl)) = LS.parse32_empty in u
  | I32_xor -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I32_xor)) = LS.parse32_empty in u
  | I32_or -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I32_or)) = LS.parse32_empty in u
  | I32_and -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I32_and)) = LS.parse32_empty in u
  | I32_rem_u -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I32_rem_u)) = LS.parse32_empty in u
  | I32_rem_s -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I32_rem_s)) = LS.parse32_empty in u
  | I32_div_u -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I32_div_u)) = LS.parse32_empty in u
  | I32_div_s -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I32_div_s)) = LS.parse32_empty in u
  | I32_mul -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I32_mul)) = LS.parse32_empty in u
  | I32_sub -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I32_sub)) = LS.parse32_empty in u
  | I32_add -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I32_add)) = LS.parse32_empty in u
  | I32_popcnt -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I32_popcnt)) = LS.parse32_empty in u
  | I32_ctz -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I32_ctz)) = LS.parse32_empty in u
  | I32_clz -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I32_clz)) = LS.parse32_empty in u
  | F64_ge -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases F64_ge)) = LS.parse32_empty in u
  | F64_le -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases F64_le)) = LS.parse32_empty in u
  | F64_gt -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases F64_gt)) = LS.parse32_empty in u
  | F64_lt -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases F64_lt)) = LS.parse32_empty in u
  | F64_ne -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases F64_ne)) = LS.parse32_empty in u
  | F64_eq -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases F64_eq)) = LS.parse32_empty in u
  | F32_ge -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases F32_ge)) = LS.parse32_empty in u
  | F32_le -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases F32_le)) = LS.parse32_empty in u
  | F32_gt -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases F32_gt)) = LS.parse32_empty in u
  | F32_lt -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases F32_lt)) = LS.parse32_empty in u
  | F32_ne -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases F32_ne)) = LS.parse32_empty in u
  | F32_eq -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases F32_eq)) = LS.parse32_empty in u
  | I64_ge_u -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I64_ge_u)) = LS.parse32_empty in u
  | I64_ge_s -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I64_ge_s)) = LS.parse32_empty in u
  | I64_le_u -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I64_le_u)) = LS.parse32_empty in u
  | I64_le_s -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I64_le_s)) = LS.parse32_empty in u
  | I64_gt_u -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I64_gt_u)) = LS.parse32_empty in u
  | I64_gt_s -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I64_gt_s)) = LS.parse32_empty in u
  | I64_lt_u -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I64_lt_u)) = LS.parse32_empty in u
  | I64_lt_s -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I64_lt_s)) = LS.parse32_empty in u
  | I64_ne -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I64_ne)) = LS.parse32_empty in u
  | I64_eq -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I64_eq)) = LS.parse32_empty in u
  | I64_eqz -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I64_eqz)) = LS.parse32_empty in u
  | I32_ge_u -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I32_ge_u)) = LS.parse32_empty in u
  | I32_ge_s -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I32_ge_s)) = LS.parse32_empty in u
  | I32_le_u -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I32_le_u)) = LS.parse32_empty in u
  | I32_le_s -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I32_le_s)) = LS.parse32_empty in u
  | I32_gt_u -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I32_gt_u)) = LS.parse32_empty in u
  | I32_gt_s -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I32_gt_s)) = LS.parse32_empty in u
  | I32_lt_u -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I32_lt_u)) = LS.parse32_empty in u
  | I32_lt_s -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I32_lt_s)) = LS.parse32_empty in u
  | I32_ne -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I32_ne)) = LS.parse32_empty in u
  | I32_eq -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I32_eq)) = LS.parse32_empty in u
  | I32_eqz -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases I32_eqz)) = LS.parse32_empty in u
  | Select_ -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases Select_)) = LS.parse32_empty in u
  | Drop -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases Drop)) = LS.parse32_empty in u
  | Ret -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases Ret)) = LS.parse32_empty in u
  | Nop -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases Nop)) = LS.parse32_empty in u
  | Unreachable -> [@inline_let] let u : LS.parser32 (dsnd (parse_instr_cases Unreachable)) = LS.parse32_empty in u
  | _ -> LS.parse32_false

inline_for_extraction noextract let serialize32_instr_cases (x:LP.sum_key instr_sum)
  : LS.serializer32 (serialize_instr_cases x) =
  match x with
  | Block -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases Block) = aux_block_serializer32 in u
  | Loop -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases Loop) = aux_loop_serializer32 in u
  | If_ -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases If_) = aux_if_serializer32 in u
  | Br -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases Br) = labelidx_serializer32 in u
  | Br_if -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases Br_if) = labelidx_serializer32 in u
  | Br_table -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases Br_table) = aux_br_table_serializer32 in u
  | Call -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases Call) = funcidx_serializer32 in u
  | Call_indirect -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases Call_indirect) = aux_call_indirect_serializer32 in u
  | Local_get -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases Local_get) = localidx_serializer32 in u
  | Local_set -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases Local_set) = localidx_serializer32 in u
  | Local_tee -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases Local_tee) = localidx_serializer32 in u
  | Global_get -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases Global_get) = globalidx_serializer32 in u
  | Global_set -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases Global_set) = globalidx_serializer32 in u
  | I32_load -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I32_load) = memarg_serializer32 in u
  | I64_load -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I64_load) = memarg_serializer32 in u
  | F32_load -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases F32_load) = memarg_serializer32 in u
  | F64_load -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases F64_load) = memarg_serializer32 in u
  | I32_load8_s -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I32_load8_s) = memarg_serializer32 in u
  | I32_load8_u -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I32_load8_u) = memarg_serializer32 in u
  | I32_load16_s -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I32_load16_s) = memarg_serializer32 in u
  | I32_load16_u -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I32_load16_u) = memarg_serializer32 in u
  | I64_load8_s -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I64_load8_s) = memarg_serializer32 in u
  | I64_load8_u -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I64_load8_u) = memarg_serializer32 in u
  | I64_load16_s -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I64_load16_s) = memarg_serializer32 in u
  | I64_load16_u -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I64_load16_u) = memarg_serializer32 in u
  | I64_load32_s -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I64_load32_s) = memarg_serializer32 in u
  | I64_load32_u -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I64_load32_u) = memarg_serializer32 in u
  | I32_store -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I32_store) = memarg_serializer32 in u
  | I64_store -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I64_store) = memarg_serializer32 in u
  | F32_store -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases F32_store) = memarg_serializer32 in u
  | F64_store -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases F64_store) = memarg_serializer32 in u
  | I32_store8 -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I32_store8) = memarg_serializer32 in u
  | I32_store16 -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I32_store16) = memarg_serializer32 in u
  | I64_store8 -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I64_store8) = memarg_serializer32 in u
  | I64_store16 -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I64_store16) = memarg_serializer32 in u
  | I64_store32 -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I64_store32) = memarg_serializer32 in u
  | Memory_size -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases Memory_size) = aux_constbyte0_serializer32 in u
  | Memory_grow -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases Memory_grow) = aux_constbyte0_serializer32 in u
  | I32_const -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I32_const) = LS.serialize32_u32 in u
  | I64_const -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I64_const) = LS.serialize32_u64 in u
  | F32_const -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases F32_const) = f32_serializer32 in u
  | F64_const -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases F64_const) = f64_serializer32 in u
  | End_of_contiguous_instructions -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases End_of_contiguous_instructions) = LS.serialize32_empty in u
  | F64_reinterpret_i64 -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases F64_reinterpret_i64) = LS.serialize32_empty in u
  | F32_reinterpret_i32 -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases F32_reinterpret_i32) = LS.serialize32_empty in u
  | I64_reinterpret_f64 -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I64_reinterpret_f64) = LS.serialize32_empty in u
  | I32_reinterpret_f32 -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I32_reinterpret_f32) = LS.serialize32_empty in u
  | F64_promote_f32 -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases F64_promote_f32) = LS.serialize32_empty in u
  | F64_convert_i64_u -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases F64_convert_i64_u) = LS.serialize32_empty in u
  | F64_convert_i64_s -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases F64_convert_i64_s) = LS.serialize32_empty in u
  | F64_convert_i32_u -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases F64_convert_i32_u) = LS.serialize32_empty in u
  | F64_convert_i32_s -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases F64_convert_i32_s) = LS.serialize32_empty in u
  | F32_demote_f64 -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases F32_demote_f64) = LS.serialize32_empty in u
  | F32_convert_i64_u -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases F32_convert_i64_u) = LS.serialize32_empty in u
  | F32_convert_i64_s -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases F32_convert_i64_s) = LS.serialize32_empty in u
  | F32_convert_i32_u -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases F32_convert_i32_u) = LS.serialize32_empty in u
  | F32_convert_i32_s -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases F32_convert_i32_s) = LS.serialize32_empty in u
  | I64_trunc_f64_u -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I64_trunc_f64_u) = LS.serialize32_empty in u
  | I64_trunc_f64_s -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I64_trunc_f64_s) = LS.serialize32_empty in u
  | I64_trunc_f32_u -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I64_trunc_f32_u) = LS.serialize32_empty in u
  | I64_trunc_f32_s -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I64_trunc_f32_s) = LS.serialize32_empty in u
  | I64_extend_i32_u -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I64_extend_i32_u) = LS.serialize32_empty in u
  | I64_extend_i32_s -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I64_extend_i32_s) = LS.serialize32_empty in u
  | I32_trunc_f64_u -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I32_trunc_f64_u) = LS.serialize32_empty in u
  | I32_trunc_f64_s -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I32_trunc_f64_s) = LS.serialize32_empty in u
  | I32_trunc_f32_u -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I32_trunc_f32_u) = LS.serialize32_empty in u
  | I32_trunc_f32_s -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I32_trunc_f32_s) = LS.serialize32_empty in u
  | I32_wrap_i64 -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I32_wrap_i64) = LS.serialize32_empty in u
  | F64_copysign -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases F64_copysign) = LS.serialize32_empty in u
  | F64_max -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases F64_max) = LS.serialize32_empty in u
  | F64_min -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases F64_min) = LS.serialize32_empty in u
  | F64_div -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases F64_div) = LS.serialize32_empty in u
  | F64_mul -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases F64_mul) = LS.serialize32_empty in u
  | F64_sub -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases F64_sub) = LS.serialize32_empty in u
  | F64_add -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases F64_add) = LS.serialize32_empty in u
  | F64_sqrt -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases F64_sqrt) = LS.serialize32_empty in u
  | F64_nearest -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases F64_nearest) = LS.serialize32_empty in u
  | F64_trunc -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases F64_trunc) = LS.serialize32_empty in u
  | F64_floor -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases F64_floor) = LS.serialize32_empty in u
  | F64_ceil -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases F64_ceil) = LS.serialize32_empty in u
  | F64_neg -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases F64_neg) = LS.serialize32_empty in u
  | F64_abs -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases F64_abs) = LS.serialize32_empty in u
  | F32_copysign -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases F32_copysign) = LS.serialize32_empty in u
  | F32_max -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases F32_max) = LS.serialize32_empty in u
  | F32_min -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases F32_min) = LS.serialize32_empty in u
  | F32_div -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases F32_div) = LS.serialize32_empty in u
  | F32_mul -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases F32_mul) = LS.serialize32_empty in u
  | F32_sub -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases F32_sub) = LS.serialize32_empty in u
  | F32_add -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases F32_add) = LS.serialize32_empty in u
  | F32_sqrt -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases F32_sqrt) = LS.serialize32_empty in u
  | F32_nearest -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases F32_nearest) = LS.serialize32_empty in u
  | F32_trunc -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases F32_trunc) = LS.serialize32_empty in u
  | F32_floor -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases F32_floor) = LS.serialize32_empty in u
  | F32_ceil -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases F32_ceil) = LS.serialize32_empty in u
  | F32_neg -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases F32_neg) = LS.serialize32_empty in u
  | F32_abs -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases F32_abs) = LS.serialize32_empty in u
  | I64_rotr -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I64_rotr) = LS.serialize32_empty in u
  | I64_rotl -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I64_rotl) = LS.serialize32_empty in u
  | I64_shr_u -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I64_shr_u) = LS.serialize32_empty in u
  | I64_shr_s -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I64_shr_s) = LS.serialize32_empty in u
  | I64_shl -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I64_shl) = LS.serialize32_empty in u
  | I64_xor -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I64_xor) = LS.serialize32_empty in u
  | I64_or -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I64_or) = LS.serialize32_empty in u
  | I64_and -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I64_and) = LS.serialize32_empty in u
  | I64_rem_u -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I64_rem_u) = LS.serialize32_empty in u
  | I64_rem_s -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I64_rem_s) = LS.serialize32_empty in u
  | I64_div_u -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I64_div_u) = LS.serialize32_empty in u
  | I64_div_s -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I64_div_s) = LS.serialize32_empty in u
  | I64_mul -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I64_mul) = LS.serialize32_empty in u
  | I64_sub -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I64_sub) = LS.serialize32_empty in u
  | I64_add -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I64_add) = LS.serialize32_empty in u
  | I64_popcnt -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I64_popcnt) = LS.serialize32_empty in u
  | I64_ctz -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I64_ctz) = LS.serialize32_empty in u
  | I64_clz -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I64_clz) = LS.serialize32_empty in u
  | I32_rotr -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I32_rotr) = LS.serialize32_empty in u
  | I32_rotl -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I32_rotl) = LS.serialize32_empty in u
  | I32_shr_u -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I32_shr_u) = LS.serialize32_empty in u
  | I32_shr_s -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I32_shr_s) = LS.serialize32_empty in u
  | I32_shl -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I32_shl) = LS.serialize32_empty in u
  | I32_xor -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I32_xor) = LS.serialize32_empty in u
  | I32_or -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I32_or) = LS.serialize32_empty in u
  | I32_and -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I32_and) = LS.serialize32_empty in u
  | I32_rem_u -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I32_rem_u) = LS.serialize32_empty in u
  | I32_rem_s -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I32_rem_s) = LS.serialize32_empty in u
  | I32_div_u -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I32_div_u) = LS.serialize32_empty in u
  | I32_div_s -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I32_div_s) = LS.serialize32_empty in u
  | I32_mul -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I32_mul) = LS.serialize32_empty in u
  | I32_sub -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I32_sub) = LS.serialize32_empty in u
  | I32_add -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I32_add) = LS.serialize32_empty in u
  | I32_popcnt -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I32_popcnt) = LS.serialize32_empty in u
  | I32_ctz -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I32_ctz) = LS.serialize32_empty in u
  | I32_clz -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I32_clz) = LS.serialize32_empty in u
  | F64_ge -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases F64_ge) = LS.serialize32_empty in u
  | F64_le -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases F64_le) = LS.serialize32_empty in u
  | F64_gt -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases F64_gt) = LS.serialize32_empty in u
  | F64_lt -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases F64_lt) = LS.serialize32_empty in u
  | F64_ne -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases F64_ne) = LS.serialize32_empty in u
  | F64_eq -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases F64_eq) = LS.serialize32_empty in u
  | F32_ge -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases F32_ge) = LS.serialize32_empty in u
  | F32_le -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases F32_le) = LS.serialize32_empty in u
  | F32_gt -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases F32_gt) = LS.serialize32_empty in u
  | F32_lt -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases F32_lt) = LS.serialize32_empty in u
  | F32_ne -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases F32_ne) = LS.serialize32_empty in u
  | F32_eq -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases F32_eq) = LS.serialize32_empty in u
  | I64_ge_u -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I64_ge_u) = LS.serialize32_empty in u
  | I64_ge_s -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I64_ge_s) = LS.serialize32_empty in u
  | I64_le_u -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I64_le_u) = LS.serialize32_empty in u
  | I64_le_s -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I64_le_s) = LS.serialize32_empty in u
  | I64_gt_u -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I64_gt_u) = LS.serialize32_empty in u
  | I64_gt_s -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I64_gt_s) = LS.serialize32_empty in u
  | I64_lt_u -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I64_lt_u) = LS.serialize32_empty in u
  | I64_lt_s -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I64_lt_s) = LS.serialize32_empty in u
  | I64_ne -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I64_ne) = LS.serialize32_empty in u
  | I64_eq -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I64_eq) = LS.serialize32_empty in u
  | I64_eqz -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I64_eqz) = LS.serialize32_empty in u
  | I32_ge_u -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I32_ge_u) = LS.serialize32_empty in u
  | I32_ge_s -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I32_ge_s) = LS.serialize32_empty in u
  | I32_le_u -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I32_le_u) = LS.serialize32_empty in u
  | I32_le_s -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I32_le_s) = LS.serialize32_empty in u
  | I32_gt_u -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I32_gt_u) = LS.serialize32_empty in u
  | I32_gt_s -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I32_gt_s) = LS.serialize32_empty in u
  | I32_lt_u -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I32_lt_u) = LS.serialize32_empty in u
  | I32_lt_s -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I32_lt_s) = LS.serialize32_empty in u
  | I32_ne -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I32_ne) = LS.serialize32_empty in u
  | I32_eq -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I32_eq) = LS.serialize32_empty in u
  | I32_eqz -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases I32_eqz) = LS.serialize32_empty in u
  | Select_ -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases Select_) = LS.serialize32_empty in u
  | Drop -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases Drop) = LS.serialize32_empty in u
  | Ret -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases Ret) = LS.serialize32_empty in u
  | Nop -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases Nop) = LS.serialize32_empty in u
  | Unreachable -> [@inline_let] let u : LS.serializer32 (serialize_instr_cases Unreachable) = LS.serialize32_empty in u
  | _ -> LS.serialize32_false

inline_for_extraction noextract let size32_instr_cases (x:LP.sum_key instr_sum)
  : LS.size32 (serialize_instr_cases x) =
  match x with
  | Block -> [@inline_let] let u : LS.size32 (serialize_instr_cases Block) = aux_block_size32 in u
  | Loop -> [@inline_let] let u : LS.size32 (serialize_instr_cases Loop) = aux_loop_size32 in u
  | If_ -> [@inline_let] let u : LS.size32 (serialize_instr_cases If_) = aux_if_size32 in u
  | Br -> [@inline_let] let u : LS.size32 (serialize_instr_cases Br) = labelidx_size32 in u
  | Br_if -> [@inline_let] let u : LS.size32 (serialize_instr_cases Br_if) = labelidx_size32 in u
  | Br_table -> [@inline_let] let u : LS.size32 (serialize_instr_cases Br_table) = aux_br_table_size32 in u
  | Call -> [@inline_let] let u : LS.size32 (serialize_instr_cases Call) = funcidx_size32 in u
  | Call_indirect -> [@inline_let] let u : LS.size32 (serialize_instr_cases Call_indirect) = aux_call_indirect_size32 in u
  | Local_get -> [@inline_let] let u : LS.size32 (serialize_instr_cases Local_get) = localidx_size32 in u
  | Local_set -> [@inline_let] let u : LS.size32 (serialize_instr_cases Local_set) = localidx_size32 in u
  | Local_tee -> [@inline_let] let u : LS.size32 (serialize_instr_cases Local_tee) = localidx_size32 in u
  | Global_get -> [@inline_let] let u : LS.size32 (serialize_instr_cases Global_get) = globalidx_size32 in u
  | Global_set -> [@inline_let] let u : LS.size32 (serialize_instr_cases Global_set) = globalidx_size32 in u
  | I32_load -> [@inline_let] let u : LS.size32 (serialize_instr_cases I32_load) = memarg_size32 in u
  | I64_load -> [@inline_let] let u : LS.size32 (serialize_instr_cases I64_load) = memarg_size32 in u
  | F32_load -> [@inline_let] let u : LS.size32 (serialize_instr_cases F32_load) = memarg_size32 in u
  | F64_load -> [@inline_let] let u : LS.size32 (serialize_instr_cases F64_load) = memarg_size32 in u
  | I32_load8_s -> [@inline_let] let u : LS.size32 (serialize_instr_cases I32_load8_s) = memarg_size32 in u
  | I32_load8_u -> [@inline_let] let u : LS.size32 (serialize_instr_cases I32_load8_u) = memarg_size32 in u
  | I32_load16_s -> [@inline_let] let u : LS.size32 (serialize_instr_cases I32_load16_s) = memarg_size32 in u
  | I32_load16_u -> [@inline_let] let u : LS.size32 (serialize_instr_cases I32_load16_u) = memarg_size32 in u
  | I64_load8_s -> [@inline_let] let u : LS.size32 (serialize_instr_cases I64_load8_s) = memarg_size32 in u
  | I64_load8_u -> [@inline_let] let u : LS.size32 (serialize_instr_cases I64_load8_u) = memarg_size32 in u
  | I64_load16_s -> [@inline_let] let u : LS.size32 (serialize_instr_cases I64_load16_s) = memarg_size32 in u
  | I64_load16_u -> [@inline_let] let u : LS.size32 (serialize_instr_cases I64_load16_u) = memarg_size32 in u
  | I64_load32_s -> [@inline_let] let u : LS.size32 (serialize_instr_cases I64_load32_s) = memarg_size32 in u
  | I64_load32_u -> [@inline_let] let u : LS.size32 (serialize_instr_cases I64_load32_u) = memarg_size32 in u
  | I32_store -> [@inline_let] let u : LS.size32 (serialize_instr_cases I32_store) = memarg_size32 in u
  | I64_store -> [@inline_let] let u : LS.size32 (serialize_instr_cases I64_store) = memarg_size32 in u
  | F32_store -> [@inline_let] let u : LS.size32 (serialize_instr_cases F32_store) = memarg_size32 in u
  | F64_store -> [@inline_let] let u : LS.size32 (serialize_instr_cases F64_store) = memarg_size32 in u
  | I32_store8 -> [@inline_let] let u : LS.size32 (serialize_instr_cases I32_store8) = memarg_size32 in u
  | I32_store16 -> [@inline_let] let u : LS.size32 (serialize_instr_cases I32_store16) = memarg_size32 in u
  | I64_store8 -> [@inline_let] let u : LS.size32 (serialize_instr_cases I64_store8) = memarg_size32 in u
  | I64_store16 -> [@inline_let] let u : LS.size32 (serialize_instr_cases I64_store16) = memarg_size32 in u
  | I64_store32 -> [@inline_let] let u : LS.size32 (serialize_instr_cases I64_store32) = memarg_size32 in u
  | Memory_size -> [@inline_let] let u : LS.size32 (serialize_instr_cases Memory_size) = aux_constbyte0_size32 in u
  | Memory_grow -> [@inline_let] let u : LS.size32 (serialize_instr_cases Memory_grow) = aux_constbyte0_size32 in u
  | I32_const -> [@inline_let] let u : LS.size32 (serialize_instr_cases I32_const) = LS.size32_u32 in u
  | I64_const -> [@inline_let] let u : LS.size32 (serialize_instr_cases I64_const) = LS.size32_u64 in u
  | F32_const -> [@inline_let] let u : LS.size32 (serialize_instr_cases F32_const) = f32_size32 in u
  | F64_const -> [@inline_let] let u : LS.size32 (serialize_instr_cases F64_const) = f64_size32 in u
  | End_of_contiguous_instructions -> [@inline_let] let u : LS.size32 (serialize_instr_cases End_of_contiguous_instructions) = LS.size32_empty in u
  | F64_reinterpret_i64 -> [@inline_let] let u : LS.size32 (serialize_instr_cases F64_reinterpret_i64) = LS.size32_empty in u
  | F32_reinterpret_i32 -> [@inline_let] let u : LS.size32 (serialize_instr_cases F32_reinterpret_i32) = LS.size32_empty in u
  | I64_reinterpret_f64 -> [@inline_let] let u : LS.size32 (serialize_instr_cases I64_reinterpret_f64) = LS.size32_empty in u
  | I32_reinterpret_f32 -> [@inline_let] let u : LS.size32 (serialize_instr_cases I32_reinterpret_f32) = LS.size32_empty in u
  | F64_promote_f32 -> [@inline_let] let u : LS.size32 (serialize_instr_cases F64_promote_f32) = LS.size32_empty in u
  | F64_convert_i64_u -> [@inline_let] let u : LS.size32 (serialize_instr_cases F64_convert_i64_u) = LS.size32_empty in u
  | F64_convert_i64_s -> [@inline_let] let u : LS.size32 (serialize_instr_cases F64_convert_i64_s) = LS.size32_empty in u
  | F64_convert_i32_u -> [@inline_let] let u : LS.size32 (serialize_instr_cases F64_convert_i32_u) = LS.size32_empty in u
  | F64_convert_i32_s -> [@inline_let] let u : LS.size32 (serialize_instr_cases F64_convert_i32_s) = LS.size32_empty in u
  | F32_demote_f64 -> [@inline_let] let u : LS.size32 (serialize_instr_cases F32_demote_f64) = LS.size32_empty in u
  | F32_convert_i64_u -> [@inline_let] let u : LS.size32 (serialize_instr_cases F32_convert_i64_u) = LS.size32_empty in u
  | F32_convert_i64_s -> [@inline_let] let u : LS.size32 (serialize_instr_cases F32_convert_i64_s) = LS.size32_empty in u
  | F32_convert_i32_u -> [@inline_let] let u : LS.size32 (serialize_instr_cases F32_convert_i32_u) = LS.size32_empty in u
  | F32_convert_i32_s -> [@inline_let] let u : LS.size32 (serialize_instr_cases F32_convert_i32_s) = LS.size32_empty in u
  | I64_trunc_f64_u -> [@inline_let] let u : LS.size32 (serialize_instr_cases I64_trunc_f64_u) = LS.size32_empty in u
  | I64_trunc_f64_s -> [@inline_let] let u : LS.size32 (serialize_instr_cases I64_trunc_f64_s) = LS.size32_empty in u
  | I64_trunc_f32_u -> [@inline_let] let u : LS.size32 (serialize_instr_cases I64_trunc_f32_u) = LS.size32_empty in u
  | I64_trunc_f32_s -> [@inline_let] let u : LS.size32 (serialize_instr_cases I64_trunc_f32_s) = LS.size32_empty in u
  | I64_extend_i32_u -> [@inline_let] let u : LS.size32 (serialize_instr_cases I64_extend_i32_u) = LS.size32_empty in u
  | I64_extend_i32_s -> [@inline_let] let u : LS.size32 (serialize_instr_cases I64_extend_i32_s) = LS.size32_empty in u
  | I32_trunc_f64_u -> [@inline_let] let u : LS.size32 (serialize_instr_cases I32_trunc_f64_u) = LS.size32_empty in u
  | I32_trunc_f64_s -> [@inline_let] let u : LS.size32 (serialize_instr_cases I32_trunc_f64_s) = LS.size32_empty in u
  | I32_trunc_f32_u -> [@inline_let] let u : LS.size32 (serialize_instr_cases I32_trunc_f32_u) = LS.size32_empty in u
  | I32_trunc_f32_s -> [@inline_let] let u : LS.size32 (serialize_instr_cases I32_trunc_f32_s) = LS.size32_empty in u
  | I32_wrap_i64 -> [@inline_let] let u : LS.size32 (serialize_instr_cases I32_wrap_i64) = LS.size32_empty in u
  | F64_copysign -> [@inline_let] let u : LS.size32 (serialize_instr_cases F64_copysign) = LS.size32_empty in u
  | F64_max -> [@inline_let] let u : LS.size32 (serialize_instr_cases F64_max) = LS.size32_empty in u
  | F64_min -> [@inline_let] let u : LS.size32 (serialize_instr_cases F64_min) = LS.size32_empty in u
  | F64_div -> [@inline_let] let u : LS.size32 (serialize_instr_cases F64_div) = LS.size32_empty in u
  | F64_mul -> [@inline_let] let u : LS.size32 (serialize_instr_cases F64_mul) = LS.size32_empty in u
  | F64_sub -> [@inline_let] let u : LS.size32 (serialize_instr_cases F64_sub) = LS.size32_empty in u
  | F64_add -> [@inline_let] let u : LS.size32 (serialize_instr_cases F64_add) = LS.size32_empty in u
  | F64_sqrt -> [@inline_let] let u : LS.size32 (serialize_instr_cases F64_sqrt) = LS.size32_empty in u
  | F64_nearest -> [@inline_let] let u : LS.size32 (serialize_instr_cases F64_nearest) = LS.size32_empty in u
  | F64_trunc -> [@inline_let] let u : LS.size32 (serialize_instr_cases F64_trunc) = LS.size32_empty in u
  | F64_floor -> [@inline_let] let u : LS.size32 (serialize_instr_cases F64_floor) = LS.size32_empty in u
  | F64_ceil -> [@inline_let] let u : LS.size32 (serialize_instr_cases F64_ceil) = LS.size32_empty in u
  | F64_neg -> [@inline_let] let u : LS.size32 (serialize_instr_cases F64_neg) = LS.size32_empty in u
  | F64_abs -> [@inline_let] let u : LS.size32 (serialize_instr_cases F64_abs) = LS.size32_empty in u
  | F32_copysign -> [@inline_let] let u : LS.size32 (serialize_instr_cases F32_copysign) = LS.size32_empty in u
  | F32_max -> [@inline_let] let u : LS.size32 (serialize_instr_cases F32_max) = LS.size32_empty in u
  | F32_min -> [@inline_let] let u : LS.size32 (serialize_instr_cases F32_min) = LS.size32_empty in u
  | F32_div -> [@inline_let] let u : LS.size32 (serialize_instr_cases F32_div) = LS.size32_empty in u
  | F32_mul -> [@inline_let] let u : LS.size32 (serialize_instr_cases F32_mul) = LS.size32_empty in u
  | F32_sub -> [@inline_let] let u : LS.size32 (serialize_instr_cases F32_sub) = LS.size32_empty in u
  | F32_add -> [@inline_let] let u : LS.size32 (serialize_instr_cases F32_add) = LS.size32_empty in u
  | F32_sqrt -> [@inline_let] let u : LS.size32 (serialize_instr_cases F32_sqrt) = LS.size32_empty in u
  | F32_nearest -> [@inline_let] let u : LS.size32 (serialize_instr_cases F32_nearest) = LS.size32_empty in u
  | F32_trunc -> [@inline_let] let u : LS.size32 (serialize_instr_cases F32_trunc) = LS.size32_empty in u
  | F32_floor -> [@inline_let] let u : LS.size32 (serialize_instr_cases F32_floor) = LS.size32_empty in u
  | F32_ceil -> [@inline_let] let u : LS.size32 (serialize_instr_cases F32_ceil) = LS.size32_empty in u
  | F32_neg -> [@inline_let] let u : LS.size32 (serialize_instr_cases F32_neg) = LS.size32_empty in u
  | F32_abs -> [@inline_let] let u : LS.size32 (serialize_instr_cases F32_abs) = LS.size32_empty in u
  | I64_rotr -> [@inline_let] let u : LS.size32 (serialize_instr_cases I64_rotr) = LS.size32_empty in u
  | I64_rotl -> [@inline_let] let u : LS.size32 (serialize_instr_cases I64_rotl) = LS.size32_empty in u
  | I64_shr_u -> [@inline_let] let u : LS.size32 (serialize_instr_cases I64_shr_u) = LS.size32_empty in u
  | I64_shr_s -> [@inline_let] let u : LS.size32 (serialize_instr_cases I64_shr_s) = LS.size32_empty in u
  | I64_shl -> [@inline_let] let u : LS.size32 (serialize_instr_cases I64_shl) = LS.size32_empty in u
  | I64_xor -> [@inline_let] let u : LS.size32 (serialize_instr_cases I64_xor) = LS.size32_empty in u
  | I64_or -> [@inline_let] let u : LS.size32 (serialize_instr_cases I64_or) = LS.size32_empty in u
  | I64_and -> [@inline_let] let u : LS.size32 (serialize_instr_cases I64_and) = LS.size32_empty in u
  | I64_rem_u -> [@inline_let] let u : LS.size32 (serialize_instr_cases I64_rem_u) = LS.size32_empty in u
  | I64_rem_s -> [@inline_let] let u : LS.size32 (serialize_instr_cases I64_rem_s) = LS.size32_empty in u
  | I64_div_u -> [@inline_let] let u : LS.size32 (serialize_instr_cases I64_div_u) = LS.size32_empty in u
  | I64_div_s -> [@inline_let] let u : LS.size32 (serialize_instr_cases I64_div_s) = LS.size32_empty in u
  | I64_mul -> [@inline_let] let u : LS.size32 (serialize_instr_cases I64_mul) = LS.size32_empty in u
  | I64_sub -> [@inline_let] let u : LS.size32 (serialize_instr_cases I64_sub) = LS.size32_empty in u
  | I64_add -> [@inline_let] let u : LS.size32 (serialize_instr_cases I64_add) = LS.size32_empty in u
  | I64_popcnt -> [@inline_let] let u : LS.size32 (serialize_instr_cases I64_popcnt) = LS.size32_empty in u
  | I64_ctz -> [@inline_let] let u : LS.size32 (serialize_instr_cases I64_ctz) = LS.size32_empty in u
  | I64_clz -> [@inline_let] let u : LS.size32 (serialize_instr_cases I64_clz) = LS.size32_empty in u
  | I32_rotr -> [@inline_let] let u : LS.size32 (serialize_instr_cases I32_rotr) = LS.size32_empty in u
  | I32_rotl -> [@inline_let] let u : LS.size32 (serialize_instr_cases I32_rotl) = LS.size32_empty in u
  | I32_shr_u -> [@inline_let] let u : LS.size32 (serialize_instr_cases I32_shr_u) = LS.size32_empty in u
  | I32_shr_s -> [@inline_let] let u : LS.size32 (serialize_instr_cases I32_shr_s) = LS.size32_empty in u
  | I32_shl -> [@inline_let] let u : LS.size32 (serialize_instr_cases I32_shl) = LS.size32_empty in u
  | I32_xor -> [@inline_let] let u : LS.size32 (serialize_instr_cases I32_xor) = LS.size32_empty in u
  | I32_or -> [@inline_let] let u : LS.size32 (serialize_instr_cases I32_or) = LS.size32_empty in u
  | I32_and -> [@inline_let] let u : LS.size32 (serialize_instr_cases I32_and) = LS.size32_empty in u
  | I32_rem_u -> [@inline_let] let u : LS.size32 (serialize_instr_cases I32_rem_u) = LS.size32_empty in u
  | I32_rem_s -> [@inline_let] let u : LS.size32 (serialize_instr_cases I32_rem_s) = LS.size32_empty in u
  | I32_div_u -> [@inline_let] let u : LS.size32 (serialize_instr_cases I32_div_u) = LS.size32_empty in u
  | I32_div_s -> [@inline_let] let u : LS.size32 (serialize_instr_cases I32_div_s) = LS.size32_empty in u
  | I32_mul -> [@inline_let] let u : LS.size32 (serialize_instr_cases I32_mul) = LS.size32_empty in u
  | I32_sub -> [@inline_let] let u : LS.size32 (serialize_instr_cases I32_sub) = LS.size32_empty in u
  | I32_add -> [@inline_let] let u : LS.size32 (serialize_instr_cases I32_add) = LS.size32_empty in u
  | I32_popcnt -> [@inline_let] let u : LS.size32 (serialize_instr_cases I32_popcnt) = LS.size32_empty in u
  | I32_ctz -> [@inline_let] let u : LS.size32 (serialize_instr_cases I32_ctz) = LS.size32_empty in u
  | I32_clz -> [@inline_let] let u : LS.size32 (serialize_instr_cases I32_clz) = LS.size32_empty in u
  | F64_ge -> [@inline_let] let u : LS.size32 (serialize_instr_cases F64_ge) = LS.size32_empty in u
  | F64_le -> [@inline_let] let u : LS.size32 (serialize_instr_cases F64_le) = LS.size32_empty in u
  | F64_gt -> [@inline_let] let u : LS.size32 (serialize_instr_cases F64_gt) = LS.size32_empty in u
  | F64_lt -> [@inline_let] let u : LS.size32 (serialize_instr_cases F64_lt) = LS.size32_empty in u
  | F64_ne -> [@inline_let] let u : LS.size32 (serialize_instr_cases F64_ne) = LS.size32_empty in u
  | F64_eq -> [@inline_let] let u : LS.size32 (serialize_instr_cases F64_eq) = LS.size32_empty in u
  | F32_ge -> [@inline_let] let u : LS.size32 (serialize_instr_cases F32_ge) = LS.size32_empty in u
  | F32_le -> [@inline_let] let u : LS.size32 (serialize_instr_cases F32_le) = LS.size32_empty in u
  | F32_gt -> [@inline_let] let u : LS.size32 (serialize_instr_cases F32_gt) = LS.size32_empty in u
  | F32_lt -> [@inline_let] let u : LS.size32 (serialize_instr_cases F32_lt) = LS.size32_empty in u
  | F32_ne -> [@inline_let] let u : LS.size32 (serialize_instr_cases F32_ne) = LS.size32_empty in u
  | F32_eq -> [@inline_let] let u : LS.size32 (serialize_instr_cases F32_eq) = LS.size32_empty in u
  | I64_ge_u -> [@inline_let] let u : LS.size32 (serialize_instr_cases I64_ge_u) = LS.size32_empty in u
  | I64_ge_s -> [@inline_let] let u : LS.size32 (serialize_instr_cases I64_ge_s) = LS.size32_empty in u
  | I64_le_u -> [@inline_let] let u : LS.size32 (serialize_instr_cases I64_le_u) = LS.size32_empty in u
  | I64_le_s -> [@inline_let] let u : LS.size32 (serialize_instr_cases I64_le_s) = LS.size32_empty in u
  | I64_gt_u -> [@inline_let] let u : LS.size32 (serialize_instr_cases I64_gt_u) = LS.size32_empty in u
  | I64_gt_s -> [@inline_let] let u : LS.size32 (serialize_instr_cases I64_gt_s) = LS.size32_empty in u
  | I64_lt_u -> [@inline_let] let u : LS.size32 (serialize_instr_cases I64_lt_u) = LS.size32_empty in u
  | I64_lt_s -> [@inline_let] let u : LS.size32 (serialize_instr_cases I64_lt_s) = LS.size32_empty in u
  | I64_ne -> [@inline_let] let u : LS.size32 (serialize_instr_cases I64_ne) = LS.size32_empty in u
  | I64_eq -> [@inline_let] let u : LS.size32 (serialize_instr_cases I64_eq) = LS.size32_empty in u
  | I64_eqz -> [@inline_let] let u : LS.size32 (serialize_instr_cases I64_eqz) = LS.size32_empty in u
  | I32_ge_u -> [@inline_let] let u : LS.size32 (serialize_instr_cases I32_ge_u) = LS.size32_empty in u
  | I32_ge_s -> [@inline_let] let u : LS.size32 (serialize_instr_cases I32_ge_s) = LS.size32_empty in u
  | I32_le_u -> [@inline_let] let u : LS.size32 (serialize_instr_cases I32_le_u) = LS.size32_empty in u
  | I32_le_s -> [@inline_let] let u : LS.size32 (serialize_instr_cases I32_le_s) = LS.size32_empty in u
  | I32_gt_u -> [@inline_let] let u : LS.size32 (serialize_instr_cases I32_gt_u) = LS.size32_empty in u
  | I32_gt_s -> [@inline_let] let u : LS.size32 (serialize_instr_cases I32_gt_s) = LS.size32_empty in u
  | I32_lt_u -> [@inline_let] let u : LS.size32 (serialize_instr_cases I32_lt_u) = LS.size32_empty in u
  | I32_lt_s -> [@inline_let] let u : LS.size32 (serialize_instr_cases I32_lt_s) = LS.size32_empty in u
  | I32_ne -> [@inline_let] let u : LS.size32 (serialize_instr_cases I32_ne) = LS.size32_empty in u
  | I32_eq -> [@inline_let] let u : LS.size32 (serialize_instr_cases I32_eq) = LS.size32_empty in u
  | I32_eqz -> [@inline_let] let u : LS.size32 (serialize_instr_cases I32_eqz) = LS.size32_empty in u
  | Select_ -> [@inline_let] let u : LS.size32 (serialize_instr_cases Select_) = LS.size32_empty in u
  | Drop -> [@inline_let] let u : LS.size32 (serialize_instr_cases Drop) = LS.size32_empty in u
  | Ret -> [@inline_let] let u : LS.size32 (serialize_instr_cases Ret) = LS.size32_empty in u
  | Nop -> [@inline_let] let u : LS.size32 (serialize_instr_cases Nop) = LS.size32_empty in u
  | Unreachable -> [@inline_let] let u : LS.size32 (serialize_instr_cases Unreachable) = LS.size32_empty in u
  | _ -> LS.size32_false

let instr_parser =
  assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);
  LP.parse_sum instr_sum aux_insn_label_repr_parser parse_instr_cases

let instr_serializer =
  assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);
  LP.serialize_sum instr_sum aux_insn_label_repr_serializer serialize_instr_cases

let instr_bytesize (x:instr) : GTot nat = Seq.length (instr_serializer x)

let instr_bytesize_eq x = ()

let instr_parser32 =
  assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);
  LS.parse32_sum2 instr_sum aux_insn_label_repr_parser aux_insn_label_repr_parser32 parse_instr_cases parse32_instr_cases (_ by (LP.enum_destr_tac aux_insn_label_enum)) (_ by (LP.maybe_enum_key_of_repr_tac aux_insn_label_enum))

let instr_serializer32 =
  assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);
  assert_norm (LS.serializer32_sum_gen_precond (LP.get_parser_kind aux_insn_label_repr_parser) (LP.weaken_parse_cases_kind instr_sum parse_instr_cases));
  LS.serialize32_sum2 instr_sum aux_insn_label_repr_serializer aux_insn_label_repr_serializer32 serialize_instr_cases serialize32_instr_cases (_ by (LP.dep_enum_destr_tac ())) (_ by (LP.enum_repr_of_key_tac aux_insn_label_enum)) ()

let instr_size32 =
  assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);
  assert_norm (LS.size32_sum_gen_precond (LP.get_parser_kind aux_insn_label_repr_parser) (LP.weaken_parse_cases_kind instr_sum parse_instr_cases));
  LS.size32_sum2 instr_sum aux_insn_label_repr_serializer aux_insn_label_repr_size32 serialize_instr_cases size32_instr_cases (_ by (LP.dep_enum_destr_tac ())) (_ by (LP.enum_repr_of_key_tac aux_insn_label_enum)) ()

let instr_bytesize_eqn_block x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_block x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_block x))) in assert (1 <= ln /\ ln <= 1));
  (aux_block_bytesize_eq (x))

let instr_bytesize_eqn_loop x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_loop x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_loop x))) in assert (1 <= ln /\ ln <= 1));
  (aux_loop_bytesize_eq (x))

let instr_bytesize_eqn_if_ x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_if_ x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_if_ x))) in assert (1 <= ln /\ ln <= 1));
  (aux_if_bytesize_eq (x))

let instr_bytesize_eqn_br x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_br x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_br x))) in assert (1 <= ln /\ ln <= 1));
  (labelidx_bytesize_eq (x))

let instr_bytesize_eqn_br_if x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_br_if x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_br_if x))) in assert (1 <= ln /\ ln <= 1));
  (labelidx_bytesize_eq (x))

let instr_bytesize_eqn_br_table x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_br_table x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_br_table x))) in assert (1 <= ln /\ ln <= 1));
  (aux_br_table_bytesize_eq (x))

let instr_bytesize_eqn_call x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_call x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_call x))) in assert (1 <= ln /\ ln <= 1));
  (funcidx_bytesize_eq (x))

let instr_bytesize_eqn_call_indirect x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_call_indirect x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_call_indirect x))) in assert (1 <= ln /\ ln <= 1));
  (aux_call_indirect_bytesize_eq (x))

let instr_bytesize_eqn_local_get x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_local_get x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_local_get x))) in assert (1 <= ln /\ ln <= 1));
  (localidx_bytesize_eq (x))

let instr_bytesize_eqn_local_set x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_local_set x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_local_set x))) in assert (1 <= ln /\ ln <= 1));
  (localidx_bytesize_eq (x))

let instr_bytesize_eqn_local_tee x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_local_tee x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_local_tee x))) in assert (1 <= ln /\ ln <= 1));
  (localidx_bytesize_eq (x))

let instr_bytesize_eqn_global_get x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_global_get x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_global_get x))) in assert (1 <= ln /\ ln <= 1));
  (globalidx_bytesize_eq (x))

let instr_bytesize_eqn_global_set x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_global_set x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_global_set x))) in assert (1 <= ln /\ ln <= 1));
  (globalidx_bytesize_eq (x))

let instr_bytesize_eqn_i32_load x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i32_load x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i32_load x))) in assert (1 <= ln /\ ln <= 1));
  (memarg_bytesize_eq (x))

let instr_bytesize_eqn_i64_load x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i64_load x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i64_load x))) in assert (1 <= ln /\ ln <= 1));
  (memarg_bytesize_eq (x))

let instr_bytesize_eqn_f32_load x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_f32_load x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_f32_load x))) in assert (1 <= ln /\ ln <= 1));
  (memarg_bytesize_eq (x))

let instr_bytesize_eqn_f64_load x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_f64_load x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_f64_load x))) in assert (1 <= ln /\ ln <= 1));
  (memarg_bytesize_eq (x))

let instr_bytesize_eqn_i32_load8_s x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i32_load8_s x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i32_load8_s x))) in assert (1 <= ln /\ ln <= 1));
  (memarg_bytesize_eq (x))

let instr_bytesize_eqn_i32_load8_u x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i32_load8_u x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i32_load8_u x))) in assert (1 <= ln /\ ln <= 1));
  (memarg_bytesize_eq (x))

let instr_bytesize_eqn_i32_load16_s x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i32_load16_s x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i32_load16_s x))) in assert (1 <= ln /\ ln <= 1));
  (memarg_bytesize_eq (x))

let instr_bytesize_eqn_i32_load16_u x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i32_load16_u x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i32_load16_u x))) in assert (1 <= ln /\ ln <= 1));
  (memarg_bytesize_eq (x))

let instr_bytesize_eqn_i64_load8_s x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i64_load8_s x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i64_load8_s x))) in assert (1 <= ln /\ ln <= 1));
  (memarg_bytesize_eq (x))

let instr_bytesize_eqn_i64_load8_u x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i64_load8_u x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i64_load8_u x))) in assert (1 <= ln /\ ln <= 1));
  (memarg_bytesize_eq (x))

let instr_bytesize_eqn_i64_load16_s x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i64_load16_s x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i64_load16_s x))) in assert (1 <= ln /\ ln <= 1));
  (memarg_bytesize_eq (x))

let instr_bytesize_eqn_i64_load16_u x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i64_load16_u x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i64_load16_u x))) in assert (1 <= ln /\ ln <= 1));
  (memarg_bytesize_eq (x))

let instr_bytesize_eqn_i64_load32_s x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i64_load32_s x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i64_load32_s x))) in assert (1 <= ln /\ ln <= 1));
  (memarg_bytesize_eq (x))

let instr_bytesize_eqn_i64_load32_u x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i64_load32_u x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i64_load32_u x))) in assert (1 <= ln /\ ln <= 1));
  (memarg_bytesize_eq (x))

let instr_bytesize_eqn_i32_store x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i32_store x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i32_store x))) in assert (1 <= ln /\ ln <= 1));
  (memarg_bytesize_eq (x))

let instr_bytesize_eqn_i64_store x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i64_store x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i64_store x))) in assert (1 <= ln /\ ln <= 1));
  (memarg_bytesize_eq (x))

let instr_bytesize_eqn_f32_store x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_f32_store x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_f32_store x))) in assert (1 <= ln /\ ln <= 1));
  (memarg_bytesize_eq (x))

let instr_bytesize_eqn_f64_store x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_f64_store x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_f64_store x))) in assert (1 <= ln /\ ln <= 1));
  (memarg_bytesize_eq (x))

let instr_bytesize_eqn_i32_store8 x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i32_store8 x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i32_store8 x))) in assert (1 <= ln /\ ln <= 1));
  (memarg_bytesize_eq (x))

let instr_bytesize_eqn_i32_store16 x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i32_store16 x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i32_store16 x))) in assert (1 <= ln /\ ln <= 1));
  (memarg_bytesize_eq (x))

let instr_bytesize_eqn_i64_store8 x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i64_store8 x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i64_store8 x))) in assert (1 <= ln /\ ln <= 1));
  (memarg_bytesize_eq (x))

let instr_bytesize_eqn_i64_store16 x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i64_store16 x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i64_store16 x))) in assert (1 <= ln /\ ln <= 1));
  (memarg_bytesize_eq (x))

let instr_bytesize_eqn_i64_store32 x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i64_store32 x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i64_store32 x))) in assert (1 <= ln /\ ln <= 1));
  (memarg_bytesize_eq (x))

let instr_bytesize_eqn_memory_size x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_memory_size x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_memory_size x))) in assert (1 <= ln /\ ln <= 1));
  (aux_constbyte0_bytesize_eq (x))

let instr_bytesize_eqn_memory_grow x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_memory_grow x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_memory_grow x))) in assert (1 <= ln /\ ln <= 1));
  (aux_constbyte0_bytesize_eq (x))

let instr_bytesize_eqn_i32_const x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i32_const x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i32_const x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_u32 (x)) == 4))

let instr_bytesize_eqn_i64_const x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i64_const x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i64_const x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_u64 (x)) == 8))

let instr_bytesize_eqn_f32_const x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_f32_const x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_f32_const x))) in assert (1 <= ln /\ ln <= 1));
  (f32_bytesize_eq (x))

let instr_bytesize_eqn_f64_const x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_f64_const x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_f64_const x))) in assert (1 <= ln /\ ln <= 1));
  (f64_bytesize_eq (x))

let instr_bytesize_eqn_end_of_contiguous_instructions x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_end_of_contiguous_instructions x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_end_of_contiguous_instructions x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_f64_reinterpret_i64 x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_f64_reinterpret_i64 x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_f64_reinterpret_i64 x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_f32_reinterpret_i32 x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_f32_reinterpret_i32 x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_f32_reinterpret_i32 x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_i64_reinterpret_f64 x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i64_reinterpret_f64 x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i64_reinterpret_f64 x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_i32_reinterpret_f32 x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i32_reinterpret_f32 x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i32_reinterpret_f32 x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_f64_promote_f32 x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_f64_promote_f32 x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_f64_promote_f32 x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_f64_convert_i64_u x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_f64_convert_i64_u x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_f64_convert_i64_u x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_f64_convert_i64_s x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_f64_convert_i64_s x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_f64_convert_i64_s x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_f64_convert_i32_u x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_f64_convert_i32_u x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_f64_convert_i32_u x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_f64_convert_i32_s x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_f64_convert_i32_s x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_f64_convert_i32_s x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_f32_demote_f64 x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_f32_demote_f64 x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_f32_demote_f64 x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_f32_convert_i64_u x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_f32_convert_i64_u x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_f32_convert_i64_u x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_f32_convert_i64_s x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_f32_convert_i64_s x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_f32_convert_i64_s x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_f32_convert_i32_u x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_f32_convert_i32_u x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_f32_convert_i32_u x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_f32_convert_i32_s x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_f32_convert_i32_s x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_f32_convert_i32_s x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_i64_trunc_f64_u x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i64_trunc_f64_u x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i64_trunc_f64_u x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_i64_trunc_f64_s x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i64_trunc_f64_s x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i64_trunc_f64_s x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_i64_trunc_f32_u x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i64_trunc_f32_u x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i64_trunc_f32_u x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_i64_trunc_f32_s x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i64_trunc_f32_s x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i64_trunc_f32_s x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_i64_extend_i32_u x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i64_extend_i32_u x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i64_extend_i32_u x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_i64_extend_i32_s x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i64_extend_i32_s x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i64_extend_i32_s x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_i32_trunc_f64_u x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i32_trunc_f64_u x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i32_trunc_f64_u x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_i32_trunc_f64_s x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i32_trunc_f64_s x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i32_trunc_f64_s x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_i32_trunc_f32_u x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i32_trunc_f32_u x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i32_trunc_f32_u x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_i32_trunc_f32_s x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i32_trunc_f32_s x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i32_trunc_f32_s x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_i32_wrap_i64 x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i32_wrap_i64 x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i32_wrap_i64 x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_f64_copysign x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_f64_copysign x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_f64_copysign x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_f64_max x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_f64_max x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_f64_max x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_f64_min x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_f64_min x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_f64_min x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_f64_div x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_f64_div x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_f64_div x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_f64_mul x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_f64_mul x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_f64_mul x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_f64_sub x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_f64_sub x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_f64_sub x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_f64_add x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_f64_add x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_f64_add x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_f64_sqrt x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_f64_sqrt x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_f64_sqrt x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_f64_nearest x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_f64_nearest x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_f64_nearest x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_f64_trunc x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_f64_trunc x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_f64_trunc x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_f64_floor x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_f64_floor x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_f64_floor x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_f64_ceil x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_f64_ceil x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_f64_ceil x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_f64_neg x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_f64_neg x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_f64_neg x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_f64_abs x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_f64_abs x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_f64_abs x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_f32_copysign x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_f32_copysign x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_f32_copysign x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_f32_max x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_f32_max x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_f32_max x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_f32_min x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_f32_min x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_f32_min x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_f32_div x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_f32_div x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_f32_div x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_f32_mul x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_f32_mul x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_f32_mul x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_f32_sub x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_f32_sub x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_f32_sub x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_f32_add x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_f32_add x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_f32_add x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_f32_sqrt x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_f32_sqrt x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_f32_sqrt x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_f32_nearest x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_f32_nearest x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_f32_nearest x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_f32_trunc x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_f32_trunc x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_f32_trunc x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_f32_floor x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_f32_floor x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_f32_floor x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_f32_ceil x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_f32_ceil x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_f32_ceil x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_f32_neg x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_f32_neg x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_f32_neg x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_f32_abs x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_f32_abs x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_f32_abs x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_i64_rotr x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i64_rotr x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i64_rotr x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_i64_rotl x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i64_rotl x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i64_rotl x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_i64_shr_u x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i64_shr_u x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i64_shr_u x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_i64_shr_s x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i64_shr_s x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i64_shr_s x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_i64_shl x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i64_shl x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i64_shl x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_i64_xor x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i64_xor x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i64_xor x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_i64_or x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i64_or x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i64_or x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_i64_and x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i64_and x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i64_and x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_i64_rem_u x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i64_rem_u x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i64_rem_u x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_i64_rem_s x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i64_rem_s x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i64_rem_s x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_i64_div_u x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i64_div_u x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i64_div_u x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_i64_div_s x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i64_div_s x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i64_div_s x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_i64_mul x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i64_mul x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i64_mul x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_i64_sub x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i64_sub x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i64_sub x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_i64_add x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i64_add x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i64_add x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_i64_popcnt x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i64_popcnt x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i64_popcnt x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_i64_ctz x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i64_ctz x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i64_ctz x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_i64_clz x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i64_clz x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i64_clz x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_i32_rotr x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i32_rotr x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i32_rotr x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_i32_rotl x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i32_rotl x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i32_rotl x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_i32_shr_u x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i32_shr_u x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i32_shr_u x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_i32_shr_s x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i32_shr_s x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i32_shr_s x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_i32_shl x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i32_shl x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i32_shl x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_i32_xor x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i32_xor x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i32_xor x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_i32_or x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i32_or x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i32_or x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_i32_and x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i32_and x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i32_and x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_i32_rem_u x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i32_rem_u x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i32_rem_u x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_i32_rem_s x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i32_rem_s x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i32_rem_s x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_i32_div_u x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i32_div_u x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i32_div_u x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_i32_div_s x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i32_div_s x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i32_div_s x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_i32_mul x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i32_mul x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i32_mul x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_i32_sub x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i32_sub x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i32_sub x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_i32_add x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i32_add x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i32_add x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_i32_popcnt x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i32_popcnt x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i32_popcnt x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_i32_ctz x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i32_ctz x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i32_ctz x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_i32_clz x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i32_clz x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i32_clz x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_f64_ge x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_f64_ge x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_f64_ge x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_f64_le x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_f64_le x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_f64_le x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_f64_gt x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_f64_gt x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_f64_gt x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_f64_lt x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_f64_lt x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_f64_lt x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_f64_ne x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_f64_ne x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_f64_ne x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_f64_eq x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_f64_eq x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_f64_eq x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_f32_ge x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_f32_ge x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_f32_ge x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_f32_le x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_f32_le x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_f32_le x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_f32_gt x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_f32_gt x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_f32_gt x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_f32_lt x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_f32_lt x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_f32_lt x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_f32_ne x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_f32_ne x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_f32_ne x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_f32_eq x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_f32_eq x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_f32_eq x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_i64_ge_u x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i64_ge_u x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i64_ge_u x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_i64_ge_s x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i64_ge_s x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i64_ge_s x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_i64_le_u x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i64_le_u x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i64_le_u x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_i64_le_s x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i64_le_s x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i64_le_s x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_i64_gt_u x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i64_gt_u x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i64_gt_u x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_i64_gt_s x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i64_gt_s x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i64_gt_s x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_i64_lt_u x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i64_lt_u x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i64_lt_u x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_i64_lt_s x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i64_lt_s x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i64_lt_s x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_i64_ne x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i64_ne x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i64_ne x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_i64_eq x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i64_eq x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i64_eq x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_i64_eqz x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i64_eqz x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i64_eqz x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_i32_ge_u x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i32_ge_u x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i32_ge_u x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_i32_ge_s x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i32_ge_s x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i32_ge_s x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_i32_le_u x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i32_le_u x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i32_le_u x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_i32_le_s x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i32_le_s x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i32_le_s x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_i32_gt_u x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i32_gt_u x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i32_gt_u x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_i32_gt_s x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i32_gt_s x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i32_gt_s x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_i32_lt_u x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i32_lt_u x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i32_lt_u x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_i32_lt_s x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i32_lt_s x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i32_lt_s x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_i32_ne x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i32_ne x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i32_ne x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_i32_eq x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i32_eq x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i32_eq x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_i32_eqz x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_i32_eqz x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_i32_eqz x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_select_ x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_select_ x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_select_ x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_drop x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_drop x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_drop x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_ret x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_ret x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_ret x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_nop x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_nop x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_nop x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

let instr_bytesize_eqn_unreachable x =
    assert_norm (LP.parse_sum_kind (LP.get_parser_kind aux_insn_label_repr_parser) instr_sum parse_instr_cases == instr_parser_kind);

  LP.serialize_sum_eq instr_sum aux_insn_label_repr_serializer serialize_instr_cases (Rest_unreachable x);
  (let ln = FStar.Seq.length (LP.serialize (LP.serialize_enum_key _ aux_insn_label_repr_serializer (LP.sum_enum instr_sum)) (key_of_instr (Rest_unreachable x))) in assert (1 <= ln /\ ln <= 1));
  (assert (FStar.Seq.length (LP.serialize LP.serialize_empty (x)) == 0))

