module Wasm.Parse.Tabletype

(* This file has been automatically generated by EverParse. *)
open FStar.Bytes
module U8 = FStar.UInt8
module U16 = FStar.UInt16
module U32 = FStar.UInt32
module U64 = FStar.UInt64
module LP = LowParse.Spec.Base
module LS = LowParse.SLow.Base
module LPI = LowParse.Spec.AllIntegers
module L = FStar.List.Tot
module BY = FStar.Bytes

open Wasm.Parse.Elemtype
open Wasm.Parse.Limits

type tabletype = {
  et : elemtype;
  lim : limits;
}

inline_for_extraction noextract let tabletype_parser_kind = LP.strong_parser_kind 6 10 None

noextract val tabletype_parser: LP.parser tabletype_parser_kind tabletype

noextract val tabletype_serializer: LP.serializer tabletype_parser

noextract val tabletype_bytesize (x:tabletype) : GTot nat

noextract val tabletype_bytesize_eq (x:tabletype) : Lemma (tabletype_bytesize x == Seq.length (LP.serialize tabletype_serializer x))

val tabletype_parser32: LS.parser32 tabletype_parser

val tabletype_serializer32: LS.serializer32 tabletype_serializer

val tabletype_size32: LS.size32 tabletype_serializer

val tabletype_bytesize_eqn (x: tabletype) : Lemma (tabletype_bytesize x == (elemtype_bytesize (x.et)) + (limits_bytesize (x.lim))) [SMTPat (tabletype_bytesize x)]

