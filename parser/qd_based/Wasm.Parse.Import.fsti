module Wasm.Parse.Import

(* This file has been automatically generated by EverParse. *)
open FStar.Bytes
module U8 = FStar.UInt8
module U16 = FStar.UInt16
module U32 = FStar.UInt32
module U64 = FStar.UInt64
module LP = LowParse.Spec.Base
module LS = LowParse.SLow.Base
module LPI = LowParse.Spec.AllIntegers
module L = FStar.List.Tot
module BY = FStar.Bytes

open Wasm.Parse.Name
open Wasm.Parse.Importdesc

type import = {
  modu : name;
  nm : name;
  d : importdesc;
}

inline_for_extraction noextract let import_parser_kind = LP.strong_parser_kind 11 529 None

noextract val import_parser: LP.parser import_parser_kind import

noextract val import_serializer: LP.serializer import_parser

noextract val import_bytesize (x:import) : GTot nat

noextract val import_bytesize_eq (x:import) : Lemma (import_bytesize x == Seq.length (LP.serialize import_serializer x))

val import_parser32: LS.parser32 import_parser

val import_serializer32: LS.serializer32 import_serializer

val import_size32: LS.size32 import_serializer

val import_bytesize_eqn (x: import) : Lemma (import_bytesize x == (name_bytesize (x.modu)) + (name_bytesize (x.nm)) + (importdesc_bytesize (x.d))) [SMTPat (import_bytesize x)]

