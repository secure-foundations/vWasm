module Wasm.Parse.Elemtype

(* This file has been automatically generated by EverParse. *)
open FStar.Bytes
module U8 = FStar.UInt8
module U16 = FStar.UInt16
module U32 = FStar.UInt32
module U64 = FStar.UInt64
module LP = LowParse.Spec.Base
module LS = LowParse.SLow.Base
module LPI = LowParse.Spec.AllIntegers
module L = FStar.List.Tot
module BY = FStar.Bytes


type elemtype =
  | Funcref

let string_of_elemtype = function
  | Funcref -> "funcref"

inline_for_extraction noextract let elemtype_parser_kind = LP.strong_parser_kind 1 1 None

noextract val elemtype_parser: LP.parser elemtype_parser_kind elemtype

noextract val elemtype_serializer: LP.serializer elemtype_parser

noextract val elemtype_bytesize (x:elemtype) : GTot nat

noextract val elemtype_bytesize_eq (x:elemtype) : Lemma (elemtype_bytesize x == Seq.length (LP.serialize elemtype_serializer x))

val elemtype_parser32: LS.parser32 elemtype_parser

val elemtype_serializer32: LS.serializer32 elemtype_serializer

val elemtype_size32: LS.size32 elemtype_serializer

