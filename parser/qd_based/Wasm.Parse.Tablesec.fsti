module Wasm.Parse.Tablesec

(* This file has been automatically generated by EverParse. *)
open FStar.Bytes
module U8 = FStar.UInt8
module U16 = FStar.UInt16
module U32 = FStar.UInt32
module U64 = FStar.UInt64
module LP = LowParse.Spec.Base
module LS = LowParse.SLow.Base
module LPI = LowParse.Spec.AllIntegers
module L = FStar.List.Tot
module BY = FStar.Bytes

open Wasm.Parse.Aux_section_const4
open Wasm.Parse.Aux_constbyte0
open Wasm.Parse.Aux_vectable

(* Type of field cont*)
include Wasm.Parse.Tablesec_cont

type tablesec = {
  n : aux_section_const4;
  aux_ignore_byte : aux_constbyte0;
  cont : tablesec_cont;
}

inline_for_extraction noextract let tablesec_parser_kind = LP.strong_parser_kind 9 16777220 None

noextract val tablesec_parser: LP.parser tablesec_parser_kind tablesec

noextract val tablesec_serializer: LP.serializer tablesec_parser

noextract val tablesec_bytesize (x:tablesec) : GTot nat

noextract val tablesec_bytesize_eq (x:tablesec) : Lemma (tablesec_bytesize x == Seq.length (LP.serialize tablesec_serializer x))

val tablesec_parser32: LS.parser32 tablesec_parser

val tablesec_serializer32: LS.serializer32 tablesec_serializer

val tablesec_size32: LS.size32 tablesec_serializer

val tablesec_bytesize_eqn (x: tablesec) : Lemma (tablesec_bytesize x == (aux_section_const4_bytesize (x.n)) + (aux_constbyte0_bytesize (x.aux_ignore_byte)) + (tablesec_cont_bytesize (x.cont))) [SMTPat (tablesec_bytesize x)]

