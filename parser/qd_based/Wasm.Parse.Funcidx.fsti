module Wasm.Parse.Funcidx

(* This file has been automatically generated by EverParse. *)
open FStar.Bytes
module U8 = FStar.UInt8
module U16 = FStar.UInt16
module U32 = FStar.UInt32
module U64 = FStar.UInt64
module LP = LowParse.Spec.Base
module LS = LowParse.SLow.Base
module LPI = LowParse.Spec.AllIntegers
module L = FStar.List.Tot
module BY = FStar.Bytes


type funcidx = U32.t

inline_for_extraction noextract let funcidx_parser_kind = LP.strong_parser_kind 4 4 (Some LP.ParserKindMetadataTotal)

noextract val funcidx_parser: LP.parser funcidx_parser_kind funcidx

noextract val funcidx_serializer: LP.serializer funcidx_parser

noextract val funcidx_bytesize (x:funcidx) : GTot nat

noextract val funcidx_bytesize_eq (x:funcidx) : Lemma (funcidx_bytesize x == Seq.length (LP.serialize funcidx_serializer x))

val funcidx_parser32: LS.parser32 funcidx_parser

val funcidx_serializer32: LS.serializer32 funcidx_serializer

val funcidx_size32: LS.size32 funcidx_serializer

val funcidx_bytesize_eqn (x: funcidx) : Lemma (funcidx_bytesize x == 4) [SMTPat (funcidx_bytesize x)]

val funcidx_parser_serializer_eq (_: unit) : Lemma (funcidx_parser == LPI.parse_u32 /\ funcidx_serializer == LPI.serialize_u32)

