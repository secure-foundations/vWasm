module Wasm.Parse.Memtype

(* This file has been automatically generated by EverParse. *)
open FStar.Bytes
module U8 = FStar.UInt8
module U16 = FStar.UInt16
module U32 = FStar.UInt32
module U64 = FStar.UInt64
module LP = LowParse.Spec.Base
module LS = LowParse.SLow.Base
module LPI = LowParse.Spec.AllIntegers
module L = FStar.List.Tot
module BY = FStar.Bytes

open Wasm.Parse.Limits

type memtype = limits

inline_for_extraction noextract let memtype_parser_kind = LP.strong_parser_kind 5 9 None

noextract val memtype_parser: LP.parser memtype_parser_kind memtype

noextract val memtype_serializer: LP.serializer memtype_parser

noextract val memtype_bytesize (x:memtype) : GTot nat

noextract val memtype_bytesize_eq (x:memtype) : Lemma (memtype_bytesize x == Seq.length (LP.serialize memtype_serializer x))

val memtype_parser32: LS.parser32 memtype_parser

val memtype_serializer32: LS.serializer32 memtype_serializer

val memtype_size32: LS.size32 memtype_serializer

val memtype_bytesize_eqn (x: memtype) : Lemma (memtype_bytesize x == (limits_bytesize (x))) [SMTPat (memtype_bytesize x)]

val memtype_parser_serializer_eq (_: unit) : Lemma (memtype_parser == limits_parser /\ memtype_serializer == limits_serializer)

