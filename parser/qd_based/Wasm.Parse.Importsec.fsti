module Wasm.Parse.Importsec

(* This file has been automatically generated by EverParse. *)
open FStar.Bytes
module U8 = FStar.UInt8
module U16 = FStar.UInt16
module U32 = FStar.UInt32
module U64 = FStar.UInt64
module LP = LowParse.Spec.Base
module LS = LowParse.SLow.Base
module LPI = LowParse.Spec.AllIntegers
module L = FStar.List.Tot
module BY = FStar.Bytes

open Wasm.Parse.Aux_section_const2
open Wasm.Parse.Aux_constbyte0
open Wasm.Parse.Aux_vecimport

(* Type of field cont*)
include Wasm.Parse.Importsec_cont

type importsec = {
  n : aux_section_const2;
  aux_ignore_byte : aux_constbyte0;
  cont : importsec_cont;
}

inline_for_extraction noextract let importsec_parser_kind = LP.strong_parser_kind 9 16777220 None

noextract val importsec_parser: LP.parser importsec_parser_kind importsec

noextract val importsec_serializer: LP.serializer importsec_parser

noextract val importsec_bytesize (x:importsec) : GTot nat

noextract val importsec_bytesize_eq (x:importsec) : Lemma (importsec_bytesize x == Seq.length (LP.serialize importsec_serializer x))

val importsec_parser32: LS.parser32 importsec_parser

val importsec_serializer32: LS.serializer32 importsec_serializer

val importsec_size32: LS.size32 importsec_serializer

val importsec_bytesize_eqn (x: importsec) : Lemma (importsec_bytesize x == (aux_section_const2_bytesize (x.n)) + (aux_constbyte0_bytesize (x.aux_ignore_byte)) + (importsec_cont_bytesize (x.cont))) [SMTPat (importsec_bytesize x)]

