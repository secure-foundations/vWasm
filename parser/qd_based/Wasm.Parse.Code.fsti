module Wasm.Parse.Code

(* This file has been automatically generated by EverParse. *)
open FStar.Bytes
module U8 = FStar.UInt8
module U16 = FStar.UInt16
module U32 = FStar.UInt32
module U64 = FStar.UInt64
module LP = LowParse.Spec.Base
module LS = LowParse.SLow.Base
module LPI = LowParse.Spec.AllIntegers
module L = FStar.List.Tot
module BY = FStar.Bytes

open Wasm.Parse.Func

type code = {
  size : U32.t;
  code_ : func;
}

inline_for_extraction noextract let code_parser_kind = LP.strong_parser_kind 11 1048741 None

noextract val code_parser: LP.parser code_parser_kind code

noextract val code_serializer: LP.serializer code_parser

noextract val code_bytesize (x:code) : GTot nat

noextract val code_bytesize_eq (x:code) : Lemma (code_bytesize x == Seq.length (LP.serialize code_serializer x))

val code_parser32: LS.parser32 code_parser

val code_serializer32: LS.serializer32 code_serializer

val code_size32: LS.size32 code_serializer

val code_bytesize_eqn (x: code) : Lemma (code_bytesize x == 4 + (func_bytesize (x.code_))) [SMTPat (code_bytesize x)]

