module Wasm.Parse.Start

(* This file has been automatically generated by EverParse. *)
open FStar.Bytes
module U8 = FStar.UInt8
module U16 = FStar.UInt16
module U32 = FStar.UInt32
module U64 = FStar.UInt64
module LP = LowParse.Spec.Base
module LS = LowParse.SLow.Base
module LPI = LowParse.Spec.AllIntegers
module L = FStar.List.Tot
module BY = FStar.Bytes

open Wasm.Parse.Funcidx

type start = funcidx

inline_for_extraction noextract let start_parser_kind = LP.strong_parser_kind 4 4 (Some LP.ParserKindMetadataTotal)

noextract val start_parser: LP.parser start_parser_kind start

noextract val start_serializer: LP.serializer start_parser

noextract val start_bytesize (x:start) : GTot nat

noextract val start_bytesize_eq (x:start) : Lemma (start_bytesize x == Seq.length (LP.serialize start_serializer x))

val start_parser32: LS.parser32 start_parser

val start_serializer32: LS.serializer32 start_serializer

val start_size32: LS.size32 start_serializer

val start_bytesize_eqn (x: start) : Lemma (start_bytesize x == (funcidx_bytesize (x))) [SMTPat (start_bytesize x)]

val start_parser_serializer_eq (_: unit) : Lemma (start_parser == funcidx_parser /\ start_serializer == funcidx_serializer)

