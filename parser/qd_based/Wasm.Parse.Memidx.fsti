module Wasm.Parse.Memidx

(* This file has been automatically generated by EverParse. *)
open FStar.Bytes
module U8 = FStar.UInt8
module U16 = FStar.UInt16
module U32 = FStar.UInt32
module U64 = FStar.UInt64
module LP = LowParse.Spec.Base
module LS = LowParse.SLow.Base
module LPI = LowParse.Spec.AllIntegers
module L = FStar.List.Tot
module BY = FStar.Bytes


type memidx = U32.t

inline_for_extraction noextract let memidx_parser_kind = LP.strong_parser_kind 4 4 (Some LP.ParserKindMetadataTotal)

noextract val memidx_parser: LP.parser memidx_parser_kind memidx

noextract val memidx_serializer: LP.serializer memidx_parser

noextract val memidx_bytesize (x:memidx) : GTot nat

noextract val memidx_bytesize_eq (x:memidx) : Lemma (memidx_bytesize x == Seq.length (LP.serialize memidx_serializer x))

val memidx_parser32: LS.parser32 memidx_parser

val memidx_serializer32: LS.serializer32 memidx_serializer

val memidx_size32: LS.size32 memidx_serializer

val memidx_bytesize_eqn (x: memidx) : Lemma (memidx_bytesize x == 4) [SMTPat (memidx_bytesize x)]

val memidx_parser_serializer_eq (_: unit) : Lemma (memidx_parser == LPI.parse_u32 /\ memidx_serializer == LPI.serialize_u32)

