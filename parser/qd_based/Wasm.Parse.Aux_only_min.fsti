module Wasm.Parse.Aux_only_min

(* This file has been automatically generated by EverParse. *)
open FStar.Bytes
module U8 = FStar.UInt8
module U16 = FStar.UInt16
module U32 = FStar.UInt32
module U64 = FStar.UInt64
module LP = LowParse.Spec.Base
module LS = LowParse.SLow.Base
module LPI = LowParse.Spec.AllIntegers
module L = FStar.List.Tot
module BY = FStar.Bytes


type aux_only_min = U32.t

inline_for_extraction noextract let aux_only_min_parser_kind = LP.strong_parser_kind 4 4 (Some LP.ParserKindMetadataTotal)

noextract val aux_only_min_parser: LP.parser aux_only_min_parser_kind aux_only_min

noextract val aux_only_min_serializer: LP.serializer aux_only_min_parser

noextract val aux_only_min_bytesize (x:aux_only_min) : GTot nat

noextract val aux_only_min_bytesize_eq (x:aux_only_min) : Lemma (aux_only_min_bytesize x == Seq.length (LP.serialize aux_only_min_serializer x))

val aux_only_min_parser32: LS.parser32 aux_only_min_parser

val aux_only_min_serializer32: LS.serializer32 aux_only_min_serializer

val aux_only_min_size32: LS.size32 aux_only_min_serializer

val aux_only_min_bytesize_eqn (x: aux_only_min) : Lemma (aux_only_min_bytesize x == 4) [SMTPat (aux_only_min_bytesize x)]

val aux_only_min_parser_serializer_eq (_: unit) : Lemma (aux_only_min_parser == LPI.parse_u32 /\ aux_only_min_serializer == LPI.serialize_u32)

