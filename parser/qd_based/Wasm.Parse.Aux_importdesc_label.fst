module Wasm.Parse.Aux_importdesc_label

(* This file has been automatically generated by EverParse. *)
open FStar.Bytes
module U8 = FStar.UInt8
module U16 = FStar.UInt16
module U32 = FStar.UInt32
module U64 = FStar.UInt64
module LP = LowParse.Spec
module LS = LowParse.SLow
module LPI = LowParse.Spec.AllIntegers
module L = FStar.List.Tot
module BY = FStar.Bytes

#reset-options "--using_facts_from '* -FStar.Tactics -FStar.Reflection' --z3rlimit 16 --z3cliopt smt.arith.nl=false --max_fuel 2 --max_ifuel 2"

[@LP.Norm] inline_for_extraction let aux_importdesc_label_enum : LP.enum aux_importdesc_label U8.t =
  [@inline_let] let e = [
    Func, 0z;
    Table, 1z;
    Mem, 2z;
    Global, 3z;
  ] in
  [@inline_let] let _ =
    assert_norm (L.noRepeats (LP.list_map fst e))
  in
  [@inline_let] let _ = 
    assert_norm (L.noRepeats (LP.list_map snd e))
  in e

noextract let aux_importdesc_label_repr_parser = LPI.parse_u8

noextract let aux_importdesc_label_repr_serializer = LPI.serialize_u8

inline_for_extraction noextract let aux_importdesc_label_repr_parser32 = LS.parse32_u8

inline_for_extraction noextract let aux_importdesc_label_repr_serializer32 = LS.serialize32_u8

inline_for_extraction noextract let aux_importdesc_label_repr_size32 = LS.size32_u8

inline_for_extraction let synth_aux_importdesc_label (x: LP.enum_key aux_importdesc_label_enum) : Tot aux_importdesc_label = x

inline_for_extraction let synth_aux_importdesc_label_inv (x: aux_importdesc_label) : Tot (LP.enum_key aux_importdesc_label_enum) =
  [@inline_let] let _ : squash (LP.list_mem x (LP.list_map fst aux_importdesc_label_enum)) =
    _ by (LP.synth_maybe_enum_key_inv_unknown_tac x)
  in
  x

let lemma_synth_aux_importdesc_label_inj () : Lemma
  (LP.synth_injective synth_aux_importdesc_label) = ()

let lemma_synth_aux_importdesc_label_inv () : Lemma
  (LP.synth_inverse synth_aux_importdesc_label synth_aux_importdesc_label_inv) = ()

noextract let parse_aux_importdesc_label_key : LP.parser _ (LP.enum_key aux_importdesc_label_enum) =
  LP.parse_enum_key aux_importdesc_label_repr_parser aux_importdesc_label_enum

noextract let serialize_aux_importdesc_label_key : LP.serializer parse_aux_importdesc_label_key =
  LP.serialize_enum_key aux_importdesc_label_repr_parser aux_importdesc_label_repr_serializer aux_importdesc_label_enum

noextract let aux_importdesc_label_parser : LP.parser _ aux_importdesc_label =
  lemma_synth_aux_importdesc_label_inj ();
  parse_aux_importdesc_label_key `LP.parse_synth` synth_aux_importdesc_label

noextract let aux_importdesc_label_serializer : LP.serializer aux_importdesc_label_parser =
  lemma_synth_aux_importdesc_label_inj ();
  lemma_synth_aux_importdesc_label_inv ();
  LP.serialize_synth _ synth_aux_importdesc_label serialize_aux_importdesc_label_key synth_aux_importdesc_label_inv ()

let aux_importdesc_label_bytesize (x:aux_importdesc_label) : GTot nat = Seq.length (aux_importdesc_label_serializer x)

let aux_importdesc_label_bytesize_eq x = ()

let parse32_aux_importdesc_label_key : LS.parser32 parse_aux_importdesc_label_key =
  FStar.Tactics.synth_by_tactic (LS.parse32_enum_key_tac aux_importdesc_label_repr_parser32 aux_importdesc_label_enum)

let aux_importdesc_label_parser32 : LS.parser32 aux_importdesc_label_parser =
  lemma_synth_aux_importdesc_label_inj ();
  LS.parse32_synth _ synth_aux_importdesc_label (fun x->synth_aux_importdesc_label x) parse32_aux_importdesc_label_key ()

let serialize32_aux_importdesc_label_key : LS.serializer32 serialize_aux_importdesc_label_key =
  FStar.Tactics.synth_by_tactic (LS.serialize32_enum_key_gen_tac
    aux_importdesc_label_repr_serializer32 aux_importdesc_label_enum)

let aux_importdesc_label_serializer32 : LS.serializer32 aux_importdesc_label_serializer =
  lemma_synth_aux_importdesc_label_inj ();
  lemma_synth_aux_importdesc_label_inv ();
  LS.serialize32_synth _ synth_aux_importdesc_label _ serialize32_aux_importdesc_label_key synth_aux_importdesc_label_inv (fun x->synth_aux_importdesc_label_inv x) ()

let aux_importdesc_label_size32 =
  [@inline_let] let _ = assert_norm (LS.size32_constant_precond aux_importdesc_label_serializer 1ul) in
  LS.size32_constant aux_importdesc_label_serializer 1ul ()

