module Wasm.Parse.Elem

(* This file has been automatically generated by EverParse. *)
open FStar.Bytes
module U8 = FStar.UInt8
module U16 = FStar.UInt16
module U32 = FStar.UInt32
module U64 = FStar.UInt64
module LP = LowParse.Spec.Base
module LS = LowParse.SLow.Base
module LPI = LowParse.Spec.AllIntegers
module L = FStar.List.Tot
module BY = FStar.Bytes

open Wasm.Parse.Tableidx
open Wasm.Parse.Constexpr
open Wasm.Parse.Aux_vecfuncidx

type elem = {
  x : tableidx;
  e : constexpr;
  y : aux_vecfuncidx;
}

inline_for_extraction noextract let elem_parser_kind = LP.strong_parser_kind 10 5125 None

noextract val elem_parser: LP.parser elem_parser_kind elem

noextract val elem_serializer: LP.serializer elem_parser

noextract val elem_bytesize (x:elem) : GTot nat

noextract val elem_bytesize_eq (x:elem) : Lemma (elem_bytesize x == Seq.length (LP.serialize elem_serializer x))

val elem_parser32: LS.parser32 elem_parser

val elem_serializer32: LS.serializer32 elem_serializer

val elem_size32: LS.size32 elem_serializer

val elem_bytesize_eqn (x: elem) : Lemma (elem_bytesize x == (tableidx_bytesize (x.x)) + (constexpr_bytesize (x.e)) + (aux_vecfuncidx_bytesize (x.y))) [SMTPat (elem_bytesize x)]

