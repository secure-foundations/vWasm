module Wasm.Parse.Funcsec

(* This file has been automatically generated by EverParse. *)
open FStar.Bytes
module U8 = FStar.UInt8
module U16 = FStar.UInt16
module U32 = FStar.UInt32
module U64 = FStar.UInt64
module LP = LowParse.Spec.Base
module LS = LowParse.SLow.Base
module LPI = LowParse.Spec.AllIntegers
module L = FStar.List.Tot
module BY = FStar.Bytes

open Wasm.Parse.Aux_section_const3
open Wasm.Parse.Aux_constbyte0
open Wasm.Parse.Aux_vectypeidx

(* Type of field cont*)
include Wasm.Parse.Funcsec_cont

type funcsec = {
  n : aux_section_const3;
  aux_ignore_byte : aux_constbyte0;
  cont : funcsec_cont;
}

inline_for_extraction noextract let funcsec_parser_kind = LP.strong_parser_kind 9 8197 None

noextract val funcsec_parser: LP.parser funcsec_parser_kind funcsec

noextract val funcsec_serializer: LP.serializer funcsec_parser

noextract val funcsec_bytesize (x:funcsec) : GTot nat

noextract val funcsec_bytesize_eq (x:funcsec) : Lemma (funcsec_bytesize x == Seq.length (LP.serialize funcsec_serializer x))

val funcsec_parser32: LS.parser32 funcsec_parser

val funcsec_serializer32: LS.serializer32 funcsec_serializer

val funcsec_size32: LS.size32 funcsec_serializer

val funcsec_bytesize_eqn (x: funcsec) : Lemma (funcsec_bytesize x == (aux_section_const3_bytesize (x.n)) + (aux_constbyte0_bytesize (x.aux_ignore_byte)) + (funcsec_cont_bytesize (x.cont))) [SMTPat (funcsec_bytesize x)]

