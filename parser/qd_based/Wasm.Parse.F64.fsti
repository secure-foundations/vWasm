module Wasm.Parse.F64

(* This file has been automatically generated by EverParse. *)
open FStar.Bytes
module U8 = FStar.UInt8
module U16 = FStar.UInt16
module U32 = FStar.UInt32
module U64 = FStar.UInt64
module LP = LowParse.Spec.Base
module LS = LowParse.SLow.Base
module LPI = LowParse.Spec.AllIntegers
module L = FStar.List.Tot
module BY = FStar.Bytes


type f64 = lbytes 8

inline_for_extraction noextract let f64_parser_kind = LP.strong_parser_kind 8 8 (Some LP.ParserKindMetadataTotal)

noextract val f64_parser: LP.parser f64_parser_kind f64

noextract val f64_serializer: LP.serializer f64_parser

noextract val f64_bytesize (x:f64) : GTot nat

noextract val f64_bytesize_eq (x:f64) : Lemma (f64_bytesize x == Seq.length (LP.serialize f64_serializer x))

val f64_parser32: LS.parser32 f64_parser

val f64_serializer32: LS.serializer32 f64_serializer

val f64_size32: LS.size32 f64_serializer

val f64_bytesize_eqn (x: f64) : Lemma (f64_bytesize x == BY.length x) [SMTPat (f64_bytesize x)]

