module Wasm.Parse.Aux_vecexport

(* This file has been automatically generated by EverParse. *)
open FStar.Bytes
module U8 = FStar.UInt8
module U16 = FStar.UInt16
module U32 = FStar.UInt32
module U64 = FStar.UInt64
module LP = LowParse.Spec.Base
module LS = LowParse.SLow.Base
module LPI = LowParse.Spec.AllIntegers
module L = FStar.List.Tot
module BY = FStar.Bytes

open Wasm.Parse.Export

inline_for_extraction noextract let min_count = 0
inline_for_extraction noextract let max_count = 131071
type aux_vecexport = l:list export{0 <= L.length l /\ L.length l <= 131071}

inline_for_extraction noextract let aux_vecexport_parser_kind = LP.strong_parser_kind 4 34602748 None

noextract val aux_vecexport_parser: LP.parser aux_vecexport_parser_kind aux_vecexport

noextract val aux_vecexport_serializer: LP.serializer aux_vecexport_parser

noextract val aux_vecexport_bytesize (x:aux_vecexport) : GTot nat

noextract val aux_vecexport_bytesize_eq (x:aux_vecexport) : Lemma (aux_vecexport_bytesize x == Seq.length (LP.serialize aux_vecexport_serializer x))

val aux_vecexport_parser32: LS.parser32 aux_vecexport_parser

val aux_vecexport_serializer32: LS.serializer32 aux_vecexport_serializer

val aux_vecexport_size32: LS.size32 aux_vecexport_serializer

