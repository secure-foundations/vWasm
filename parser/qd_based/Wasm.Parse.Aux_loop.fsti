module Wasm.Parse.Aux_loop

(* This file has been automatically generated by EverParse. *)
open FStar.Bytes
module U8 = FStar.UInt8
module U16 = FStar.UInt16
module U32 = FStar.UInt32
module U64 = FStar.UInt64
module LP = LowParse.Spec.Base
module LS = LowParse.SLow.Base
module LPI = LowParse.Spec.AllIntegers
module L = FStar.List.Tot
module BY = FStar.Bytes

open Wasm.Parse.Blocktype

type aux_loop = blocktype

inline_for_extraction noextract let aux_loop_parser_kind = LP.strong_parser_kind 1 1 None

noextract val aux_loop_parser: LP.parser aux_loop_parser_kind aux_loop

noextract val aux_loop_serializer: LP.serializer aux_loop_parser

noextract val aux_loop_bytesize (x:aux_loop) : GTot nat

noextract val aux_loop_bytesize_eq (x:aux_loop) : Lemma (aux_loop_bytesize x == Seq.length (LP.serialize aux_loop_serializer x))

val aux_loop_parser32: LS.parser32 aux_loop_parser

val aux_loop_serializer32: LS.serializer32 aux_loop_serializer

val aux_loop_size32: LS.size32 aux_loop_serializer

val aux_loop_bytesize_eqn (x: aux_loop) : Lemma (aux_loop_bytesize x == (blocktype_bytesize (x))) [SMTPat (aux_loop_bytesize x)]

val aux_loop_parser_serializer_eq (_: unit) : Lemma (aux_loop_parser == blocktype_parser /\ aux_loop_serializer == blocktype_serializer)

