module Wasm.Parse.Tablesec

(* This file has been automatically generated by EverParse. *)
open FStar.Bytes
module U8 = FStar.UInt8
module U16 = FStar.UInt16
module U32 = FStar.UInt32
module U64 = FStar.UInt64
module LP = LowParse.Spec
module LS = LowParse.SLow
module LPI = LowParse.Spec.AllIntegers
module L = FStar.List.Tot
module BY = FStar.Bytes

#reset-options "--using_facts_from '* -FStar.Tactics -FStar.Reflection' --z3rlimit 16 --z3cliopt smt.arith.nl=false --max_fuel 2 --max_ifuel 2"

(* Type of field cont*)
open Wasm.Parse.Tablesec_cont

type tablesec' = ((aux_section_const4 & aux_constbyte0) & tablesec_cont)

inline_for_extraction let synth_tablesec (x: tablesec') : tablesec =
  match x with ((n,aux_ignore_byte),cont) -> {
    n = n;
    aux_ignore_byte = aux_ignore_byte;
    cont = cont;
  }

inline_for_extraction let synth_tablesec_recip (x: tablesec) : tablesec' = ((x.n,x.aux_ignore_byte),x.cont)

let synth_tablesec_recip_inverse () : Lemma (LP.synth_inverse synth_tablesec_recip synth_tablesec) = ()

let synth_tablesec_injective () : Lemma (LP.synth_injective synth_tablesec) =
  LP.synth_inverse_synth_injective synth_tablesec_recip synth_tablesec;
  synth_tablesec_recip_inverse ()

let synth_tablesec_inverse () : Lemma (LP.synth_inverse synth_tablesec synth_tablesec_recip) =
  assert_norm (LP.synth_inverse synth_tablesec synth_tablesec_recip)

let synth_tablesec_recip_injective () : Lemma (LP.synth_injective synth_tablesec_recip) =
  synth_tablesec_recip_inverse ();
  LP.synth_inverse_synth_injective synth_tablesec synth_tablesec_recip

noextract let tablesec'_parser : LP.parser _ tablesec' = ((aux_section_const4_parser `LP.nondep_then` aux_constbyte0_parser) `LP.nondep_then` tablesec_cont_parser)

noextract let tablesec'_parser_kind = LP.get_parser_kind tablesec'_parser

let tablesec_parser =
  synth_tablesec_injective ();
  assert_norm (tablesec_parser_kind == tablesec'_parser_kind);
  tablesec'_parser `LP.parse_synth` synth_tablesec

noextract let tablesec'_serializer : LP.serializer tablesec'_parser = ((aux_section_const4_serializer `LP.serialize_nondep_then` aux_constbyte0_serializer) `LP.serialize_nondep_then` tablesec_cont_serializer)

let tablesec_serializer =
  [@inline_let] let _ = synth_tablesec_injective () in
  [@inline_let] let _ = synth_tablesec_inverse () in
  [@inline_let] let _ = assert_norm (tablesec_parser_kind == tablesec'_parser_kind) in
  LP.serialize_synth _ synth_tablesec tablesec'_serializer synth_tablesec_recip ()

let tablesec_bytesize (x:tablesec) : GTot nat = Seq.length (tablesec_serializer x)

let tablesec_bytesize_eq x = ()

inline_for_extraction let tablesec'_parser32 : LS.parser32 tablesec'_parser = ((aux_section_const4_parser32 `LS.parse32_nondep_then` aux_constbyte0_parser32) `LS.parse32_nondep_then` tablesec_cont_parser32)

let tablesec_parser32 =
  [@inline_let] let _ = synth_tablesec_injective () in
  [@inline_let] let _ = assert_norm (tablesec_parser_kind == tablesec'_parser_kind) in
  LS.parse32_synth _ synth_tablesec (fun x -> synth_tablesec x) tablesec'_parser32 ()

inline_for_extraction let tablesec'_serializer32 : LS.serializer32 tablesec'_serializer = ((aux_section_const4_serializer32 `LS.serialize32_nondep_then` aux_constbyte0_serializer32) `LS.serialize32_nondep_then` tablesec_cont_serializer32)

let tablesec_serializer32 =
  [@inline_let] let _ = synth_tablesec_injective () in
  [@inline_let] let _ = synth_tablesec_inverse () in
  [@inline_let] let _ = assert_norm (tablesec_parser_kind == tablesec'_parser_kind) in
  LS.serialize32_synth _ synth_tablesec _ tablesec'_serializer32 synth_tablesec_recip (fun x -> synth_tablesec_recip x) ()

inline_for_extraction let tablesec'_size32 : LS.size32 tablesec'_serializer = ((aux_section_const4_size32 `LS.size32_nondep_then` aux_constbyte0_size32) `LS.size32_nondep_then` tablesec_cont_size32)

let tablesec_size32 =
  [@inline_let] let _ = synth_tablesec_injective () in
  [@inline_let] let _ = synth_tablesec_inverse () in
  [@inline_let] let _ = assert_norm (tablesec_parser_kind == tablesec'_parser_kind) in
  LS.size32_synth _ synth_tablesec _ tablesec'_size32 synth_tablesec_recip (fun x -> synth_tablesec_recip x) ()

let tablesec_bytesize_eqn x =
  [@inline_let] let _ = synth_tablesec_injective () in
  [@inline_let] let _ = synth_tablesec_inverse () in
  [@inline_let] let _ = assert_norm (tablesec_parser_kind == tablesec'_parser_kind) in
  LP.serialize_synth_eq _ synth_tablesec tablesec'_serializer synth_tablesec_recip () x;
LP.length_serialize_nondep_then aux_section_const4_serializer aux_constbyte0_serializer x.n x.aux_ignore_byte;
LP.length_serialize_nondep_then (aux_section_const4_serializer `LP.serialize_nondep_then` aux_constbyte0_serializer) tablesec_cont_serializer (x.n, x.aux_ignore_byte) x.cont;
  (aux_section_const4_bytesize_eq (x.n));
  (aux_constbyte0_bytesize_eq (x.aux_ignore_byte));
  (tablesec_cont_bytesize_eq (x.cont));
  assert(tablesec_bytesize x == Seq.length (LP.serialize aux_section_const4_serializer x.n) + Seq.length (LP.serialize aux_constbyte0_serializer x.aux_ignore_byte) + Seq.length (LP.serialize tablesec_cont_serializer x.cont))

