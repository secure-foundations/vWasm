module Wasm.Parse.Globalsec

(* This file has been automatically generated by EverParse. *)
open FStar.Bytes
module U8 = FStar.UInt8
module U16 = FStar.UInt16
module U32 = FStar.UInt32
module U64 = FStar.UInt64
module LP = LowParse.Spec.Base
module LS = LowParse.SLow.Base
module LPI = LowParse.Spec.AllIntegers
module L = FStar.List.Tot
module BY = FStar.Bytes

open Wasm.Parse.Aux_section_const6
open Wasm.Parse.Aux_constbyte0
open Wasm.Parse.Aux_vecglobal

(* Type of field cont*)
include Wasm.Parse.Globalsec_cont

type globalsec = {
  n : aux_section_const6;
  aux_ignore_byte : aux_constbyte0;
  cont : globalsec_cont;
}

inline_for_extraction noextract let globalsec_parser_kind = LP.strong_parser_kind 9 16777220 None

noextract val globalsec_parser: LP.parser globalsec_parser_kind globalsec

noextract val globalsec_serializer: LP.serializer globalsec_parser

noextract val globalsec_bytesize (x:globalsec) : GTot nat

noextract val globalsec_bytesize_eq (x:globalsec) : Lemma (globalsec_bytesize x == Seq.length (LP.serialize globalsec_serializer x))

val globalsec_parser32: LS.parser32 globalsec_parser

val globalsec_serializer32: LS.serializer32 globalsec_serializer

val globalsec_size32: LS.size32 globalsec_serializer

val globalsec_bytesize_eqn (x: globalsec) : Lemma (globalsec_bytesize x == (aux_section_const6_bytesize (x.n)) + (aux_constbyte0_bytesize (x.aux_ignore_byte)) + (globalsec_cont_bytesize (x.cont))) [SMTPat (globalsec_bytesize x)]

