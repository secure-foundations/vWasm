module Wasm.Parse.Version

(* This file has been automatically generated by EverParse. *)
open FStar.Bytes
module U8 = FStar.UInt8
module U16 = FStar.UInt16
module U32 = FStar.UInt32
module U64 = FStar.UInt64
module LP = LowParse.Spec.Base
module LS = LowParse.SLow.Base
module LPI = LowParse.Spec.AllIntegers
module L = FStar.List.Tot
module BY = FStar.Bytes

open Wasm.Parse.Aux_version_1
open Wasm.Parse.Aux_version_0

type version = {
  v0 : aux_version_1;
  v1 : aux_version_0;
  v2 : aux_version_0;
  v3 : aux_version_0;
}

inline_for_extraction noextract let version_parser_kind = LP.strong_parser_kind 4 4 None

noextract val version_parser: LP.parser version_parser_kind version

noextract val version_serializer: LP.serializer version_parser

noextract val version_bytesize (x:version) : GTot nat

noextract val version_bytesize_eq (x:version) : Lemma (version_bytesize x == Seq.length (LP.serialize version_serializer x))

val version_parser32: LS.parser32 version_parser

val version_serializer32: LS.serializer32 version_serializer

val version_size32: LS.size32 version_serializer

val version_bytesize_eqn (x: version) : Lemma (version_bytesize x == (aux_version_1_bytesize (x.v0)) + (aux_version_0_bytesize (x.v1)) + (aux_version_0_bytesize (x.v2)) + (aux_version_0_bytesize (x.v3))) [SMTPat (version_bytesize x)]

