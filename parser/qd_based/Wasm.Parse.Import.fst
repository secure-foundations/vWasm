module Wasm.Parse.Import

(* This file has been automatically generated by EverParse. *)
open FStar.Bytes
module U8 = FStar.UInt8
module U16 = FStar.UInt16
module U32 = FStar.UInt32
module U64 = FStar.UInt64
module LP = LowParse.Spec
module LS = LowParse.SLow
module LPI = LowParse.Spec.AllIntegers
module L = FStar.List.Tot
module BY = FStar.Bytes

#reset-options "--using_facts_from '* -FStar.Tactics -FStar.Reflection' --z3rlimit 16 --z3cliopt smt.arith.nl=false --max_fuel 2 --max_ifuel 2"

type import' = ((name & name) & importdesc)

inline_for_extraction let synth_import (x: import') : import =
  match x with ((modu,nm),d) -> {
    modu = modu;
    nm = nm;
    d = d;
  }

inline_for_extraction let synth_import_recip (x: import) : import' = ((x.modu,x.nm),x.d)

let synth_import_recip_inverse () : Lemma (LP.synth_inverse synth_import_recip synth_import) = ()

let synth_import_injective () : Lemma (LP.synth_injective synth_import) =
  LP.synth_inverse_synth_injective synth_import_recip synth_import;
  synth_import_recip_inverse ()

let synth_import_inverse () : Lemma (LP.synth_inverse synth_import synth_import_recip) =
  assert_norm (LP.synth_inverse synth_import synth_import_recip)

let synth_import_recip_injective () : Lemma (LP.synth_injective synth_import_recip) =
  synth_import_recip_inverse ();
  LP.synth_inverse_synth_injective synth_import synth_import_recip

noextract let import'_parser : LP.parser _ import' = ((name_parser `LP.nondep_then` name_parser) `LP.nondep_then` importdesc_parser)

noextract let import'_parser_kind = LP.get_parser_kind import'_parser

let import_parser =
  synth_import_injective ();
  assert_norm (import_parser_kind == import'_parser_kind);
  import'_parser `LP.parse_synth` synth_import

noextract let import'_serializer : LP.serializer import'_parser = ((name_serializer `LP.serialize_nondep_then` name_serializer) `LP.serialize_nondep_then` importdesc_serializer)

let import_serializer =
  [@inline_let] let _ = synth_import_injective () in
  [@inline_let] let _ = synth_import_inverse () in
  [@inline_let] let _ = assert_norm (import_parser_kind == import'_parser_kind) in
  LP.serialize_synth _ synth_import import'_serializer synth_import_recip ()

let import_bytesize (x:import) : GTot nat = Seq.length (import_serializer x)

let import_bytesize_eq x = ()

inline_for_extraction let import'_parser32 : LS.parser32 import'_parser = ((name_parser32 `LS.parse32_nondep_then` name_parser32) `LS.parse32_nondep_then` importdesc_parser32)

let import_parser32 =
  [@inline_let] let _ = synth_import_injective () in
  [@inline_let] let _ = assert_norm (import_parser_kind == import'_parser_kind) in
  LS.parse32_synth _ synth_import (fun x -> synth_import x) import'_parser32 ()

inline_for_extraction let import'_serializer32 : LS.serializer32 import'_serializer = ((name_serializer32 `LS.serialize32_nondep_then` name_serializer32) `LS.serialize32_nondep_then` importdesc_serializer32)

let import_serializer32 =
  [@inline_let] let _ = synth_import_injective () in
  [@inline_let] let _ = synth_import_inverse () in
  [@inline_let] let _ = assert_norm (import_parser_kind == import'_parser_kind) in
  LS.serialize32_synth _ synth_import _ import'_serializer32 synth_import_recip (fun x -> synth_import_recip x) ()

inline_for_extraction let import'_size32 : LS.size32 import'_serializer = ((name_size32 `LS.size32_nondep_then` name_size32) `LS.size32_nondep_then` importdesc_size32)

let import_size32 =
  [@inline_let] let _ = synth_import_injective () in
  [@inline_let] let _ = synth_import_inverse () in
  [@inline_let] let _ = assert_norm (import_parser_kind == import'_parser_kind) in
  LS.size32_synth _ synth_import _ import'_size32 synth_import_recip (fun x -> synth_import_recip x) ()

let import_bytesize_eqn x =
  [@inline_let] let _ = synth_import_injective () in
  [@inline_let] let _ = synth_import_inverse () in
  [@inline_let] let _ = assert_norm (import_parser_kind == import'_parser_kind) in
  LP.serialize_synth_eq _ synth_import import'_serializer synth_import_recip () x;
LP.length_serialize_nondep_then name_serializer name_serializer x.modu x.nm;
LP.length_serialize_nondep_then (name_serializer `LP.serialize_nondep_then` name_serializer) importdesc_serializer (x.modu, x.nm) x.d;
  (name_bytesize_eq (x.modu));
  (name_bytesize_eq (x.nm));
  (importdesc_bytesize_eq (x.d));
  assert(import_bytesize x == Seq.length (LP.serialize name_serializer x.modu) + Seq.length (LP.serialize name_serializer x.nm) + Seq.length (LP.serialize importdesc_serializer x.d))

