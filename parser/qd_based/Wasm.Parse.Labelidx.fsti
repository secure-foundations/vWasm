module Wasm.Parse.Labelidx

(* This file has been automatically generated by EverParse. *)
open FStar.Bytes
module U8 = FStar.UInt8
module U16 = FStar.UInt16
module U32 = FStar.UInt32
module U64 = FStar.UInt64
module LP = LowParse.Spec.Base
module LS = LowParse.SLow.Base
module LPI = LowParse.Spec.AllIntegers
module L = FStar.List.Tot
module BY = FStar.Bytes


type labelidx = U32.t

inline_for_extraction noextract let labelidx_parser_kind = LP.strong_parser_kind 4 4 (Some LP.ParserKindMetadataTotal)

noextract val labelidx_parser: LP.parser labelidx_parser_kind labelidx

noextract val labelidx_serializer: LP.serializer labelidx_parser

noextract val labelidx_bytesize (x:labelidx) : GTot nat

noextract val labelidx_bytesize_eq (x:labelidx) : Lemma (labelidx_bytesize x == Seq.length (LP.serialize labelidx_serializer x))

val labelidx_parser32: LS.parser32 labelidx_parser

val labelidx_serializer32: LS.serializer32 labelidx_serializer

val labelidx_size32: LS.size32 labelidx_serializer

val labelidx_bytesize_eqn (x: labelidx) : Lemma (labelidx_bytesize x == 4) [SMTPat (labelidx_bytesize x)]

val labelidx_parser_serializer_eq (_: unit) : Lemma (labelidx_parser == LPI.parse_u32 /\ labelidx_serializer == LPI.serialize_u32)

