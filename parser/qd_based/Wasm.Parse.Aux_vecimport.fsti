module Wasm.Parse.Aux_vecimport

(* This file has been automatically generated by EverParse. *)
open FStar.Bytes
module U8 = FStar.UInt8
module U16 = FStar.UInt16
module U32 = FStar.UInt32
module U64 = FStar.UInt64
module LP = LowParse.Spec.Base
module LS = LowParse.SLow.Base
module LPI = LowParse.Spec.AllIntegers
module L = FStar.List.Tot
module BY = FStar.Bytes

open Wasm.Parse.Import

inline_for_extraction noextract let min_count = 0
inline_for_extraction noextract let max_count = 131071
type aux_vecimport = l:list import{0 <= L.length l /\ L.length l <= 131071}

inline_for_extraction noextract let aux_vecimport_parser_kind = LP.strong_parser_kind 4 69336563 None

noextract val aux_vecimport_parser: LP.parser aux_vecimport_parser_kind aux_vecimport

noextract val aux_vecimport_serializer: LP.serializer aux_vecimport_parser

noextract val aux_vecimport_bytesize (x:aux_vecimport) : GTot nat

noextract val aux_vecimport_bytesize_eq (x:aux_vecimport) : Lemma (aux_vecimport_bytesize x == Seq.length (LP.serialize aux_vecimport_serializer x))

val aux_vecimport_parser32: LS.parser32 aux_vecimport_parser

val aux_vecimport_serializer32: LS.serializer32 aux_vecimport_serializer

val aux_vecimport_size32: LS.size32 aux_vecimport_serializer

