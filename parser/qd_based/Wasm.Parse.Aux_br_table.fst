module Wasm.Parse.Aux_br_table

(* This file has been automatically generated by EverParse. *)
open FStar.Bytes
module U8 = FStar.UInt8
module U16 = FStar.UInt16
module U32 = FStar.UInt32
module U64 = FStar.UInt64
module LP = LowParse.Spec
module LS = LowParse.SLow
module LPI = LowParse.Spec.AllIntegers
module L = FStar.List.Tot
module BY = FStar.Bytes

#reset-options "--using_facts_from '* -FStar.Tactics -FStar.Reflection' --z3rlimit 16 --z3cliopt smt.arith.nl=false --max_fuel 2 --max_ifuel 2"

type aux_br_table' = (aux_veclabelidx & labelidx)

inline_for_extraction let synth_aux_br_table (x: aux_br_table') : aux_br_table =
  match x with (ls,ln) -> {
    ls = ls;
    ln = ln;
  }

inline_for_extraction let synth_aux_br_table_recip (x: aux_br_table) : aux_br_table' = (x.ls,x.ln)

let synth_aux_br_table_recip_inverse () : Lemma (LP.synth_inverse synth_aux_br_table_recip synth_aux_br_table) = ()

let synth_aux_br_table_injective () : Lemma (LP.synth_injective synth_aux_br_table) =
  LP.synth_inverse_synth_injective synth_aux_br_table_recip synth_aux_br_table;
  synth_aux_br_table_recip_inverse ()

let synth_aux_br_table_inverse () : Lemma (LP.synth_inverse synth_aux_br_table synth_aux_br_table_recip) =
  assert_norm (LP.synth_inverse synth_aux_br_table synth_aux_br_table_recip)

let synth_aux_br_table_recip_injective () : Lemma (LP.synth_injective synth_aux_br_table_recip) =
  synth_aux_br_table_recip_inverse ();
  LP.synth_inverse_synth_injective synth_aux_br_table synth_aux_br_table_recip

noextract let aux_br_table'_parser : LP.parser _ aux_br_table' = (aux_veclabelidx_parser `LP.nondep_then` labelidx_parser)

noextract let aux_br_table'_parser_kind = LP.get_parser_kind aux_br_table'_parser

let aux_br_table_parser =
  synth_aux_br_table_injective ();
  assert_norm (aux_br_table_parser_kind == aux_br_table'_parser_kind);
  aux_br_table'_parser `LP.parse_synth` synth_aux_br_table

noextract let aux_br_table'_serializer : LP.serializer aux_br_table'_parser = (aux_veclabelidx_serializer `LP.serialize_nondep_then` labelidx_serializer)

let aux_br_table_serializer =
  [@inline_let] let _ = synth_aux_br_table_injective () in
  [@inline_let] let _ = synth_aux_br_table_inverse () in
  [@inline_let] let _ = assert_norm (aux_br_table_parser_kind == aux_br_table'_parser_kind) in
  LP.serialize_synth _ synth_aux_br_table aux_br_table'_serializer synth_aux_br_table_recip ()

let aux_br_table_bytesize (x:aux_br_table) : GTot nat = Seq.length (aux_br_table_serializer x)

let aux_br_table_bytesize_eq x = ()

inline_for_extraction let aux_br_table'_parser32 : LS.parser32 aux_br_table'_parser = (aux_veclabelidx_parser32 `LS.parse32_nondep_then` labelidx_parser32)

let aux_br_table_parser32 =
  [@inline_let] let _ = synth_aux_br_table_injective () in
  [@inline_let] let _ = assert_norm (aux_br_table_parser_kind == aux_br_table'_parser_kind) in
  LS.parse32_synth _ synth_aux_br_table (fun x -> synth_aux_br_table x) aux_br_table'_parser32 ()

inline_for_extraction let aux_br_table'_serializer32 : LS.serializer32 aux_br_table'_serializer = (aux_veclabelidx_serializer32 `LS.serialize32_nondep_then` labelidx_serializer32)

let aux_br_table_serializer32 =
  [@inline_let] let _ = synth_aux_br_table_injective () in
  [@inline_let] let _ = synth_aux_br_table_inverse () in
  [@inline_let] let _ = assert_norm (aux_br_table_parser_kind == aux_br_table'_parser_kind) in
  LS.serialize32_synth _ synth_aux_br_table _ aux_br_table'_serializer32 synth_aux_br_table_recip (fun x -> synth_aux_br_table_recip x) ()

inline_for_extraction let aux_br_table'_size32 : LS.size32 aux_br_table'_serializer = (aux_veclabelidx_size32 `LS.size32_nondep_then` labelidx_size32)

let aux_br_table_size32 =
  [@inline_let] let _ = synth_aux_br_table_injective () in
  [@inline_let] let _ = synth_aux_br_table_inverse () in
  [@inline_let] let _ = assert_norm (aux_br_table_parser_kind == aux_br_table'_parser_kind) in
  LS.size32_synth _ synth_aux_br_table _ aux_br_table'_size32 synth_aux_br_table_recip (fun x -> synth_aux_br_table_recip x) ()

let aux_br_table_bytesize_eqn x =
  [@inline_let] let _ = synth_aux_br_table_injective () in
  [@inline_let] let _ = synth_aux_br_table_inverse () in
  [@inline_let] let _ = assert_norm (aux_br_table_parser_kind == aux_br_table'_parser_kind) in
  LP.serialize_synth_eq _ synth_aux_br_table aux_br_table'_serializer synth_aux_br_table_recip () x;
LP.length_serialize_nondep_then aux_veclabelidx_serializer labelidx_serializer x.ls x.ln;
  (aux_veclabelidx_bytesize_eq (x.ls));
  (labelidx_bytesize_eq (x.ln));
  assert(aux_br_table_bytesize x == Seq.length (LP.serialize aux_veclabelidx_serializer x.ls) + Seq.length (LP.serialize labelidx_serializer x.ln))

