module Wasm.Parse.Tableidx

(* This file has been automatically generated by EverParse. *)
open FStar.Bytes
module U8 = FStar.UInt8
module U16 = FStar.UInt16
module U32 = FStar.UInt32
module U64 = FStar.UInt64
module LP = LowParse.Spec.Base
module LS = LowParse.SLow.Base
module LPI = LowParse.Spec.AllIntegers
module L = FStar.List.Tot
module BY = FStar.Bytes


type tableidx = U32.t

inline_for_extraction noextract let tableidx_parser_kind = LP.strong_parser_kind 4 4 (Some LP.ParserKindMetadataTotal)

noextract val tableidx_parser: LP.parser tableidx_parser_kind tableidx

noextract val tableidx_serializer: LP.serializer tableidx_parser

noextract val tableidx_bytesize (x:tableidx) : GTot nat

noextract val tableidx_bytesize_eq (x:tableidx) : Lemma (tableidx_bytesize x == Seq.length (LP.serialize tableidx_serializer x))

val tableidx_parser32: LS.parser32 tableidx_parser

val tableidx_serializer32: LS.serializer32 tableidx_serializer

val tableidx_size32: LS.size32 tableidx_serializer

val tableidx_bytesize_eqn (x: tableidx) : Lemma (tableidx_bytesize x == 4) [SMTPat (tableidx_bytesize x)]

val tableidx_parser_serializer_eq (_: unit) : Lemma (tableidx_parser == LPI.parse_u32 /\ tableidx_serializer == LPI.serialize_u32)

