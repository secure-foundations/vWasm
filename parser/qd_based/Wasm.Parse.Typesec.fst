module Wasm.Parse.Typesec

(* This file has been automatically generated by EverParse. *)
open FStar.Bytes
module U8 = FStar.UInt8
module U16 = FStar.UInt16
module U32 = FStar.UInt32
module U64 = FStar.UInt64
module LP = LowParse.Spec
module LS = LowParse.SLow
module LPI = LowParse.Spec.AllIntegers
module L = FStar.List.Tot
module BY = FStar.Bytes

#reset-options "--using_facts_from '* -FStar.Tactics -FStar.Reflection' --z3rlimit 16 --z3cliopt smt.arith.nl=false --max_fuel 2 --max_ifuel 2"

(* Type of field cont*)
open Wasm.Parse.Typesec_cont

type typesec' = ((aux_section_const1 & aux_constbyte0) & typesec_cont)

inline_for_extraction let synth_typesec (x: typesec') : typesec =
  match x with ((n,aux_ignore_byte),cont) -> {
    n = n;
    aux_ignore_byte = aux_ignore_byte;
    cont = cont;
  }

inline_for_extraction let synth_typesec_recip (x: typesec) : typesec' = ((x.n,x.aux_ignore_byte),x.cont)

let synth_typesec_recip_inverse () : Lemma (LP.synth_inverse synth_typesec_recip synth_typesec) = ()

let synth_typesec_injective () : Lemma (LP.synth_injective synth_typesec) =
  LP.synth_inverse_synth_injective synth_typesec_recip synth_typesec;
  synth_typesec_recip_inverse ()

let synth_typesec_inverse () : Lemma (LP.synth_inverse synth_typesec synth_typesec_recip) =
  assert_norm (LP.synth_inverse synth_typesec synth_typesec_recip)

let synth_typesec_recip_injective () : Lemma (LP.synth_injective synth_typesec_recip) =
  synth_typesec_recip_inverse ();
  LP.synth_inverse_synth_injective synth_typesec synth_typesec_recip

noextract let typesec'_parser : LP.parser _ typesec' = ((aux_section_const1_parser `LP.nondep_then` aux_constbyte0_parser) `LP.nondep_then` typesec_cont_parser)

noextract let typesec'_parser_kind = LP.get_parser_kind typesec'_parser

let typesec_parser =
  synth_typesec_injective ();
  assert_norm (typesec_parser_kind == typesec'_parser_kind);
  typesec'_parser `LP.parse_synth` synth_typesec

noextract let typesec'_serializer : LP.serializer typesec'_parser = ((aux_section_const1_serializer `LP.serialize_nondep_then` aux_constbyte0_serializer) `LP.serialize_nondep_then` typesec_cont_serializer)

let typesec_serializer =
  [@inline_let] let _ = synth_typesec_injective () in
  [@inline_let] let _ = synth_typesec_inverse () in
  [@inline_let] let _ = assert_norm (typesec_parser_kind == typesec'_parser_kind) in
  LP.serialize_synth _ synth_typesec typesec'_serializer synth_typesec_recip ()

let typesec_bytesize (x:typesec) : GTot nat = Seq.length (typesec_serializer x)

let typesec_bytesize_eq x = ()

inline_for_extraction let typesec'_parser32 : LS.parser32 typesec'_parser = ((aux_section_const1_parser32 `LS.parse32_nondep_then` aux_constbyte0_parser32) `LS.parse32_nondep_then` typesec_cont_parser32)

let typesec_parser32 =
  [@inline_let] let _ = synth_typesec_injective () in
  [@inline_let] let _ = assert_norm (typesec_parser_kind == typesec'_parser_kind) in
  LS.parse32_synth _ synth_typesec (fun x -> synth_typesec x) typesec'_parser32 ()

inline_for_extraction let typesec'_serializer32 : LS.serializer32 typesec'_serializer = ((aux_section_const1_serializer32 `LS.serialize32_nondep_then` aux_constbyte0_serializer32) `LS.serialize32_nondep_then` typesec_cont_serializer32)

let typesec_serializer32 =
  [@inline_let] let _ = synth_typesec_injective () in
  [@inline_let] let _ = synth_typesec_inverse () in
  [@inline_let] let _ = assert_norm (typesec_parser_kind == typesec'_parser_kind) in
  LS.serialize32_synth _ synth_typesec _ typesec'_serializer32 synth_typesec_recip (fun x -> synth_typesec_recip x) ()

inline_for_extraction let typesec'_size32 : LS.size32 typesec'_serializer = ((aux_section_const1_size32 `LS.size32_nondep_then` aux_constbyte0_size32) `LS.size32_nondep_then` typesec_cont_size32)

let typesec_size32 =
  [@inline_let] let _ = synth_typesec_injective () in
  [@inline_let] let _ = synth_typesec_inverse () in
  [@inline_let] let _ = assert_norm (typesec_parser_kind == typesec'_parser_kind) in
  LS.size32_synth _ synth_typesec _ typesec'_size32 synth_typesec_recip (fun x -> synth_typesec_recip x) ()

let typesec_bytesize_eqn x =
  [@inline_let] let _ = synth_typesec_injective () in
  [@inline_let] let _ = synth_typesec_inverse () in
  [@inline_let] let _ = assert_norm (typesec_parser_kind == typesec'_parser_kind) in
  LP.serialize_synth_eq _ synth_typesec typesec'_serializer synth_typesec_recip () x;
LP.length_serialize_nondep_then aux_section_const1_serializer aux_constbyte0_serializer x.n x.aux_ignore_byte;
LP.length_serialize_nondep_then (aux_section_const1_serializer `LP.serialize_nondep_then` aux_constbyte0_serializer) typesec_cont_serializer (x.n, x.aux_ignore_byte) x.cont;
  (aux_section_const1_bytesize_eq (x.n));
  (aux_constbyte0_bytesize_eq (x.aux_ignore_byte));
  (typesec_cont_bytesize_eq (x.cont));
  assert(typesec_bytesize x == Seq.length (LP.serialize aux_section_const1_serializer x.n) + Seq.length (LP.serialize aux_constbyte0_serializer x.aux_ignore_byte) + Seq.length (LP.serialize typesec_cont_serializer x.cont))

