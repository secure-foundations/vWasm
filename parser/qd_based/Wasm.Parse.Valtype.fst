module Wasm.Parse.Valtype

(* This file has been automatically generated by EverParse. *)
open FStar.Bytes
module U8 = FStar.UInt8
module U16 = FStar.UInt16
module U32 = FStar.UInt32
module U64 = FStar.UInt64
module LP = LowParse.Spec
module LS = LowParse.SLow
module LPI = LowParse.Spec.AllIntegers
module L = FStar.List.Tot
module BY = FStar.Bytes

#reset-options "--using_facts_from '* -FStar.Tactics -FStar.Reflection' --z3rlimit 16 --z3cliopt smt.arith.nl=false --max_fuel 2 --max_ifuel 2"

[@LP.Norm] inline_for_extraction let valtype_enum : LP.enum valtype U8.t =
  [@inline_let] let e = [
    I32, 127z;
    I64, 126z;
    F32, 125z;
    F64, 124z;
  ] in
  [@inline_let] let _ =
    assert_norm (L.noRepeats (LP.list_map fst e))
  in
  [@inline_let] let _ = 
    assert_norm (L.noRepeats (LP.list_map snd e))
  in e

noextract let valtype_repr_parser = LPI.parse_u8

noextract let valtype_repr_serializer = LPI.serialize_u8

inline_for_extraction noextract let valtype_repr_parser32 = LS.parse32_u8

inline_for_extraction noextract let valtype_repr_serializer32 = LS.serialize32_u8

inline_for_extraction noextract let valtype_repr_size32 = LS.size32_u8

inline_for_extraction let synth_valtype (x: LP.enum_key valtype_enum) : Tot valtype = x

inline_for_extraction let synth_valtype_inv (x: valtype) : Tot (LP.enum_key valtype_enum) =
  [@inline_let] let _ : squash (LP.list_mem x (LP.list_map fst valtype_enum)) =
    _ by (LP.synth_maybe_enum_key_inv_unknown_tac x)
  in
  x

let lemma_synth_valtype_inj () : Lemma
  (LP.synth_injective synth_valtype) = ()

let lemma_synth_valtype_inv () : Lemma
  (LP.synth_inverse synth_valtype synth_valtype_inv) = ()

noextract let parse_valtype_key : LP.parser _ (LP.enum_key valtype_enum) =
  LP.parse_enum_key valtype_repr_parser valtype_enum

noextract let serialize_valtype_key : LP.serializer parse_valtype_key =
  LP.serialize_enum_key valtype_repr_parser valtype_repr_serializer valtype_enum

noextract let valtype_parser : LP.parser _ valtype =
  lemma_synth_valtype_inj ();
  parse_valtype_key `LP.parse_synth` synth_valtype

noextract let valtype_serializer : LP.serializer valtype_parser =
  lemma_synth_valtype_inj ();
  lemma_synth_valtype_inv ();
  LP.serialize_synth _ synth_valtype serialize_valtype_key synth_valtype_inv ()

let valtype_bytesize (x:valtype) : GTot nat = Seq.length (valtype_serializer x)

let valtype_bytesize_eq x = ()

let parse32_valtype_key : LS.parser32 parse_valtype_key =
  FStar.Tactics.synth_by_tactic (LS.parse32_enum_key_tac valtype_repr_parser32 valtype_enum)

let valtype_parser32 : LS.parser32 valtype_parser =
  lemma_synth_valtype_inj ();
  LS.parse32_synth _ synth_valtype (fun x->synth_valtype x) parse32_valtype_key ()

let serialize32_valtype_key : LS.serializer32 serialize_valtype_key =
  FStar.Tactics.synth_by_tactic (LS.serialize32_enum_key_gen_tac
    valtype_repr_serializer32 valtype_enum)

let valtype_serializer32 : LS.serializer32 valtype_serializer =
  lemma_synth_valtype_inj ();
  lemma_synth_valtype_inv ();
  LS.serialize32_synth _ synth_valtype _ serialize32_valtype_key synth_valtype_inv (fun x->synth_valtype_inv x) ()

let valtype_size32 =
  [@inline_let] let _ = assert_norm (LS.size32_constant_precond valtype_serializer 1ul) in
  LS.size32_constant valtype_serializer 1ul ()

