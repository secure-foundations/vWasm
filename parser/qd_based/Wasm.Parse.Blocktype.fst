module Wasm.Parse.Blocktype

(* This file has been automatically generated by EverParse. *)
open FStar.Bytes
module U8 = FStar.UInt8
module U16 = FStar.UInt16
module U32 = FStar.UInt32
module U64 = FStar.UInt64
module LP = LowParse.Spec
module LS = LowParse.SLow
module LPI = LowParse.Spec.AllIntegers
module L = FStar.List.Tot
module BY = FStar.Bytes

#reset-options "--using_facts_from '* -FStar.Tactics -FStar.Reflection' --z3rlimit 16 --z3cliopt smt.arith.nl=false --max_fuel 2 --max_ifuel 2"

[@LP.Norm] inline_for_extraction let blocktype_enum : LP.enum blocktype U8.t =
  [@inline_let] let e = [
    R_none, 64z;
    R_i32, 127z;
    R_i64, 126z;
    R_f32, 125z;
    R_f64, 124z;
  ] in
  [@inline_let] let _ =
    assert_norm (L.noRepeats (LP.list_map fst e))
  in
  [@inline_let] let _ = 
    assert_norm (L.noRepeats (LP.list_map snd e))
  in e

noextract let blocktype_repr_parser = LPI.parse_u8

noextract let blocktype_repr_serializer = LPI.serialize_u8

inline_for_extraction noextract let blocktype_repr_parser32 = LS.parse32_u8

inline_for_extraction noextract let blocktype_repr_serializer32 = LS.serialize32_u8

inline_for_extraction noextract let blocktype_repr_size32 = LS.size32_u8

inline_for_extraction let synth_blocktype (x: LP.enum_key blocktype_enum) : Tot blocktype = x

inline_for_extraction let synth_blocktype_inv (x: blocktype) : Tot (LP.enum_key blocktype_enum) =
  [@inline_let] let _ : squash (LP.list_mem x (LP.list_map fst blocktype_enum)) =
    _ by (LP.synth_maybe_enum_key_inv_unknown_tac x)
  in
  x

let lemma_synth_blocktype_inj () : Lemma
  (LP.synth_injective synth_blocktype) = ()

let lemma_synth_blocktype_inv () : Lemma
  (LP.synth_inverse synth_blocktype synth_blocktype_inv) = ()

noextract let parse_blocktype_key : LP.parser _ (LP.enum_key blocktype_enum) =
  LP.parse_enum_key blocktype_repr_parser blocktype_enum

noextract let serialize_blocktype_key : LP.serializer parse_blocktype_key =
  LP.serialize_enum_key blocktype_repr_parser blocktype_repr_serializer blocktype_enum

noextract let blocktype_parser : LP.parser _ blocktype =
  lemma_synth_blocktype_inj ();
  parse_blocktype_key `LP.parse_synth` synth_blocktype

noextract let blocktype_serializer : LP.serializer blocktype_parser =
  lemma_synth_blocktype_inj ();
  lemma_synth_blocktype_inv ();
  LP.serialize_synth _ synth_blocktype serialize_blocktype_key synth_blocktype_inv ()

let blocktype_bytesize (x:blocktype) : GTot nat = Seq.length (blocktype_serializer x)

let blocktype_bytesize_eq x = ()

let parse32_blocktype_key : LS.parser32 parse_blocktype_key =
  FStar.Tactics.synth_by_tactic (LS.parse32_enum_key_tac blocktype_repr_parser32 blocktype_enum)

let blocktype_parser32 : LS.parser32 blocktype_parser =
  lemma_synth_blocktype_inj ();
  LS.parse32_synth _ synth_blocktype (fun x->synth_blocktype x) parse32_blocktype_key ()

let serialize32_blocktype_key : LS.serializer32 serialize_blocktype_key =
  FStar.Tactics.synth_by_tactic (LS.serialize32_enum_key_gen_tac
    blocktype_repr_serializer32 blocktype_enum)

let blocktype_serializer32 : LS.serializer32 blocktype_serializer =
  lemma_synth_blocktype_inj ();
  lemma_synth_blocktype_inv ();
  LS.serialize32_synth _ synth_blocktype _ serialize32_blocktype_key synth_blocktype_inv (fun x->synth_blocktype_inv x) ()

let blocktype_size32 =
  [@inline_let] let _ = assert_norm (LS.size32_constant_precond blocktype_serializer 1ul) in
  LS.size32_constant blocktype_serializer 1ul ()

