module Wasm.Parse.Func

(* This file has been automatically generated by EverParse. *)
open FStar.Bytes
module U8 = FStar.UInt8
module U16 = FStar.UInt16
module U32 = FStar.UInt32
module U64 = FStar.UInt64
module LP = LowParse.Spec
module LS = LowParse.SLow
module LPI = LowParse.Spec.AllIntegers
module L = FStar.List.Tot
module BY = FStar.Bytes

#reset-options "--using_facts_from '* -FStar.Tactics -FStar.Reflection' --z3rlimit 16 --z3cliopt smt.arith.nl=false --max_fuel 2 --max_ifuel 2"

type func' = (aux_veclocals & expr)

inline_for_extraction let synth_func (x: func') : func =
  match x with (t,e) -> {
    t = t;
    e = e;
  }

inline_for_extraction let synth_func_recip (x: func) : func' = (x.t,x.e)

let synth_func_recip_inverse () : Lemma (LP.synth_inverse synth_func_recip synth_func) = ()

let synth_func_injective () : Lemma (LP.synth_injective synth_func) =
  LP.synth_inverse_synth_injective synth_func_recip synth_func;
  synth_func_recip_inverse ()

let synth_func_inverse () : Lemma (LP.synth_inverse synth_func synth_func_recip) =
  assert_norm (LP.synth_inverse synth_func synth_func_recip)

let synth_func_recip_injective () : Lemma (LP.synth_injective synth_func_recip) =
  synth_func_recip_inverse ();
  LP.synth_inverse_synth_injective synth_func synth_func_recip

noextract let func'_parser : LP.parser _ func' = (aux_veclocals_parser `LP.nondep_then` expr_parser)

noextract let func'_parser_kind = LP.get_parser_kind func'_parser

let func_parser =
  synth_func_injective ();
  assert_norm (func_parser_kind == func'_parser_kind);
  func'_parser `LP.parse_synth` synth_func

noextract let func'_serializer : LP.serializer func'_parser = (aux_veclocals_serializer `LP.serialize_nondep_then` expr_serializer)

let func_serializer =
  [@inline_let] let _ = synth_func_injective () in
  [@inline_let] let _ = synth_func_inverse () in
  [@inline_let] let _ = assert_norm (func_parser_kind == func'_parser_kind) in
  LP.serialize_synth _ synth_func func'_serializer synth_func_recip ()

let func_bytesize (x:func) : GTot nat = Seq.length (func_serializer x)

let func_bytesize_eq x = ()

inline_for_extraction let func'_parser32 : LS.parser32 func'_parser = (aux_veclocals_parser32 `LS.parse32_nondep_then` expr_parser32)

let func_parser32 =
  [@inline_let] let _ = synth_func_injective () in
  [@inline_let] let _ = assert_norm (func_parser_kind == func'_parser_kind) in
  LS.parse32_synth _ synth_func (fun x -> synth_func x) func'_parser32 ()

inline_for_extraction let func'_serializer32 : LS.serializer32 func'_serializer = (aux_veclocals_serializer32 `LS.serialize32_nondep_then` expr_serializer32)

let func_serializer32 =
  [@inline_let] let _ = synth_func_injective () in
  [@inline_let] let _ = synth_func_inverse () in
  [@inline_let] let _ = assert_norm (func_parser_kind == func'_parser_kind) in
  LS.serialize32_synth _ synth_func _ func'_serializer32 synth_func_recip (fun x -> synth_func_recip x) ()

inline_for_extraction let func'_size32 : LS.size32 func'_serializer = (aux_veclocals_size32 `LS.size32_nondep_then` expr_size32)

let func_size32 =
  [@inline_let] let _ = synth_func_injective () in
  [@inline_let] let _ = synth_func_inverse () in
  [@inline_let] let _ = assert_norm (func_parser_kind == func'_parser_kind) in
  LS.size32_synth _ synth_func _ func'_size32 synth_func_recip (fun x -> synth_func_recip x) ()

let func_bytesize_eqn x =
  [@inline_let] let _ = synth_func_injective () in
  [@inline_let] let _ = synth_func_inverse () in
  [@inline_let] let _ = assert_norm (func_parser_kind == func'_parser_kind) in
  LP.serialize_synth_eq _ synth_func func'_serializer synth_func_recip () x;
LP.length_serialize_nondep_then aux_veclocals_serializer expr_serializer x.t x.e;
  (aux_veclocals_bytesize_eq (x.t));
  (expr_bytesize_eq (x.e));
  assert(func_bytesize x == Seq.length (LP.serialize aux_veclocals_serializer x.t) + Seq.length (LP.serialize expr_serializer x.e))

