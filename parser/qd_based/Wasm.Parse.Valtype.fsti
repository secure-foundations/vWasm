module Wasm.Parse.Valtype

(* This file has been automatically generated by EverParse. *)
open FStar.Bytes
module U8 = FStar.UInt8
module U16 = FStar.UInt16
module U32 = FStar.UInt32
module U64 = FStar.UInt64
module LP = LowParse.Spec.Base
module LS = LowParse.SLow.Base
module LPI = LowParse.Spec.AllIntegers
module L = FStar.List.Tot
module BY = FStar.Bytes


type valtype =
  | I32
  | I64
  | F32
  | F64

let string_of_valtype = function
  | I32 -> "i32"
  | I64 -> "i64"
  | F32 -> "f32"
  | F64 -> "f64"

inline_for_extraction noextract let valtype_parser_kind = LP.strong_parser_kind 1 1 None

noextract val valtype_parser: LP.parser valtype_parser_kind valtype

noextract val valtype_serializer: LP.serializer valtype_parser

noextract val valtype_bytesize (x:valtype) : GTot nat

noextract val valtype_bytesize_eq (x:valtype) : Lemma (valtype_bytesize x == Seq.length (LP.serialize valtype_serializer x))

val valtype_parser32: LS.parser32 valtype_parser

val valtype_serializer32: LS.serializer32 valtype_serializer

val valtype_size32: LS.size32 valtype_serializer

