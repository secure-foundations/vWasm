module Wasm.Parse.Aux_call_indirect

(* This file has been automatically generated by EverParse. *)
open FStar.Bytes
module U8 = FStar.UInt8
module U16 = FStar.UInt16
module U32 = FStar.UInt32
module U64 = FStar.UInt64
module LP = LowParse.Spec
module LS = LowParse.SLow
module LPI = LowParse.Spec.AllIntegers
module L = FStar.List.Tot
module BY = FStar.Bytes

#reset-options "--using_facts_from '* -FStar.Tactics -FStar.Reflection' --z3rlimit 16 --z3cliopt smt.arith.nl=false --max_fuel 2 --max_ifuel 2"

type aux_call_indirect' = (typeidx & aux_constbyte0)

inline_for_extraction let synth_aux_call_indirect (x: aux_call_indirect') : aux_call_indirect =
  match x with (x,z) -> {
    x = x;
    z = z;
  }

inline_for_extraction let synth_aux_call_indirect_recip (x: aux_call_indirect) : aux_call_indirect' = (x.x,x.z)

let synth_aux_call_indirect_recip_inverse () : Lemma (LP.synth_inverse synth_aux_call_indirect_recip synth_aux_call_indirect) = ()

let synth_aux_call_indirect_injective () : Lemma (LP.synth_injective synth_aux_call_indirect) =
  LP.synth_inverse_synth_injective synth_aux_call_indirect_recip synth_aux_call_indirect;
  synth_aux_call_indirect_recip_inverse ()

let synth_aux_call_indirect_inverse () : Lemma (LP.synth_inverse synth_aux_call_indirect synth_aux_call_indirect_recip) =
  assert_norm (LP.synth_inverse synth_aux_call_indirect synth_aux_call_indirect_recip)

let synth_aux_call_indirect_recip_injective () : Lemma (LP.synth_injective synth_aux_call_indirect_recip) =
  synth_aux_call_indirect_recip_inverse ();
  LP.synth_inverse_synth_injective synth_aux_call_indirect synth_aux_call_indirect_recip

noextract let aux_call_indirect'_parser : LP.parser _ aux_call_indirect' = (typeidx_parser `LP.nondep_then` aux_constbyte0_parser)

noextract let aux_call_indirect'_parser_kind = LP.get_parser_kind aux_call_indirect'_parser

let aux_call_indirect_parser =
  synth_aux_call_indirect_injective ();
  assert_norm (aux_call_indirect_parser_kind == aux_call_indirect'_parser_kind);
  aux_call_indirect'_parser `LP.parse_synth` synth_aux_call_indirect

noextract let aux_call_indirect'_serializer : LP.serializer aux_call_indirect'_parser = (typeidx_serializer `LP.serialize_nondep_then` aux_constbyte0_serializer)

let aux_call_indirect_serializer =
  [@inline_let] let _ = synth_aux_call_indirect_injective () in
  [@inline_let] let _ = synth_aux_call_indirect_inverse () in
  [@inline_let] let _ = assert_norm (aux_call_indirect_parser_kind == aux_call_indirect'_parser_kind) in
  LP.serialize_synth _ synth_aux_call_indirect aux_call_indirect'_serializer synth_aux_call_indirect_recip ()

let aux_call_indirect_bytesize (x:aux_call_indirect) : GTot nat = Seq.length (aux_call_indirect_serializer x)

let aux_call_indirect_bytesize_eq x = ()

inline_for_extraction let aux_call_indirect'_parser32 : LS.parser32 aux_call_indirect'_parser = (typeidx_parser32 `LS.parse32_nondep_then` aux_constbyte0_parser32)

let aux_call_indirect_parser32 =
  [@inline_let] let _ = synth_aux_call_indirect_injective () in
  [@inline_let] let _ = assert_norm (aux_call_indirect_parser_kind == aux_call_indirect'_parser_kind) in
  LS.parse32_synth _ synth_aux_call_indirect (fun x -> synth_aux_call_indirect x) aux_call_indirect'_parser32 ()

inline_for_extraction let aux_call_indirect'_serializer32 : LS.serializer32 aux_call_indirect'_serializer = (typeidx_serializer32 `LS.serialize32_nondep_then` aux_constbyte0_serializer32)

let aux_call_indirect_serializer32 =
  [@inline_let] let _ = synth_aux_call_indirect_injective () in
  [@inline_let] let _ = synth_aux_call_indirect_inverse () in
  [@inline_let] let _ = assert_norm (aux_call_indirect_parser_kind == aux_call_indirect'_parser_kind) in
  LS.serialize32_synth _ synth_aux_call_indirect _ aux_call_indirect'_serializer32 synth_aux_call_indirect_recip (fun x -> synth_aux_call_indirect_recip x) ()

inline_for_extraction let aux_call_indirect'_size32 : LS.size32 aux_call_indirect'_serializer = (typeidx_size32 `LS.size32_nondep_then` aux_constbyte0_size32)

let aux_call_indirect_size32 =
  [@inline_let] let _ = synth_aux_call_indirect_injective () in
  [@inline_let] let _ = synth_aux_call_indirect_inverse () in
  [@inline_let] let _ = assert_norm (aux_call_indirect_parser_kind == aux_call_indirect'_parser_kind) in
  LS.size32_synth _ synth_aux_call_indirect _ aux_call_indirect'_size32 synth_aux_call_indirect_recip (fun x -> synth_aux_call_indirect_recip x) ()

let aux_call_indirect_bytesize_eqn x =
  [@inline_let] let _ = synth_aux_call_indirect_injective () in
  [@inline_let] let _ = synth_aux_call_indirect_inverse () in
  [@inline_let] let _ = assert_norm (aux_call_indirect_parser_kind == aux_call_indirect'_parser_kind) in
  LP.serialize_synth_eq _ synth_aux_call_indirect aux_call_indirect'_serializer synth_aux_call_indirect_recip () x;
LP.length_serialize_nondep_then typeidx_serializer aux_constbyte0_serializer x.x x.z;
  (typeidx_bytesize_eq (x.x));
  (aux_constbyte0_bytesize_eq (x.z));
  assert(aux_call_indirect_bytesize x == Seq.length (LP.serialize typeidx_serializer x.x) + Seq.length (LP.serialize aux_constbyte0_serializer x.z))

