module Wasm.Parse.Codesec

(* This file has been automatically generated by EverParse. *)
open FStar.Bytes
module U8 = FStar.UInt8
module U16 = FStar.UInt16
module U32 = FStar.UInt32
module U64 = FStar.UInt64
module LP = LowParse.Spec.Base
module LS = LowParse.SLow.Base
module LPI = LowParse.Spec.AllIntegers
module L = FStar.List.Tot
module BY = FStar.Bytes

open Wasm.Parse.Aux_section_const10
open Wasm.Parse.Aux_constbyte0
open Wasm.Parse.Aux_veccode

(* Type of field cont*)
include Wasm.Parse.Codesec_cont

type codesec = {
  n : aux_section_const10;
  aux_ignore_byte : aux_constbyte0;
  cont : codesec_cont;
}

inline_for_extraction noextract let codesec_parser_kind = LP.strong_parser_kind 9 16777220 None

noextract val codesec_parser: LP.parser codesec_parser_kind codesec

noextract val codesec_serializer: LP.serializer codesec_parser

noextract val codesec_bytesize (x:codesec) : GTot nat

noextract val codesec_bytesize_eq (x:codesec) : Lemma (codesec_bytesize x == Seq.length (LP.serialize codesec_serializer x))

val codesec_parser32: LS.parser32 codesec_parser

val codesec_serializer32: LS.serializer32 codesec_serializer

val codesec_size32: LS.size32 codesec_serializer

val codesec_bytesize_eqn (x: codesec) : Lemma (codesec_bytesize x == (aux_section_const10_bytesize (x.n)) + (aux_constbyte0_bytesize (x.aux_ignore_byte)) + (codesec_cont_bytesize (x.cont))) [SMTPat (codesec_bytesize x)]

