module Wasm.Parse.Aux_vectypeidx

(* This file has been automatically generated by EverParse. *)
open FStar.Bytes
module U8 = FStar.UInt8
module U16 = FStar.UInt16
module U32 = FStar.UInt32
module U64 = FStar.UInt64
module LP = LowParse.Spec.Base
module LS = LowParse.SLow.Base
module LPI = LowParse.Spec.AllIntegers
module L = FStar.List.Tot
module BY = FStar.Bytes

open Wasm.Parse.Typeidx

inline_for_extraction noextract let min_count = 0
inline_for_extraction noextract let max_count = 2047
type aux_vectypeidx = l:list typeidx{0 <= L.length l /\ L.length l <= 2047}

inline_for_extraction noextract let aux_vectypeidx_parser_kind = LP.strong_parser_kind 4 8192 None

noextract val aux_vectypeidx_parser: LP.parser aux_vectypeidx_parser_kind aux_vectypeidx

noextract val aux_vectypeidx_serializer: LP.serializer aux_vectypeidx_parser

noextract val aux_vectypeidx_bytesize (x:aux_vectypeidx) : GTot nat

noextract val aux_vectypeidx_bytesize_eq (x:aux_vectypeidx) : Lemma (aux_vectypeidx_bytesize x == Seq.length (LP.serialize aux_vectypeidx_serializer x))

val aux_vectypeidx_parser32: LS.parser32 aux_vectypeidx_parser

val aux_vectypeidx_serializer32: LS.serializer32 aux_vectypeidx_serializer

val aux_vectypeidx_size32: LS.size32 aux_vectypeidx_serializer

