module Wasm.Parse.Global

(* This file has been automatically generated by EverParse. *)
open FStar.Bytes
module U8 = FStar.UInt8
module U16 = FStar.UInt16
module U32 = FStar.UInt32
module U64 = FStar.UInt64
module LP = LowParse.Spec
module LS = LowParse.SLow
module LPI = LowParse.Spec.AllIntegers
module L = FStar.List.Tot
module BY = FStar.Bytes

#reset-options "--using_facts_from '* -FStar.Tactics -FStar.Reflection' --z3rlimit 16 --z3cliopt smt.arith.nl=false --max_fuel 2 --max_ifuel 2"

type global' = (globaltype & constexpr)

inline_for_extraction let synth_global (x: global') : global =
  match x with (gt,e) -> {
    gt = gt;
    e = e;
  }

inline_for_extraction let synth_global_recip (x: global) : global' = (x.gt,x.e)

let synth_global_recip_inverse () : Lemma (LP.synth_inverse synth_global_recip synth_global) = ()

let synth_global_injective () : Lemma (LP.synth_injective synth_global) =
  LP.synth_inverse_synth_injective synth_global_recip synth_global;
  synth_global_recip_inverse ()

let synth_global_inverse () : Lemma (LP.synth_inverse synth_global synth_global_recip) =
  assert_norm (LP.synth_inverse synth_global synth_global_recip)

let synth_global_recip_injective () : Lemma (LP.synth_injective synth_global_recip) =
  synth_global_recip_inverse ();
  LP.synth_inverse_synth_injective synth_global synth_global_recip

noextract let global'_parser : LP.parser _ global' = (globaltype_parser `LP.nondep_then` constexpr_parser)

noextract let global'_parser_kind = LP.get_parser_kind global'_parser

let global_parser =
  synth_global_injective ();
  assert_norm (global_parser_kind == global'_parser_kind);
  global'_parser `LP.parse_synth` synth_global

noextract let global'_serializer : LP.serializer global'_parser = (globaltype_serializer `LP.serialize_nondep_then` constexpr_serializer)

let global_serializer =
  [@inline_let] let _ = synth_global_injective () in
  [@inline_let] let _ = synth_global_inverse () in
  [@inline_let] let _ = assert_norm (global_parser_kind == global'_parser_kind) in
  LP.serialize_synth _ synth_global global'_serializer synth_global_recip ()

let global_bytesize (x:global) : GTot nat = Seq.length (global_serializer x)

let global_bytesize_eq x = ()

inline_for_extraction let global'_parser32 : LS.parser32 global'_parser = (globaltype_parser32 `LS.parse32_nondep_then` constexpr_parser32)

let global_parser32 =
  [@inline_let] let _ = synth_global_injective () in
  [@inline_let] let _ = assert_norm (global_parser_kind == global'_parser_kind) in
  LS.parse32_synth _ synth_global (fun x -> synth_global x) global'_parser32 ()

inline_for_extraction let global'_serializer32 : LS.serializer32 global'_serializer = (globaltype_serializer32 `LS.serialize32_nondep_then` constexpr_serializer32)

let global_serializer32 =
  [@inline_let] let _ = synth_global_injective () in
  [@inline_let] let _ = synth_global_inverse () in
  [@inline_let] let _ = assert_norm (global_parser_kind == global'_parser_kind) in
  LS.serialize32_synth _ synth_global _ global'_serializer32 synth_global_recip (fun x -> synth_global_recip x) ()

inline_for_extraction let global'_size32 : LS.size32 global'_serializer = (globaltype_size32 `LS.size32_nondep_then` constexpr_size32)

let global_size32 =
  [@inline_let] let _ = synth_global_injective () in
  [@inline_let] let _ = synth_global_inverse () in
  [@inline_let] let _ = assert_norm (global_parser_kind == global'_parser_kind) in
  LS.size32_synth _ synth_global _ global'_size32 synth_global_recip (fun x -> synth_global_recip x) ()

let global_bytesize_eqn x =
  [@inline_let] let _ = synth_global_injective () in
  [@inline_let] let _ = synth_global_inverse () in
  [@inline_let] let _ = assert_norm (global_parser_kind == global'_parser_kind) in
  LP.serialize_synth_eq _ synth_global global'_serializer synth_global_recip () x;
LP.length_serialize_nondep_then globaltype_serializer constexpr_serializer x.gt x.e;
  (globaltype_bytesize_eq (x.gt));
  (constexpr_bytesize_eq (x.e));
  assert(global_bytesize x == Seq.length (LP.serialize globaltype_serializer x.gt) + Seq.length (LP.serialize constexpr_serializer x.e))

