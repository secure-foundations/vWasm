module Wasm.Parse.Startsec_cont

(* This file has been automatically generated by EverParse. *)
open FStar.Bytes
module U8 = FStar.UInt8
module U16 = FStar.UInt16
module U32 = FStar.UInt32
module U64 = FStar.UInt64
module LP = LowParse.Spec.Base
module LS = LowParse.SLow.Base
module LPI = LowParse.Spec.AllIntegers
module L = FStar.List.Tot
module BY = FStar.Bytes

open Wasm.Parse.Start

type startsec_cont = start

inline_for_extraction noextract let startsec_cont_parser_kind = LP.strong_parser_kind 7 7 None

noextract val startsec_cont_parser: LP.parser startsec_cont_parser_kind startsec_cont

noextract val startsec_cont_serializer: LP.serializer startsec_cont_parser

noextract val startsec_cont_bytesize (x:startsec_cont) : GTot nat

noextract val startsec_cont_bytesize_eq (x:startsec_cont) : Lemma (startsec_cont_bytesize x == Seq.length (LP.serialize startsec_cont_serializer x))

val startsec_cont_parser32: LS.parser32 startsec_cont_parser

val startsec_cont_serializer32: LS.serializer32 startsec_cont_serializer

val startsec_cont_size32: LS.size32 startsec_cont_serializer

val startsec_cont_bytesize_eqn (x: startsec_cont) : Lemma (startsec_cont_bytesize x == 3 + (start_bytesize (x))) [SMTPat (startsec_cont_bytesize x)]

