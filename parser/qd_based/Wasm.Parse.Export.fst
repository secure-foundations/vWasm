module Wasm.Parse.Export

(* This file has been automatically generated by EverParse. *)
open FStar.Bytes
module U8 = FStar.UInt8
module U16 = FStar.UInt16
module U32 = FStar.UInt32
module U64 = FStar.UInt64
module LP = LowParse.Spec
module LS = LowParse.SLow
module LPI = LowParse.Spec.AllIntegers
module L = FStar.List.Tot
module BY = FStar.Bytes

#reset-options "--using_facts_from '* -FStar.Tactics -FStar.Reflection' --z3rlimit 16 --z3cliopt smt.arith.nl=false --max_fuel 2 --max_ifuel 2"

type export' = (name & exportdesc)

inline_for_extraction let synth_export (x: export') : export =
  match x with (nm,d) -> {
    nm = nm;
    d = d;
  }

inline_for_extraction let synth_export_recip (x: export) : export' = (x.nm,x.d)

let synth_export_recip_inverse () : Lemma (LP.synth_inverse synth_export_recip synth_export) = ()

let synth_export_injective () : Lemma (LP.synth_injective synth_export) =
  LP.synth_inverse_synth_injective synth_export_recip synth_export;
  synth_export_recip_inverse ()

let synth_export_inverse () : Lemma (LP.synth_inverse synth_export synth_export_recip) =
  assert_norm (LP.synth_inverse synth_export synth_export_recip)

let synth_export_recip_injective () : Lemma (LP.synth_injective synth_export_recip) =
  synth_export_recip_inverse ();
  LP.synth_inverse_synth_injective synth_export synth_export_recip

noextract let export'_parser : LP.parser _ export' = (name_parser `LP.nondep_then` exportdesc_parser)

noextract let export'_parser_kind = LP.get_parser_kind export'_parser

let export_parser =
  synth_export_injective ();
  assert_norm (export_parser_kind == export'_parser_kind);
  export'_parser `LP.parse_synth` synth_export

noextract let export'_serializer : LP.serializer export'_parser = (name_serializer `LP.serialize_nondep_then` exportdesc_serializer)

let export_serializer =
  [@inline_let] let _ = synth_export_injective () in
  [@inline_let] let _ = synth_export_inverse () in
  [@inline_let] let _ = assert_norm (export_parser_kind == export'_parser_kind) in
  LP.serialize_synth _ synth_export export'_serializer synth_export_recip ()

let export_bytesize (x:export) : GTot nat = Seq.length (export_serializer x)

let export_bytesize_eq x = ()

inline_for_extraction let export'_parser32 : LS.parser32 export'_parser = (name_parser32 `LS.parse32_nondep_then` exportdesc_parser32)

let export_parser32 =
  [@inline_let] let _ = synth_export_injective () in
  [@inline_let] let _ = assert_norm (export_parser_kind == export'_parser_kind) in
  LS.parse32_synth _ synth_export (fun x -> synth_export x) export'_parser32 ()

inline_for_extraction let export'_serializer32 : LS.serializer32 export'_serializer = (name_serializer32 `LS.serialize32_nondep_then` exportdesc_serializer32)

let export_serializer32 =
  [@inline_let] let _ = synth_export_injective () in
  [@inline_let] let _ = synth_export_inverse () in
  [@inline_let] let _ = assert_norm (export_parser_kind == export'_parser_kind) in
  LS.serialize32_synth _ synth_export _ export'_serializer32 synth_export_recip (fun x -> synth_export_recip x) ()

inline_for_extraction let export'_size32 : LS.size32 export'_serializer = (name_size32 `LS.size32_nondep_then` exportdesc_size32)

let export_size32 =
  [@inline_let] let _ = synth_export_injective () in
  [@inline_let] let _ = synth_export_inverse () in
  [@inline_let] let _ = assert_norm (export_parser_kind == export'_parser_kind) in
  LS.size32_synth _ synth_export _ export'_size32 synth_export_recip (fun x -> synth_export_recip x) ()

let export_bytesize_eqn x =
  [@inline_let] let _ = synth_export_injective () in
  [@inline_let] let _ = synth_export_inverse () in
  [@inline_let] let _ = assert_norm (export_parser_kind == export'_parser_kind) in
  LP.serialize_synth_eq _ synth_export export'_serializer synth_export_recip () x;
LP.length_serialize_nondep_then name_serializer exportdesc_serializer x.nm x.d;
  (name_bytesize_eq (x.nm));
  (exportdesc_bytesize_eq (x.d));
  assert(export_bytesize x == Seq.length (LP.serialize name_serializer x.nm) + Seq.length (LP.serialize exportdesc_serializer x.d))

