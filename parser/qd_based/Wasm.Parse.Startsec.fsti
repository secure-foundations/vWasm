module Wasm.Parse.Startsec

(* This file has been automatically generated by EverParse. *)
open FStar.Bytes
module U8 = FStar.UInt8
module U16 = FStar.UInt16
module U32 = FStar.UInt32
module U64 = FStar.UInt64
module LP = LowParse.Spec.Base
module LS = LowParse.SLow.Base
module LPI = LowParse.Spec.AllIntegers
module L = FStar.List.Tot
module BY = FStar.Bytes

open Wasm.Parse.Aux_section_const8
open Wasm.Parse.Aux_constbyte0
open Wasm.Parse.Start

(* Type of field cont*)
include Wasm.Parse.Startsec_cont

type startsec = {
  n : aux_section_const8;
  aux_ignore_byte : aux_constbyte0;
  cont : startsec_cont;
}

inline_for_extraction noextract let startsec_parser_kind = LP.strong_parser_kind 9 9 None

noextract val startsec_parser: LP.parser startsec_parser_kind startsec

noextract val startsec_serializer: LP.serializer startsec_parser

noextract val startsec_bytesize (x:startsec) : GTot nat

noextract val startsec_bytesize_eq (x:startsec) : Lemma (startsec_bytesize x == Seq.length (LP.serialize startsec_serializer x))

val startsec_parser32: LS.parser32 startsec_parser

val startsec_serializer32: LS.serializer32 startsec_serializer

val startsec_size32: LS.size32 startsec_serializer

val startsec_bytesize_eqn (x: startsec) : Lemma (startsec_bytesize x == (aux_section_const8_bytesize (x.n)) + (aux_constbyte0_bytesize (x.aux_ignore_byte)) + (startsec_cont_bytesize (x.cont))) [SMTPat (startsec_bytesize x)]

