module Wasm.Parse.Typeidx

(* This file has been automatically generated by EverParse. *)
open FStar.Bytes
module U8 = FStar.UInt8
module U16 = FStar.UInt16
module U32 = FStar.UInt32
module U64 = FStar.UInt64
module LP = LowParse.Spec.Base
module LS = LowParse.SLow.Base
module LPI = LowParse.Spec.AllIntegers
module L = FStar.List.Tot
module BY = FStar.Bytes


type typeidx = U32.t

inline_for_extraction noextract let typeidx_parser_kind = LP.strong_parser_kind 4 4 (Some LP.ParserKindMetadataTotal)

noextract val typeidx_parser: LP.parser typeidx_parser_kind typeidx

noextract val typeidx_serializer: LP.serializer typeidx_parser

noextract val typeidx_bytesize (x:typeidx) : GTot nat

noextract val typeidx_bytesize_eq (x:typeidx) : Lemma (typeidx_bytesize x == Seq.length (LP.serialize typeidx_serializer x))

val typeidx_parser32: LS.parser32 typeidx_parser

val typeidx_serializer32: LS.serializer32 typeidx_serializer

val typeidx_size32: LS.size32 typeidx_serializer

val typeidx_bytesize_eqn (x: typeidx) : Lemma (typeidx_bytesize x == 4) [SMTPat (typeidx_bytesize x)]

val typeidx_parser_serializer_eq (_: unit) : Lemma (typeidx_parser == LPI.parse_u32 /\ typeidx_serializer == LPI.serialize_u32)

