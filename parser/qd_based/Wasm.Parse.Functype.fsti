module Wasm.Parse.Functype

(* This file has been automatically generated by EverParse. *)
open FStar.Bytes
module U8 = FStar.UInt8
module U16 = FStar.UInt16
module U32 = FStar.UInt32
module U64 = FStar.UInt64
module LP = LowParse.Spec.Base
module LS = LowParse.SLow.Base
module LPI = LowParse.Spec.AllIntegers
module L = FStar.List.Tot
module BY = FStar.Bytes

open Wasm.Parse.Aux_functype_magic
open Wasm.Parse.Aux_vecvaltype

type functype = {
  m : aux_functype_magic;
  params : aux_vecvaltype;
  results : aux_vecvaltype;
}

inline_for_extraction noextract let functype_parser_kind = LP.strong_parser_kind 9 8199 None

noextract val functype_parser: LP.parser functype_parser_kind functype

noextract val functype_serializer: LP.serializer functype_parser

noextract val functype_bytesize (x:functype) : GTot nat

noextract val functype_bytesize_eq (x:functype) : Lemma (functype_bytesize x == Seq.length (LP.serialize functype_serializer x))

val functype_parser32: LS.parser32 functype_parser

val functype_serializer32: LS.serializer32 functype_serializer

val functype_size32: LS.size32 functype_serializer

val functype_bytesize_eqn (x: functype) : Lemma (functype_bytesize x == (aux_functype_magic_bytesize (x.m)) + (aux_vecvaltype_bytesize (x.params)) + (aux_vecvaltype_bytesize (x.results))) [SMTPat (functype_bytesize x)]

