module Wasm.Parse.Aux_vectable

(* This file has been automatically generated by EverParse. *)
open FStar.Bytes
module U8 = FStar.UInt8
module U16 = FStar.UInt16
module U32 = FStar.UInt32
module U64 = FStar.UInt64
module LP = LowParse.Spec.Base
module LS = LowParse.SLow.Base
module LPI = LowParse.Spec.AllIntegers
module L = FStar.List.Tot
module BY = FStar.Bytes

open Wasm.Parse.Table

inline_for_extraction noextract let min_count = 0
inline_for_extraction noextract let max_count = 33554431
type aux_vectable = l:list table{0 <= L.length l /\ L.length l <= 33554431}

inline_for_extraction noextract let aux_vectable_parser_kind = LP.strong_parser_kind 4 335544314 None

noextract val aux_vectable_parser: LP.parser aux_vectable_parser_kind aux_vectable

noextract val aux_vectable_serializer: LP.serializer aux_vectable_parser

noextract val aux_vectable_bytesize (x:aux_vectable) : GTot nat

noextract val aux_vectable_bytesize_eq (x:aux_vectable) : Lemma (aux_vectable_bytesize x == Seq.length (LP.serialize aux_vectable_serializer x))

val aux_vectable_parser32: LS.parser32 aux_vectable_parser

val aux_vectable_serializer32: LS.serializer32 aux_vectable_serializer

val aux_vectable_size32: LS.size32 aux_vectable_serializer

