module Wasm.Parse.Mut

(* This file has been automatically generated by EverParse. *)
open FStar.Bytes
module U8 = FStar.UInt8
module U16 = FStar.UInt16
module U32 = FStar.UInt32
module U64 = FStar.UInt64
module LP = LowParse.Spec.Base
module LS = LowParse.SLow.Base
module LPI = LowParse.Spec.AllIntegers
module L = FStar.List.Tot
module BY = FStar.Bytes


type mut =
  | Cnst
  | Var

let string_of_mut = function
  | Cnst -> "cnst"
  | Var -> "var"

inline_for_extraction noextract let mut_parser_kind = LP.strong_parser_kind 1 1 None

noextract val mut_parser: LP.parser mut_parser_kind mut

noextract val mut_serializer: LP.serializer mut_parser

noextract val mut_bytesize (x:mut) : GTot nat

noextract val mut_bytesize_eq (x:mut) : Lemma (mut_bytesize x == Seq.length (LP.serialize mut_serializer x))

val mut_parser32: LS.parser32 mut_parser

val mut_serializer32: LS.serializer32 mut_serializer

val mut_size32: LS.size32 mut_serializer

