module Wasm.Parse.I64

(* This file has been automatically generated by EverParse. *)
open FStar.Bytes
module U8 = FStar.UInt8
module U16 = FStar.UInt16
module U32 = FStar.UInt32
module U64 = FStar.UInt64
module LP = LowParse.Spec.Base
module LS = LowParse.SLow.Base
module LPI = LowParse.Spec.AllIntegers
module L = FStar.List.Tot
module BY = FStar.Bytes


type i64 = U64.t

inline_for_extraction noextract let i64_parser_kind = LP.strong_parser_kind 8 8 (Some LP.ParserKindMetadataTotal)

noextract val i64_parser: LP.parser i64_parser_kind i64

noextract val i64_serializer: LP.serializer i64_parser

noextract val i64_bytesize (x:i64) : GTot nat

noextract val i64_bytesize_eq (x:i64) : Lemma (i64_bytesize x == Seq.length (LP.serialize i64_serializer x))

val i64_parser32: LS.parser32 i64_parser

val i64_serializer32: LS.serializer32 i64_serializer

val i64_size32: LS.size32 i64_serializer

val i64_bytesize_eqn (x: i64) : Lemma (i64_bytesize x == 8) [SMTPat (i64_bytesize x)]

val i64_parser_serializer_eq (_: unit) : Lemma (i64_parser == LPI.parse_u64 /\ i64_serializer == LPI.serialize_u64)

