module Wasm.Parse.F32

(* This file has been automatically generated by EverParse. *)
open FStar.Bytes
module U8 = FStar.UInt8
module U16 = FStar.UInt16
module U32 = FStar.UInt32
module U64 = FStar.UInt64
module LP = LowParse.Spec.Base
module LS = LowParse.SLow.Base
module LPI = LowParse.Spec.AllIntegers
module L = FStar.List.Tot
module BY = FStar.Bytes


type f32 = lbytes 4

inline_for_extraction noextract let f32_parser_kind = LP.strong_parser_kind 4 4 (Some LP.ParserKindMetadataTotal)

noextract val f32_parser: LP.parser f32_parser_kind f32

noextract val f32_serializer: LP.serializer f32_parser

noextract val f32_bytesize (x:f32) : GTot nat

noextract val f32_bytesize_eq (x:f32) : Lemma (f32_bytesize x == Seq.length (LP.serialize f32_serializer x))

val f32_parser32: LS.parser32 f32_parser

val f32_serializer32: LS.serializer32 f32_serializer

val f32_size32: LS.size32 f32_serializer

val f32_bytesize_eqn (x: f32) : Lemma (f32_bytesize x == BY.length x) [SMTPat (f32_bytesize x)]

