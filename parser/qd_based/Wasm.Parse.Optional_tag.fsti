module Wasm.Parse.Optional_tag

(* This file has been automatically generated by EverParse. *)
open FStar.Bytes
module U8 = FStar.UInt8
module U16 = FStar.UInt16
module U32 = FStar.UInt32
module U64 = FStar.UInt64
module LP = LowParse.Spec.Base
module LS = LowParse.SLow.Base
module LPI = LowParse.Spec.AllIntegers
module L = FStar.List.Tot
module BY = FStar.Bytes


type optional_tag =
  | Absent
  | Present

let string_of_optional_tag = function
  | Absent -> "absent"
  | Present -> "present"

inline_for_extraction noextract let optional_tag_parser_kind = LP.strong_parser_kind 1 1 None

noextract val optional_tag_parser: LP.parser optional_tag_parser_kind optional_tag

noextract val optional_tag_serializer: LP.serializer optional_tag_parser

noextract val optional_tag_bytesize (x:optional_tag) : GTot nat

noextract val optional_tag_bytesize_eq (x:optional_tag) : Lemma (optional_tag_bytesize x == Seq.length (LP.serialize optional_tag_serializer x))

val optional_tag_parser32: LS.parser32 optional_tag_parser

val optional_tag_serializer32: LS.serializer32 optional_tag_serializer

val optional_tag_size32: LS.size32 optional_tag_serializer

