module Wasm.Parse.Locals

(* This file has been automatically generated by EverParse. *)
open FStar.Bytes
module U8 = FStar.UInt8
module U16 = FStar.UInt16
module U32 = FStar.UInt32
module U64 = FStar.UInt64
module LP = LowParse.Spec
module LS = LowParse.SLow
module LPI = LowParse.Spec.AllIntegers
module L = FStar.List.Tot
module BY = FStar.Bytes

#reset-options "--using_facts_from '* -FStar.Tactics -FStar.Reflection' --z3rlimit 16 --z3cliopt smt.arith.nl=false --max_fuel 2 --max_ifuel 2"

type locals' = (U32.t & valtype)

inline_for_extraction let synth_locals (x: locals') : locals =
  match x with (n,t) -> {
    n = n;
    t = t;
  }

inline_for_extraction let synth_locals_recip (x: locals) : locals' = (x.n,x.t)

let synth_locals_recip_inverse () : Lemma (LP.synth_inverse synth_locals_recip synth_locals) = ()

let synth_locals_injective () : Lemma (LP.synth_injective synth_locals) =
  LP.synth_inverse_synth_injective synth_locals_recip synth_locals;
  synth_locals_recip_inverse ()

let synth_locals_inverse () : Lemma (LP.synth_inverse synth_locals synth_locals_recip) =
  assert_norm (LP.synth_inverse synth_locals synth_locals_recip)

let synth_locals_recip_injective () : Lemma (LP.synth_injective synth_locals_recip) =
  synth_locals_recip_inverse ();
  LP.synth_inverse_synth_injective synth_locals synth_locals_recip

noextract let locals'_parser : LP.parser _ locals' = (LPI.parse_u32 `LP.nondep_then` valtype_parser)

noextract let locals'_parser_kind = LP.get_parser_kind locals'_parser

let locals_parser =
  synth_locals_injective ();
  assert_norm (locals_parser_kind == locals'_parser_kind);
  locals'_parser `LP.parse_synth` synth_locals

noextract let locals'_serializer : LP.serializer locals'_parser = (LPI.serialize_u32 `LP.serialize_nondep_then` valtype_serializer)

let locals_serializer =
  [@inline_let] let _ = synth_locals_injective () in
  [@inline_let] let _ = synth_locals_inverse () in
  [@inline_let] let _ = assert_norm (locals_parser_kind == locals'_parser_kind) in
  LP.serialize_synth _ synth_locals locals'_serializer synth_locals_recip ()

let locals_bytesize (x:locals) : GTot nat = Seq.length (locals_serializer x)

let locals_bytesize_eq x = ()

inline_for_extraction let locals'_parser32 : LS.parser32 locals'_parser = (LS.parse32_u32 `LS.parse32_nondep_then` valtype_parser32)

let locals_parser32 =
  [@inline_let] let _ = synth_locals_injective () in
  [@inline_let] let _ = assert_norm (locals_parser_kind == locals'_parser_kind) in
  LS.parse32_synth _ synth_locals (fun x -> synth_locals x) locals'_parser32 ()

inline_for_extraction let locals'_serializer32 : LS.serializer32 locals'_serializer = (LS.serialize32_u32 `LS.serialize32_nondep_then` valtype_serializer32)

let locals_serializer32 =
  [@inline_let] let _ = synth_locals_injective () in
  [@inline_let] let _ = synth_locals_inverse () in
  [@inline_let] let _ = assert_norm (locals_parser_kind == locals'_parser_kind) in
  LS.serialize32_synth _ synth_locals _ locals'_serializer32 synth_locals_recip (fun x -> synth_locals_recip x) ()

inline_for_extraction let locals'_size32 : LS.size32 locals'_serializer = (LS.size32_u32 `LS.size32_nondep_then` valtype_size32)

let locals_size32 =
  [@inline_let] let _ = synth_locals_injective () in
  [@inline_let] let _ = synth_locals_inverse () in
  [@inline_let] let _ = assert_norm (locals_parser_kind == locals'_parser_kind) in
  LS.size32_synth _ synth_locals _ locals'_size32 synth_locals_recip (fun x -> synth_locals_recip x) ()

let locals_bytesize_eqn x =
  [@inline_let] let _ = synth_locals_injective () in
  [@inline_let] let _ = synth_locals_inverse () in
  [@inline_let] let _ = assert_norm (locals_parser_kind == locals'_parser_kind) in
  LP.serialize_synth_eq _ synth_locals locals'_serializer synth_locals_recip () x;
LP.length_serialize_nondep_then LPI.serialize_u32 valtype_serializer x.n x.t;
  (assert (FStar.Seq.length (LP.serialize LP.serialize_u32 (x.n)) == 4));
  (valtype_bytesize_eq (x.t));
  assert(locals_bytesize x == Seq.length (LP.serialize LPI.serialize_u32 x.n) + Seq.length (LP.serialize valtype_serializer x.t))

