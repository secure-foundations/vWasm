module Wasm.Parse.Aux_insn_label

(* This file has been automatically generated by EverParse. *)
open FStar.Bytes
module U8 = FStar.UInt8
module U16 = FStar.UInt16
module U32 = FStar.UInt32
module U64 = FStar.UInt64
module LP = LowParse.Spec.Base
module LS = LowParse.SLow.Base
module LPI = LowParse.Spec.AllIntegers
module L = FStar.List.Tot
module BY = FStar.Bytes


type aux_insn_label =
  | Unreachable
  | Nop
  | Block
  | Loop
  | If_
  | Br
  | Br_if
  | Br_table
  | Ret
  | Call
  | Call_indirect
  | Drop
  | Select_
  | Local_get
  | Local_set
  | Local_tee
  | Global_get
  | Global_set
  | I32_load
  | I64_load
  | F32_load
  | F64_load
  | I32_load8_s
  | I32_load8_u
  | I32_load16_s
  | I32_load16_u
  | I64_load8_s
  | I64_load8_u
  | I64_load16_s
  | I64_load16_u
  | I64_load32_s
  | I64_load32_u
  | I32_store
  | I64_store
  | F32_store
  | F64_store
  | I32_store8
  | I32_store16
  | I64_store8
  | I64_store16
  | I64_store32
  | Memory_size
  | Memory_grow
  | I32_const
  | I64_const
  | F32_const
  | F64_const
  | I32_eqz
  | I32_eq
  | I32_ne
  | I32_lt_s
  | I32_lt_u
  | I32_gt_s
  | I32_gt_u
  | I32_le_s
  | I32_le_u
  | I32_ge_s
  | I32_ge_u
  | I64_eqz
  | I64_eq
  | I64_ne
  | I64_lt_s
  | I64_lt_u
  | I64_gt_s
  | I64_gt_u
  | I64_le_s
  | I64_le_u
  | I64_ge_s
  | I64_ge_u
  | F32_eq
  | F32_ne
  | F32_lt
  | F32_gt
  | F32_le
  | F32_ge
  | F64_eq
  | F64_ne
  | F64_lt
  | F64_gt
  | F64_le
  | F64_ge
  | I32_clz
  | I32_ctz
  | I32_popcnt
  | I32_add
  | I32_sub
  | I32_mul
  | I32_div_s
  | I32_div_u
  | I32_rem_s
  | I32_rem_u
  | I32_and
  | I32_or
  | I32_xor
  | I32_shl
  | I32_shr_s
  | I32_shr_u
  | I32_rotl
  | I32_rotr
  | I64_clz
  | I64_ctz
  | I64_popcnt
  | I64_add
  | I64_sub
  | I64_mul
  | I64_div_s
  | I64_div_u
  | I64_rem_s
  | I64_rem_u
  | I64_and
  | I64_or
  | I64_xor
  | I64_shl
  | I64_shr_s
  | I64_shr_u
  | I64_rotl
  | I64_rotr
  | F32_abs
  | F32_neg
  | F32_ceil
  | F32_floor
  | F32_trunc
  | F32_nearest
  | F32_sqrt
  | F32_add
  | F32_sub
  | F32_mul
  | F32_div
  | F32_min
  | F32_max
  | F32_copysign
  | F64_abs
  | F64_neg
  | F64_ceil
  | F64_floor
  | F64_trunc
  | F64_nearest
  | F64_sqrt
  | F64_add
  | F64_sub
  | F64_mul
  | F64_div
  | F64_min
  | F64_max
  | F64_copysign
  | I32_wrap_i64
  | I32_trunc_f32_s
  | I32_trunc_f32_u
  | I32_trunc_f64_s
  | I32_trunc_f64_u
  | I64_extend_i32_s
  | I64_extend_i32_u
  | I64_trunc_f32_s
  | I64_trunc_f32_u
  | I64_trunc_f64_s
  | I64_trunc_f64_u
  | F32_convert_i32_s
  | F32_convert_i32_u
  | F32_convert_i64_s
  | F32_convert_i64_u
  | F32_demote_f64
  | F64_convert_i32_s
  | F64_convert_i32_u
  | F64_convert_i64_s
  | F64_convert_i64_u
  | F64_promote_f32
  | I32_reinterpret_f32
  | I64_reinterpret_f64
  | F32_reinterpret_i32
  | F64_reinterpret_i64
  | End_of_contiguous_instructions

let string_of_aux_insn_label = function
  | Unreachable -> "unreachable"
  | Nop -> "nop"
  | Block -> "block"
  | Loop -> "loop"
  | If_ -> "if_"
  | Br -> "br"
  | Br_if -> "br_if"
  | Br_table -> "br_table"
  | Ret -> "ret"
  | Call -> "call"
  | Call_indirect -> "call_indirect"
  | Drop -> "drop"
  | Select_ -> "select_"
  | Local_get -> "local_get"
  | Local_set -> "local_set"
  | Local_tee -> "local_tee"
  | Global_get -> "global_get"
  | Global_set -> "global_set"
  | I32_load -> "i32_load"
  | I64_load -> "i64_load"
  | F32_load -> "f32_load"
  | F64_load -> "f64_load"
  | I32_load8_s -> "i32_load8_s"
  | I32_load8_u -> "i32_load8_u"
  | I32_load16_s -> "i32_load16_s"
  | I32_load16_u -> "i32_load16_u"
  | I64_load8_s -> "i64_load8_s"
  | I64_load8_u -> "i64_load8_u"
  | I64_load16_s -> "i64_load16_s"
  | I64_load16_u -> "i64_load16_u"
  | I64_load32_s -> "i64_load32_s"
  | I64_load32_u -> "i64_load32_u"
  | I32_store -> "i32_store"
  | I64_store -> "i64_store"
  | F32_store -> "f32_store"
  | F64_store -> "f64_store"
  | I32_store8 -> "i32_store8"
  | I32_store16 -> "i32_store16"
  | I64_store8 -> "i64_store8"
  | I64_store16 -> "i64_store16"
  | I64_store32 -> "i64_store32"
  | Memory_size -> "memory_size"
  | Memory_grow -> "memory_grow"
  | I32_const -> "i32_const"
  | I64_const -> "i64_const"
  | F32_const -> "f32_const"
  | F64_const -> "f64_const"
  | I32_eqz -> "i32_eqz"
  | I32_eq -> "i32_eq"
  | I32_ne -> "i32_ne"
  | I32_lt_s -> "i32_lt_s"
  | I32_lt_u -> "i32_lt_u"
  | I32_gt_s -> "i32_gt_s"
  | I32_gt_u -> "i32_gt_u"
  | I32_le_s -> "i32_le_s"
  | I32_le_u -> "i32_le_u"
  | I32_ge_s -> "i32_ge_s"
  | I32_ge_u -> "i32_ge_u"
  | I64_eqz -> "i64_eqz"
  | I64_eq -> "i64_eq"
  | I64_ne -> "i64_ne"
  | I64_lt_s -> "i64_lt_s"
  | I64_lt_u -> "i64_lt_u"
  | I64_gt_s -> "i64_gt_s"
  | I64_gt_u -> "i64_gt_u"
  | I64_le_s -> "i64_le_s"
  | I64_le_u -> "i64_le_u"
  | I64_ge_s -> "i64_ge_s"
  | I64_ge_u -> "i64_ge_u"
  | F32_eq -> "f32_eq"
  | F32_ne -> "f32_ne"
  | F32_lt -> "f32_lt"
  | F32_gt -> "f32_gt"
  | F32_le -> "f32_le"
  | F32_ge -> "f32_ge"
  | F64_eq -> "f64_eq"
  | F64_ne -> "f64_ne"
  | F64_lt -> "f64_lt"
  | F64_gt -> "f64_gt"
  | F64_le -> "f64_le"
  | F64_ge -> "f64_ge"
  | I32_clz -> "i32_clz"
  | I32_ctz -> "i32_ctz"
  | I32_popcnt -> "i32_popcnt"
  | I32_add -> "i32_add"
  | I32_sub -> "i32_sub"
  | I32_mul -> "i32_mul"
  | I32_div_s -> "i32_div_s"
  | I32_div_u -> "i32_div_u"
  | I32_rem_s -> "i32_rem_s"
  | I32_rem_u -> "i32_rem_u"
  | I32_and -> "i32_and"
  | I32_or -> "i32_or"
  | I32_xor -> "i32_xor"
  | I32_shl -> "i32_shl"
  | I32_shr_s -> "i32_shr_s"
  | I32_shr_u -> "i32_shr_u"
  | I32_rotl -> "i32_rotl"
  | I32_rotr -> "i32_rotr"
  | I64_clz -> "i64_clz"
  | I64_ctz -> "i64_ctz"
  | I64_popcnt -> "i64_popcnt"
  | I64_add -> "i64_add"
  | I64_sub -> "i64_sub"
  | I64_mul -> "i64_mul"
  | I64_div_s -> "i64_div_s"
  | I64_div_u -> "i64_div_u"
  | I64_rem_s -> "i64_rem_s"
  | I64_rem_u -> "i64_rem_u"
  | I64_and -> "i64_and"
  | I64_or -> "i64_or"
  | I64_xor -> "i64_xor"
  | I64_shl -> "i64_shl"
  | I64_shr_s -> "i64_shr_s"
  | I64_shr_u -> "i64_shr_u"
  | I64_rotl -> "i64_rotl"
  | I64_rotr -> "i64_rotr"
  | F32_abs -> "f32_abs"
  | F32_neg -> "f32_neg"
  | F32_ceil -> "f32_ceil"
  | F32_floor -> "f32_floor"
  | F32_trunc -> "f32_trunc"
  | F32_nearest -> "f32_nearest"
  | F32_sqrt -> "f32_sqrt"
  | F32_add -> "f32_add"
  | F32_sub -> "f32_sub"
  | F32_mul -> "f32_mul"
  | F32_div -> "f32_div"
  | F32_min -> "f32_min"
  | F32_max -> "f32_max"
  | F32_copysign -> "f32_copysign"
  | F64_abs -> "f64_abs"
  | F64_neg -> "f64_neg"
  | F64_ceil -> "f64_ceil"
  | F64_floor -> "f64_floor"
  | F64_trunc -> "f64_trunc"
  | F64_nearest -> "f64_nearest"
  | F64_sqrt -> "f64_sqrt"
  | F64_add -> "f64_add"
  | F64_sub -> "f64_sub"
  | F64_mul -> "f64_mul"
  | F64_div -> "f64_div"
  | F64_min -> "f64_min"
  | F64_max -> "f64_max"
  | F64_copysign -> "f64_copysign"
  | I32_wrap_i64 -> "i32_wrap_i64"
  | I32_trunc_f32_s -> "i32_trunc_f32_s"
  | I32_trunc_f32_u -> "i32_trunc_f32_u"
  | I32_trunc_f64_s -> "i32_trunc_f64_s"
  | I32_trunc_f64_u -> "i32_trunc_f64_u"
  | I64_extend_i32_s -> "i64_extend_i32_s"
  | I64_extend_i32_u -> "i64_extend_i32_u"
  | I64_trunc_f32_s -> "i64_trunc_f32_s"
  | I64_trunc_f32_u -> "i64_trunc_f32_u"
  | I64_trunc_f64_s -> "i64_trunc_f64_s"
  | I64_trunc_f64_u -> "i64_trunc_f64_u"
  | F32_convert_i32_s -> "f32_convert_i32_s"
  | F32_convert_i32_u -> "f32_convert_i32_u"
  | F32_convert_i64_s -> "f32_convert_i64_s"
  | F32_convert_i64_u -> "f32_convert_i64_u"
  | F32_demote_f64 -> "f32_demote_f64"
  | F64_convert_i32_s -> "f64_convert_i32_s"
  | F64_convert_i32_u -> "f64_convert_i32_u"
  | F64_convert_i64_s -> "f64_convert_i64_s"
  | F64_convert_i64_u -> "f64_convert_i64_u"
  | F64_promote_f32 -> "f64_promote_f32"
  | I32_reinterpret_f32 -> "i32_reinterpret_f32"
  | I64_reinterpret_f64 -> "i64_reinterpret_f64"
  | F32_reinterpret_i32 -> "f32_reinterpret_i32"
  | F64_reinterpret_i64 -> "f64_reinterpret_i64"
  | End_of_contiguous_instructions -> "end_of_contiguous_instructions"

inline_for_extraction noextract let aux_insn_label_parser_kind = LP.strong_parser_kind 1 1 None

noextract val aux_insn_label_parser: LP.parser aux_insn_label_parser_kind aux_insn_label

noextract val aux_insn_label_serializer: LP.serializer aux_insn_label_parser

noextract val aux_insn_label_bytesize (x:aux_insn_label) : GTot nat

noextract val aux_insn_label_bytesize_eq (x:aux_insn_label) : Lemma (aux_insn_label_bytesize x == Seq.length (LP.serialize aux_insn_label_serializer x))

val aux_insn_label_parser32: LS.parser32 aux_insn_label_parser

val aux_insn_label_serializer32: LS.serializer32 aux_insn_label_serializer

val aux_insn_label_size32: LS.size32 aux_insn_label_serializer

