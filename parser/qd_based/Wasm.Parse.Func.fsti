module Wasm.Parse.Func

(* This file has been automatically generated by EverParse. *)
open FStar.Bytes
module U8 = FStar.UInt8
module U16 = FStar.UInt16
module U32 = FStar.UInt32
module U64 = FStar.UInt64
module LP = LowParse.Spec.Base
module LS = LowParse.SLow.Base
module LPI = LowParse.Spec.AllIntegers
module L = FStar.List.Tot
module BY = FStar.Bytes

open Wasm.Parse.Aux_veclocals
open Wasm.Parse.Expr

type func = {
  t : aux_veclocals;
  e : expr;
}

inline_for_extraction noextract let func_parser_kind = LP.strong_parser_kind 7 1048737 None

noextract val func_parser: LP.parser func_parser_kind func

noextract val func_serializer: LP.serializer func_parser

noextract val func_bytesize (x:func) : GTot nat

noextract val func_bytesize_eq (x:func) : Lemma (func_bytesize x == Seq.length (LP.serialize func_serializer x))

val func_parser32: LS.parser32 func_parser

val func_serializer32: LS.serializer32 func_serializer

val func_size32: LS.size32 func_serializer

val func_bytesize_eqn (x: func) : Lemma (func_bytesize x == (aux_veclocals_bytesize (x.t)) + (expr_bytesize (x.e))) [SMTPat (func_bytesize x)]

