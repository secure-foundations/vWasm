module Wasm.Parse.Locals

(* This file has been automatically generated by EverParse. *)
open FStar.Bytes
module U8 = FStar.UInt8
module U16 = FStar.UInt16
module U32 = FStar.UInt32
module U64 = FStar.UInt64
module LP = LowParse.Spec.Base
module LS = LowParse.SLow.Base
module LPI = LowParse.Spec.AllIntegers
module L = FStar.List.Tot
module BY = FStar.Bytes

open Wasm.Parse.Valtype

type locals = {
  n : U32.t;
  t : valtype;
}

inline_for_extraction noextract let locals_parser_kind = LP.strong_parser_kind 5 5 None

noextract val locals_parser: LP.parser locals_parser_kind locals

noextract val locals_serializer: LP.serializer locals_parser

noextract val locals_bytesize (x:locals) : GTot nat

noextract val locals_bytesize_eq (x:locals) : Lemma (locals_bytesize x == Seq.length (LP.serialize locals_serializer x))

val locals_parser32: LS.parser32 locals_parser

val locals_serializer32: LS.serializer32 locals_serializer

val locals_size32: LS.size32 locals_serializer

val locals_bytesize_eqn (x: locals) : Lemma (locals_bytesize x == 4 + (valtype_bytesize (x.t))) [SMTPat (locals_bytesize x)]

